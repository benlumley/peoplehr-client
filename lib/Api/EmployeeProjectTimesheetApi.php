<?php
/**
 * EmployeeProjectTimesheetApi
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * PeopleHR API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.1
 * Contact: customerservices@peoplehr.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.10.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * EmployeeProjectTimesheetApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class EmployeeProjectTimesheetApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'employeeProjectTimesheetAddNewProjectPost' => [
            'application/json',
        ],
        'employeeProjectTimesheetAddNewProjectTaskDetailPost' => [
            'application/json',
        ],
        'employeeProjectTimesheetAddNewProjectTaskPost' => [
            'application/json',
        ],
        'employeeProjectTimesheetCreateProjectTimesheetPost' => [
            'application/json',
        ],
        'employeeProjectTimesheetDeleteProjectTimesheetPost' => [
            'application/json',
        ],
        'employeeProjectTimesheetEditProjectPost' => [
            'application/json',
        ],
        'employeeProjectTimesheetEditProjectTaskDetailPost' => [
            'application/json',
        ],
        'employeeProjectTimesheetEditProjectTaskPost' => [
            'application/json',
        ],
        'employeeProjectTimesheetGetAllProjectTaskDetailPost' => [
            'application/json',
        ],
        'employeeProjectTimesheetGetAllProjectTaskPost' => [
            'application/json',
        ],
        'employeeProjectTimesheetGetAllTimesheetProjectPost' => [
            'application/json',
        ],
        'employeeProjectTimesheetGetProjectTimesheetByTransactionIdPost' => [
            'application/json',
        ],
        'employeeProjectTimesheetGetProjectTimesheetDetailPost' => [
            'application/json',
        ],
        'employeeProjectTimesheetUpdateProjectTimesheetPost' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: Configuration::getDefaultConfiguration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation employeeProjectTimesheetAddNewProjectPost
     *
     * Add New Project
     *
     * @param  \OpenAPI\Client\Model\AddNewProjectParameter $body body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['employeeProjectTimesheetAddNewProjectPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ErrorForAddNewProject
     */
    public function employeeProjectTimesheetAddNewProjectPost($body, string $contentType = self::contentTypes['employeeProjectTimesheetAddNewProjectPost'][0])
    {
        list($response) = $this->employeeProjectTimesheetAddNewProjectPostWithHttpInfo($body, $contentType);
        return $response;
    }

    /**
     * Operation employeeProjectTimesheetAddNewProjectPostWithHttpInfo
     *
     * Add New Project
     *
     * @param  \OpenAPI\Client\Model\AddNewProjectParameter $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['employeeProjectTimesheetAddNewProjectPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ErrorForAddNewProject, HTTP status code, HTTP response headers (array of strings)
     */
    public function employeeProjectTimesheetAddNewProjectPostWithHttpInfo($body, string $contentType = self::contentTypes['employeeProjectTimesheetAddNewProjectPost'][0])
    {
        $request = $this->employeeProjectTimesheetAddNewProjectPostRequest($body, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ErrorForAddNewProject' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorForAddNewProject' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorForAddNewProject', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\OpenAPI\Client\Model\ErrorForAddNewProject';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorForAddNewProject',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation employeeProjectTimesheetAddNewProjectPostAsync
     *
     * Add New Project
     *
     * @param  \OpenAPI\Client\Model\AddNewProjectParameter $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['employeeProjectTimesheetAddNewProjectPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function employeeProjectTimesheetAddNewProjectPostAsync($body, string $contentType = self::contentTypes['employeeProjectTimesheetAddNewProjectPost'][0])
    {
        return $this->employeeProjectTimesheetAddNewProjectPostAsyncWithHttpInfo($body, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation employeeProjectTimesheetAddNewProjectPostAsyncWithHttpInfo
     *
     * Add New Project
     *
     * @param  \OpenAPI\Client\Model\AddNewProjectParameter $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['employeeProjectTimesheetAddNewProjectPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function employeeProjectTimesheetAddNewProjectPostAsyncWithHttpInfo($body, string $contentType = self::contentTypes['employeeProjectTimesheetAddNewProjectPost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ErrorForAddNewProject';
        $request = $this->employeeProjectTimesheetAddNewProjectPostRequest($body, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'employeeProjectTimesheetAddNewProjectPost'
     *
     * @param  \OpenAPI\Client\Model\AddNewProjectParameter $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['employeeProjectTimesheetAddNewProjectPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function employeeProjectTimesheetAddNewProjectPostRequest($body, string $contentType = self::contentTypes['employeeProjectTimesheetAddNewProjectPost'][0])
    {

        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling employeeProjectTimesheetAddNewProjectPost'
            );
        }


        $resourcePath = '/Employee Project Timesheet  -  AddNewProject';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($body)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation employeeProjectTimesheetAddNewProjectTaskDetailPost
     *
     * Add New Project Task Detail
     *
     * @param  \OpenAPI\Client\Model\AddNewProjectTaskDetailParameter $body body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['employeeProjectTimesheetAddNewProjectTaskDetailPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ErrorForAddNewProjectTaskDetail
     */
    public function employeeProjectTimesheetAddNewProjectTaskDetailPost($body, string $contentType = self::contentTypes['employeeProjectTimesheetAddNewProjectTaskDetailPost'][0])
    {
        list($response) = $this->employeeProjectTimesheetAddNewProjectTaskDetailPostWithHttpInfo($body, $contentType);
        return $response;
    }

    /**
     * Operation employeeProjectTimesheetAddNewProjectTaskDetailPostWithHttpInfo
     *
     * Add New Project Task Detail
     *
     * @param  \OpenAPI\Client\Model\AddNewProjectTaskDetailParameter $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['employeeProjectTimesheetAddNewProjectTaskDetailPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ErrorForAddNewProjectTaskDetail, HTTP status code, HTTP response headers (array of strings)
     */
    public function employeeProjectTimesheetAddNewProjectTaskDetailPostWithHttpInfo($body, string $contentType = self::contentTypes['employeeProjectTimesheetAddNewProjectTaskDetailPost'][0])
    {
        $request = $this->employeeProjectTimesheetAddNewProjectTaskDetailPostRequest($body, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ErrorForAddNewProjectTaskDetail' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorForAddNewProjectTaskDetail' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorForAddNewProjectTaskDetail', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\OpenAPI\Client\Model\ErrorForAddNewProjectTaskDetail';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorForAddNewProjectTaskDetail',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation employeeProjectTimesheetAddNewProjectTaskDetailPostAsync
     *
     * Add New Project Task Detail
     *
     * @param  \OpenAPI\Client\Model\AddNewProjectTaskDetailParameter $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['employeeProjectTimesheetAddNewProjectTaskDetailPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function employeeProjectTimesheetAddNewProjectTaskDetailPostAsync($body, string $contentType = self::contentTypes['employeeProjectTimesheetAddNewProjectTaskDetailPost'][0])
    {
        return $this->employeeProjectTimesheetAddNewProjectTaskDetailPostAsyncWithHttpInfo($body, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation employeeProjectTimesheetAddNewProjectTaskDetailPostAsyncWithHttpInfo
     *
     * Add New Project Task Detail
     *
     * @param  \OpenAPI\Client\Model\AddNewProjectTaskDetailParameter $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['employeeProjectTimesheetAddNewProjectTaskDetailPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function employeeProjectTimesheetAddNewProjectTaskDetailPostAsyncWithHttpInfo($body, string $contentType = self::contentTypes['employeeProjectTimesheetAddNewProjectTaskDetailPost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ErrorForAddNewProjectTaskDetail';
        $request = $this->employeeProjectTimesheetAddNewProjectTaskDetailPostRequest($body, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'employeeProjectTimesheetAddNewProjectTaskDetailPost'
     *
     * @param  \OpenAPI\Client\Model\AddNewProjectTaskDetailParameter $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['employeeProjectTimesheetAddNewProjectTaskDetailPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function employeeProjectTimesheetAddNewProjectTaskDetailPostRequest($body, string $contentType = self::contentTypes['employeeProjectTimesheetAddNewProjectTaskDetailPost'][0])
    {

        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling employeeProjectTimesheetAddNewProjectTaskDetailPost'
            );
        }


        $resourcePath = '/Employee Project Timesheet  -  AddNewProjectTaskDetail';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($body)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation employeeProjectTimesheetAddNewProjectTaskPost
     *
     * Add New Project Task
     *
     * @param  \OpenAPI\Client\Model\AddNewProjectTaskParameter $body body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['employeeProjectTimesheetAddNewProjectTaskPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ErrorForAddNewProjectTask
     */
    public function employeeProjectTimesheetAddNewProjectTaskPost($body, string $contentType = self::contentTypes['employeeProjectTimesheetAddNewProjectTaskPost'][0])
    {
        list($response) = $this->employeeProjectTimesheetAddNewProjectTaskPostWithHttpInfo($body, $contentType);
        return $response;
    }

    /**
     * Operation employeeProjectTimesheetAddNewProjectTaskPostWithHttpInfo
     *
     * Add New Project Task
     *
     * @param  \OpenAPI\Client\Model\AddNewProjectTaskParameter $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['employeeProjectTimesheetAddNewProjectTaskPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ErrorForAddNewProjectTask, HTTP status code, HTTP response headers (array of strings)
     */
    public function employeeProjectTimesheetAddNewProjectTaskPostWithHttpInfo($body, string $contentType = self::contentTypes['employeeProjectTimesheetAddNewProjectTaskPost'][0])
    {
        $request = $this->employeeProjectTimesheetAddNewProjectTaskPostRequest($body, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ErrorForAddNewProjectTask' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorForAddNewProjectTask' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorForAddNewProjectTask', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\OpenAPI\Client\Model\ErrorForAddNewProjectTask';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorForAddNewProjectTask',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation employeeProjectTimesheetAddNewProjectTaskPostAsync
     *
     * Add New Project Task
     *
     * @param  \OpenAPI\Client\Model\AddNewProjectTaskParameter $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['employeeProjectTimesheetAddNewProjectTaskPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function employeeProjectTimesheetAddNewProjectTaskPostAsync($body, string $contentType = self::contentTypes['employeeProjectTimesheetAddNewProjectTaskPost'][0])
    {
        return $this->employeeProjectTimesheetAddNewProjectTaskPostAsyncWithHttpInfo($body, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation employeeProjectTimesheetAddNewProjectTaskPostAsyncWithHttpInfo
     *
     * Add New Project Task
     *
     * @param  \OpenAPI\Client\Model\AddNewProjectTaskParameter $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['employeeProjectTimesheetAddNewProjectTaskPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function employeeProjectTimesheetAddNewProjectTaskPostAsyncWithHttpInfo($body, string $contentType = self::contentTypes['employeeProjectTimesheetAddNewProjectTaskPost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ErrorForAddNewProjectTask';
        $request = $this->employeeProjectTimesheetAddNewProjectTaskPostRequest($body, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'employeeProjectTimesheetAddNewProjectTaskPost'
     *
     * @param  \OpenAPI\Client\Model\AddNewProjectTaskParameter $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['employeeProjectTimesheetAddNewProjectTaskPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function employeeProjectTimesheetAddNewProjectTaskPostRequest($body, string $contentType = self::contentTypes['employeeProjectTimesheetAddNewProjectTaskPost'][0])
    {

        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling employeeProjectTimesheetAddNewProjectTaskPost'
            );
        }


        $resourcePath = '/Employee Project Timesheet  -  AddNewProjectTask';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($body)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation employeeProjectTimesheetCreateProjectTimesheetPost
     *
     * Create project timesheet
     *
     * @param  \OpenAPI\Client\Model\CreateProjectTimesheetParameter $body body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['employeeProjectTimesheetCreateProjectTimesheetPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ErrorForCreateProjectTimesheet
     */
    public function employeeProjectTimesheetCreateProjectTimesheetPost($body, string $contentType = self::contentTypes['employeeProjectTimesheetCreateProjectTimesheetPost'][0])
    {
        list($response) = $this->employeeProjectTimesheetCreateProjectTimesheetPostWithHttpInfo($body, $contentType);
        return $response;
    }

    /**
     * Operation employeeProjectTimesheetCreateProjectTimesheetPostWithHttpInfo
     *
     * Create project timesheet
     *
     * @param  \OpenAPI\Client\Model\CreateProjectTimesheetParameter $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['employeeProjectTimesheetCreateProjectTimesheetPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ErrorForCreateProjectTimesheet, HTTP status code, HTTP response headers (array of strings)
     */
    public function employeeProjectTimesheetCreateProjectTimesheetPostWithHttpInfo($body, string $contentType = self::contentTypes['employeeProjectTimesheetCreateProjectTimesheetPost'][0])
    {
        $request = $this->employeeProjectTimesheetCreateProjectTimesheetPostRequest($body, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ErrorForCreateProjectTimesheet' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorForCreateProjectTimesheet' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorForCreateProjectTimesheet', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\OpenAPI\Client\Model\ErrorForCreateProjectTimesheet';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorForCreateProjectTimesheet',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation employeeProjectTimesheetCreateProjectTimesheetPostAsync
     *
     * Create project timesheet
     *
     * @param  \OpenAPI\Client\Model\CreateProjectTimesheetParameter $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['employeeProjectTimesheetCreateProjectTimesheetPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function employeeProjectTimesheetCreateProjectTimesheetPostAsync($body, string $contentType = self::contentTypes['employeeProjectTimesheetCreateProjectTimesheetPost'][0])
    {
        return $this->employeeProjectTimesheetCreateProjectTimesheetPostAsyncWithHttpInfo($body, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation employeeProjectTimesheetCreateProjectTimesheetPostAsyncWithHttpInfo
     *
     * Create project timesheet
     *
     * @param  \OpenAPI\Client\Model\CreateProjectTimesheetParameter $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['employeeProjectTimesheetCreateProjectTimesheetPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function employeeProjectTimesheetCreateProjectTimesheetPostAsyncWithHttpInfo($body, string $contentType = self::contentTypes['employeeProjectTimesheetCreateProjectTimesheetPost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ErrorForCreateProjectTimesheet';
        $request = $this->employeeProjectTimesheetCreateProjectTimesheetPostRequest($body, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'employeeProjectTimesheetCreateProjectTimesheetPost'
     *
     * @param  \OpenAPI\Client\Model\CreateProjectTimesheetParameter $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['employeeProjectTimesheetCreateProjectTimesheetPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function employeeProjectTimesheetCreateProjectTimesheetPostRequest($body, string $contentType = self::contentTypes['employeeProjectTimesheetCreateProjectTimesheetPost'][0])
    {

        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling employeeProjectTimesheetCreateProjectTimesheetPost'
            );
        }


        $resourcePath = '/Employee Project Timesheet  -  CreateProjectTimesheet';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($body)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation employeeProjectTimesheetDeleteProjectTimesheetPost
     *
     * Delete project timesheet
     *
     * @param  \OpenAPI\Client\Model\DeleteProjectTimesheetParameter $body body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['employeeProjectTimesheetDeleteProjectTimesheetPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ErrorForDeleteProjectTimesheet
     */
    public function employeeProjectTimesheetDeleteProjectTimesheetPost($body, string $contentType = self::contentTypes['employeeProjectTimesheetDeleteProjectTimesheetPost'][0])
    {
        list($response) = $this->employeeProjectTimesheetDeleteProjectTimesheetPostWithHttpInfo($body, $contentType);
        return $response;
    }

    /**
     * Operation employeeProjectTimesheetDeleteProjectTimesheetPostWithHttpInfo
     *
     * Delete project timesheet
     *
     * @param  \OpenAPI\Client\Model\DeleteProjectTimesheetParameter $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['employeeProjectTimesheetDeleteProjectTimesheetPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ErrorForDeleteProjectTimesheet, HTTP status code, HTTP response headers (array of strings)
     */
    public function employeeProjectTimesheetDeleteProjectTimesheetPostWithHttpInfo($body, string $contentType = self::contentTypes['employeeProjectTimesheetDeleteProjectTimesheetPost'][0])
    {
        $request = $this->employeeProjectTimesheetDeleteProjectTimesheetPostRequest($body, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ErrorForDeleteProjectTimesheet' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorForDeleteProjectTimesheet' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorForDeleteProjectTimesheet', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\OpenAPI\Client\Model\ErrorForDeleteProjectTimesheet';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorForDeleteProjectTimesheet',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation employeeProjectTimesheetDeleteProjectTimesheetPostAsync
     *
     * Delete project timesheet
     *
     * @param  \OpenAPI\Client\Model\DeleteProjectTimesheetParameter $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['employeeProjectTimesheetDeleteProjectTimesheetPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function employeeProjectTimesheetDeleteProjectTimesheetPostAsync($body, string $contentType = self::contentTypes['employeeProjectTimesheetDeleteProjectTimesheetPost'][0])
    {
        return $this->employeeProjectTimesheetDeleteProjectTimesheetPostAsyncWithHttpInfo($body, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation employeeProjectTimesheetDeleteProjectTimesheetPostAsyncWithHttpInfo
     *
     * Delete project timesheet
     *
     * @param  \OpenAPI\Client\Model\DeleteProjectTimesheetParameter $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['employeeProjectTimesheetDeleteProjectTimesheetPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function employeeProjectTimesheetDeleteProjectTimesheetPostAsyncWithHttpInfo($body, string $contentType = self::contentTypes['employeeProjectTimesheetDeleteProjectTimesheetPost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ErrorForDeleteProjectTimesheet';
        $request = $this->employeeProjectTimesheetDeleteProjectTimesheetPostRequest($body, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'employeeProjectTimesheetDeleteProjectTimesheetPost'
     *
     * @param  \OpenAPI\Client\Model\DeleteProjectTimesheetParameter $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['employeeProjectTimesheetDeleteProjectTimesheetPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function employeeProjectTimesheetDeleteProjectTimesheetPostRequest($body, string $contentType = self::contentTypes['employeeProjectTimesheetDeleteProjectTimesheetPost'][0])
    {

        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling employeeProjectTimesheetDeleteProjectTimesheetPost'
            );
        }


        $resourcePath = '/Employee Project Timesheet  -  DeleteProjectTimesheet';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($body)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation employeeProjectTimesheetEditProjectPost
     *
     * Edit Project
     *
     * @param  \OpenAPI\Client\Model\EditProjectParameter $body body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['employeeProjectTimesheetEditProjectPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ErrorForEditProject
     */
    public function employeeProjectTimesheetEditProjectPost($body, string $contentType = self::contentTypes['employeeProjectTimesheetEditProjectPost'][0])
    {
        list($response) = $this->employeeProjectTimesheetEditProjectPostWithHttpInfo($body, $contentType);
        return $response;
    }

    /**
     * Operation employeeProjectTimesheetEditProjectPostWithHttpInfo
     *
     * Edit Project
     *
     * @param  \OpenAPI\Client\Model\EditProjectParameter $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['employeeProjectTimesheetEditProjectPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ErrorForEditProject, HTTP status code, HTTP response headers (array of strings)
     */
    public function employeeProjectTimesheetEditProjectPostWithHttpInfo($body, string $contentType = self::contentTypes['employeeProjectTimesheetEditProjectPost'][0])
    {
        $request = $this->employeeProjectTimesheetEditProjectPostRequest($body, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ErrorForEditProject' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorForEditProject' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorForEditProject', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\OpenAPI\Client\Model\ErrorForEditProject';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorForEditProject',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation employeeProjectTimesheetEditProjectPostAsync
     *
     * Edit Project
     *
     * @param  \OpenAPI\Client\Model\EditProjectParameter $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['employeeProjectTimesheetEditProjectPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function employeeProjectTimesheetEditProjectPostAsync($body, string $contentType = self::contentTypes['employeeProjectTimesheetEditProjectPost'][0])
    {
        return $this->employeeProjectTimesheetEditProjectPostAsyncWithHttpInfo($body, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation employeeProjectTimesheetEditProjectPostAsyncWithHttpInfo
     *
     * Edit Project
     *
     * @param  \OpenAPI\Client\Model\EditProjectParameter $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['employeeProjectTimesheetEditProjectPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function employeeProjectTimesheetEditProjectPostAsyncWithHttpInfo($body, string $contentType = self::contentTypes['employeeProjectTimesheetEditProjectPost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ErrorForEditProject';
        $request = $this->employeeProjectTimesheetEditProjectPostRequest($body, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'employeeProjectTimesheetEditProjectPost'
     *
     * @param  \OpenAPI\Client\Model\EditProjectParameter $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['employeeProjectTimesheetEditProjectPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function employeeProjectTimesheetEditProjectPostRequest($body, string $contentType = self::contentTypes['employeeProjectTimesheetEditProjectPost'][0])
    {

        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling employeeProjectTimesheetEditProjectPost'
            );
        }


        $resourcePath = '/Employee Project Timesheet  -  EditProject';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($body)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation employeeProjectTimesheetEditProjectTaskDetailPost
     *
     * Edit Project Task Detail
     *
     * @param  \OpenAPI\Client\Model\EditProjectTaskDetailParameter $body body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['employeeProjectTimesheetEditProjectTaskDetailPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ErrorForEditProjectTaskDetail
     */
    public function employeeProjectTimesheetEditProjectTaskDetailPost($body, string $contentType = self::contentTypes['employeeProjectTimesheetEditProjectTaskDetailPost'][0])
    {
        list($response) = $this->employeeProjectTimesheetEditProjectTaskDetailPostWithHttpInfo($body, $contentType);
        return $response;
    }

    /**
     * Operation employeeProjectTimesheetEditProjectTaskDetailPostWithHttpInfo
     *
     * Edit Project Task Detail
     *
     * @param  \OpenAPI\Client\Model\EditProjectTaskDetailParameter $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['employeeProjectTimesheetEditProjectTaskDetailPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ErrorForEditProjectTaskDetail, HTTP status code, HTTP response headers (array of strings)
     */
    public function employeeProjectTimesheetEditProjectTaskDetailPostWithHttpInfo($body, string $contentType = self::contentTypes['employeeProjectTimesheetEditProjectTaskDetailPost'][0])
    {
        $request = $this->employeeProjectTimesheetEditProjectTaskDetailPostRequest($body, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ErrorForEditProjectTaskDetail' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorForEditProjectTaskDetail' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorForEditProjectTaskDetail', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\OpenAPI\Client\Model\ErrorForEditProjectTaskDetail';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorForEditProjectTaskDetail',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation employeeProjectTimesheetEditProjectTaskDetailPostAsync
     *
     * Edit Project Task Detail
     *
     * @param  \OpenAPI\Client\Model\EditProjectTaskDetailParameter $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['employeeProjectTimesheetEditProjectTaskDetailPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function employeeProjectTimesheetEditProjectTaskDetailPostAsync($body, string $contentType = self::contentTypes['employeeProjectTimesheetEditProjectTaskDetailPost'][0])
    {
        return $this->employeeProjectTimesheetEditProjectTaskDetailPostAsyncWithHttpInfo($body, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation employeeProjectTimesheetEditProjectTaskDetailPostAsyncWithHttpInfo
     *
     * Edit Project Task Detail
     *
     * @param  \OpenAPI\Client\Model\EditProjectTaskDetailParameter $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['employeeProjectTimesheetEditProjectTaskDetailPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function employeeProjectTimesheetEditProjectTaskDetailPostAsyncWithHttpInfo($body, string $contentType = self::contentTypes['employeeProjectTimesheetEditProjectTaskDetailPost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ErrorForEditProjectTaskDetail';
        $request = $this->employeeProjectTimesheetEditProjectTaskDetailPostRequest($body, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'employeeProjectTimesheetEditProjectTaskDetailPost'
     *
     * @param  \OpenAPI\Client\Model\EditProjectTaskDetailParameter $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['employeeProjectTimesheetEditProjectTaskDetailPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function employeeProjectTimesheetEditProjectTaskDetailPostRequest($body, string $contentType = self::contentTypes['employeeProjectTimesheetEditProjectTaskDetailPost'][0])
    {

        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling employeeProjectTimesheetEditProjectTaskDetailPost'
            );
        }


        $resourcePath = '/Employee Project Timesheet  -  EditProjectTaskDetail';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($body)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation employeeProjectTimesheetEditProjectTaskPost
     *
     * Edit Project Task
     *
     * @param  \OpenAPI\Client\Model\EditProjectTaskParameter $body body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['employeeProjectTimesheetEditProjectTaskPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ErrorForEditProjectTask
     */
    public function employeeProjectTimesheetEditProjectTaskPost($body, string $contentType = self::contentTypes['employeeProjectTimesheetEditProjectTaskPost'][0])
    {
        list($response) = $this->employeeProjectTimesheetEditProjectTaskPostWithHttpInfo($body, $contentType);
        return $response;
    }

    /**
     * Operation employeeProjectTimesheetEditProjectTaskPostWithHttpInfo
     *
     * Edit Project Task
     *
     * @param  \OpenAPI\Client\Model\EditProjectTaskParameter $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['employeeProjectTimesheetEditProjectTaskPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ErrorForEditProjectTask, HTTP status code, HTTP response headers (array of strings)
     */
    public function employeeProjectTimesheetEditProjectTaskPostWithHttpInfo($body, string $contentType = self::contentTypes['employeeProjectTimesheetEditProjectTaskPost'][0])
    {
        $request = $this->employeeProjectTimesheetEditProjectTaskPostRequest($body, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ErrorForEditProjectTask' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorForEditProjectTask' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorForEditProjectTask', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\OpenAPI\Client\Model\ErrorForEditProjectTask';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorForEditProjectTask',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation employeeProjectTimesheetEditProjectTaskPostAsync
     *
     * Edit Project Task
     *
     * @param  \OpenAPI\Client\Model\EditProjectTaskParameter $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['employeeProjectTimesheetEditProjectTaskPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function employeeProjectTimesheetEditProjectTaskPostAsync($body, string $contentType = self::contentTypes['employeeProjectTimesheetEditProjectTaskPost'][0])
    {
        return $this->employeeProjectTimesheetEditProjectTaskPostAsyncWithHttpInfo($body, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation employeeProjectTimesheetEditProjectTaskPostAsyncWithHttpInfo
     *
     * Edit Project Task
     *
     * @param  \OpenAPI\Client\Model\EditProjectTaskParameter $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['employeeProjectTimesheetEditProjectTaskPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function employeeProjectTimesheetEditProjectTaskPostAsyncWithHttpInfo($body, string $contentType = self::contentTypes['employeeProjectTimesheetEditProjectTaskPost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ErrorForEditProjectTask';
        $request = $this->employeeProjectTimesheetEditProjectTaskPostRequest($body, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'employeeProjectTimesheetEditProjectTaskPost'
     *
     * @param  \OpenAPI\Client\Model\EditProjectTaskParameter $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['employeeProjectTimesheetEditProjectTaskPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function employeeProjectTimesheetEditProjectTaskPostRequest($body, string $contentType = self::contentTypes['employeeProjectTimesheetEditProjectTaskPost'][0])
    {

        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling employeeProjectTimesheetEditProjectTaskPost'
            );
        }


        $resourcePath = '/Employee Project Timesheet  -  EditProjectTask';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($body)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation employeeProjectTimesheetGetAllProjectTaskDetailPost
     *
     * Get All Project Task Detail
     *
     * @param  \OpenAPI\Client\Model\GetAllProjectTaskDetailParameter $body body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['employeeProjectTimesheetGetAllProjectTaskDetailPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ErrorForGetAllProjectTaskDetail
     */
    public function employeeProjectTimesheetGetAllProjectTaskDetailPost($body, string $contentType = self::contentTypes['employeeProjectTimesheetGetAllProjectTaskDetailPost'][0])
    {
        list($response) = $this->employeeProjectTimesheetGetAllProjectTaskDetailPostWithHttpInfo($body, $contentType);
        return $response;
    }

    /**
     * Operation employeeProjectTimesheetGetAllProjectTaskDetailPostWithHttpInfo
     *
     * Get All Project Task Detail
     *
     * @param  \OpenAPI\Client\Model\GetAllProjectTaskDetailParameter $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['employeeProjectTimesheetGetAllProjectTaskDetailPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ErrorForGetAllProjectTaskDetail, HTTP status code, HTTP response headers (array of strings)
     */
    public function employeeProjectTimesheetGetAllProjectTaskDetailPostWithHttpInfo($body, string $contentType = self::contentTypes['employeeProjectTimesheetGetAllProjectTaskDetailPost'][0])
    {
        $request = $this->employeeProjectTimesheetGetAllProjectTaskDetailPostRequest($body, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ErrorForGetAllProjectTaskDetail' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorForGetAllProjectTaskDetail' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorForGetAllProjectTaskDetail', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\OpenAPI\Client\Model\ErrorForGetAllProjectTaskDetail';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorForGetAllProjectTaskDetail',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation employeeProjectTimesheetGetAllProjectTaskDetailPostAsync
     *
     * Get All Project Task Detail
     *
     * @param  \OpenAPI\Client\Model\GetAllProjectTaskDetailParameter $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['employeeProjectTimesheetGetAllProjectTaskDetailPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function employeeProjectTimesheetGetAllProjectTaskDetailPostAsync($body, string $contentType = self::contentTypes['employeeProjectTimesheetGetAllProjectTaskDetailPost'][0])
    {
        return $this->employeeProjectTimesheetGetAllProjectTaskDetailPostAsyncWithHttpInfo($body, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation employeeProjectTimesheetGetAllProjectTaskDetailPostAsyncWithHttpInfo
     *
     * Get All Project Task Detail
     *
     * @param  \OpenAPI\Client\Model\GetAllProjectTaskDetailParameter $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['employeeProjectTimesheetGetAllProjectTaskDetailPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function employeeProjectTimesheetGetAllProjectTaskDetailPostAsyncWithHttpInfo($body, string $contentType = self::contentTypes['employeeProjectTimesheetGetAllProjectTaskDetailPost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ErrorForGetAllProjectTaskDetail';
        $request = $this->employeeProjectTimesheetGetAllProjectTaskDetailPostRequest($body, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'employeeProjectTimesheetGetAllProjectTaskDetailPost'
     *
     * @param  \OpenAPI\Client\Model\GetAllProjectTaskDetailParameter $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['employeeProjectTimesheetGetAllProjectTaskDetailPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function employeeProjectTimesheetGetAllProjectTaskDetailPostRequest($body, string $contentType = self::contentTypes['employeeProjectTimesheetGetAllProjectTaskDetailPost'][0])
    {

        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling employeeProjectTimesheetGetAllProjectTaskDetailPost'
            );
        }


        $resourcePath = '/Employee Project Timesheet  -  GetAllProjectTaskDetail';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($body)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation employeeProjectTimesheetGetAllProjectTaskPost
     *
     * Get All Project Task
     *
     * @param  \OpenAPI\Client\Model\GetAllProjectTaskParameter $body body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['employeeProjectTimesheetGetAllProjectTaskPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ErrorForGetAllProjectTask
     */
    public function employeeProjectTimesheetGetAllProjectTaskPost($body, string $contentType = self::contentTypes['employeeProjectTimesheetGetAllProjectTaskPost'][0])
    {
        list($response) = $this->employeeProjectTimesheetGetAllProjectTaskPostWithHttpInfo($body, $contentType);
        return $response;
    }

    /**
     * Operation employeeProjectTimesheetGetAllProjectTaskPostWithHttpInfo
     *
     * Get All Project Task
     *
     * @param  \OpenAPI\Client\Model\GetAllProjectTaskParameter $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['employeeProjectTimesheetGetAllProjectTaskPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ErrorForGetAllProjectTask, HTTP status code, HTTP response headers (array of strings)
     */
    public function employeeProjectTimesheetGetAllProjectTaskPostWithHttpInfo($body, string $contentType = self::contentTypes['employeeProjectTimesheetGetAllProjectTaskPost'][0])
    {
        $request = $this->employeeProjectTimesheetGetAllProjectTaskPostRequest($body, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ErrorForGetAllProjectTask' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorForGetAllProjectTask' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorForGetAllProjectTask', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\OpenAPI\Client\Model\ErrorForGetAllProjectTask';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorForGetAllProjectTask',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation employeeProjectTimesheetGetAllProjectTaskPostAsync
     *
     * Get All Project Task
     *
     * @param  \OpenAPI\Client\Model\GetAllProjectTaskParameter $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['employeeProjectTimesheetGetAllProjectTaskPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function employeeProjectTimesheetGetAllProjectTaskPostAsync($body, string $contentType = self::contentTypes['employeeProjectTimesheetGetAllProjectTaskPost'][0])
    {
        return $this->employeeProjectTimesheetGetAllProjectTaskPostAsyncWithHttpInfo($body, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation employeeProjectTimesheetGetAllProjectTaskPostAsyncWithHttpInfo
     *
     * Get All Project Task
     *
     * @param  \OpenAPI\Client\Model\GetAllProjectTaskParameter $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['employeeProjectTimesheetGetAllProjectTaskPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function employeeProjectTimesheetGetAllProjectTaskPostAsyncWithHttpInfo($body, string $contentType = self::contentTypes['employeeProjectTimesheetGetAllProjectTaskPost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ErrorForGetAllProjectTask';
        $request = $this->employeeProjectTimesheetGetAllProjectTaskPostRequest($body, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'employeeProjectTimesheetGetAllProjectTaskPost'
     *
     * @param  \OpenAPI\Client\Model\GetAllProjectTaskParameter $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['employeeProjectTimesheetGetAllProjectTaskPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function employeeProjectTimesheetGetAllProjectTaskPostRequest($body, string $contentType = self::contentTypes['employeeProjectTimesheetGetAllProjectTaskPost'][0])
    {

        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling employeeProjectTimesheetGetAllProjectTaskPost'
            );
        }


        $resourcePath = '/Employee Project Timesheet  -  GetAllProjectTask';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($body)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation employeeProjectTimesheetGetAllTimesheetProjectPost
     *
     * Get All Timesheet Project
     *
     * @param  \OpenAPI\Client\Model\GetAllTimesheetProjectParameter $body body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['employeeProjectTimesheetGetAllTimesheetProjectPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ErrorForGetAllTimesheetProject
     */
    public function employeeProjectTimesheetGetAllTimesheetProjectPost($body, string $contentType = self::contentTypes['employeeProjectTimesheetGetAllTimesheetProjectPost'][0])
    {
        list($response) = $this->employeeProjectTimesheetGetAllTimesheetProjectPostWithHttpInfo($body, $contentType);
        return $response;
    }

    /**
     * Operation employeeProjectTimesheetGetAllTimesheetProjectPostWithHttpInfo
     *
     * Get All Timesheet Project
     *
     * @param  \OpenAPI\Client\Model\GetAllTimesheetProjectParameter $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['employeeProjectTimesheetGetAllTimesheetProjectPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ErrorForGetAllTimesheetProject, HTTP status code, HTTP response headers (array of strings)
     */
    public function employeeProjectTimesheetGetAllTimesheetProjectPostWithHttpInfo($body, string $contentType = self::contentTypes['employeeProjectTimesheetGetAllTimesheetProjectPost'][0])
    {
        $request = $this->employeeProjectTimesheetGetAllTimesheetProjectPostRequest($body, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ErrorForGetAllTimesheetProject' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorForGetAllTimesheetProject' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorForGetAllTimesheetProject', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\OpenAPI\Client\Model\ErrorForGetAllTimesheetProject';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorForGetAllTimesheetProject',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation employeeProjectTimesheetGetAllTimesheetProjectPostAsync
     *
     * Get All Timesheet Project
     *
     * @param  \OpenAPI\Client\Model\GetAllTimesheetProjectParameter $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['employeeProjectTimesheetGetAllTimesheetProjectPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function employeeProjectTimesheetGetAllTimesheetProjectPostAsync($body, string $contentType = self::contentTypes['employeeProjectTimesheetGetAllTimesheetProjectPost'][0])
    {
        return $this->employeeProjectTimesheetGetAllTimesheetProjectPostAsyncWithHttpInfo($body, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation employeeProjectTimesheetGetAllTimesheetProjectPostAsyncWithHttpInfo
     *
     * Get All Timesheet Project
     *
     * @param  \OpenAPI\Client\Model\GetAllTimesheetProjectParameter $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['employeeProjectTimesheetGetAllTimesheetProjectPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function employeeProjectTimesheetGetAllTimesheetProjectPostAsyncWithHttpInfo($body, string $contentType = self::contentTypes['employeeProjectTimesheetGetAllTimesheetProjectPost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ErrorForGetAllTimesheetProject';
        $request = $this->employeeProjectTimesheetGetAllTimesheetProjectPostRequest($body, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'employeeProjectTimesheetGetAllTimesheetProjectPost'
     *
     * @param  \OpenAPI\Client\Model\GetAllTimesheetProjectParameter $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['employeeProjectTimesheetGetAllTimesheetProjectPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function employeeProjectTimesheetGetAllTimesheetProjectPostRequest($body, string $contentType = self::contentTypes['employeeProjectTimesheetGetAllTimesheetProjectPost'][0])
    {

        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling employeeProjectTimesheetGetAllTimesheetProjectPost'
            );
        }


        $resourcePath = '/Employee Project Timesheet  -  GetAllTimesheetProject';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($body)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation employeeProjectTimesheetGetProjectTimesheetByTransactionIdPost
     *
     * Get Project Timesheet By TransactionId
     *
     * @param  \OpenAPI\Client\Model\GetProjectTimesheetByTransactionId $body body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['employeeProjectTimesheetGetProjectTimesheetByTransactionIdPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ErrorForGetProjectTimesheetByTransactionId
     */
    public function employeeProjectTimesheetGetProjectTimesheetByTransactionIdPost($body, string $contentType = self::contentTypes['employeeProjectTimesheetGetProjectTimesheetByTransactionIdPost'][0])
    {
        list($response) = $this->employeeProjectTimesheetGetProjectTimesheetByTransactionIdPostWithHttpInfo($body, $contentType);
        return $response;
    }

    /**
     * Operation employeeProjectTimesheetGetProjectTimesheetByTransactionIdPostWithHttpInfo
     *
     * Get Project Timesheet By TransactionId
     *
     * @param  \OpenAPI\Client\Model\GetProjectTimesheetByTransactionId $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['employeeProjectTimesheetGetProjectTimesheetByTransactionIdPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ErrorForGetProjectTimesheetByTransactionId, HTTP status code, HTTP response headers (array of strings)
     */
    public function employeeProjectTimesheetGetProjectTimesheetByTransactionIdPostWithHttpInfo($body, string $contentType = self::contentTypes['employeeProjectTimesheetGetProjectTimesheetByTransactionIdPost'][0])
    {
        $request = $this->employeeProjectTimesheetGetProjectTimesheetByTransactionIdPostRequest($body, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ErrorForGetProjectTimesheetByTransactionId' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorForGetProjectTimesheetByTransactionId' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorForGetProjectTimesheetByTransactionId', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\OpenAPI\Client\Model\ErrorForGetProjectTimesheetByTransactionId';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorForGetProjectTimesheetByTransactionId',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation employeeProjectTimesheetGetProjectTimesheetByTransactionIdPostAsync
     *
     * Get Project Timesheet By TransactionId
     *
     * @param  \OpenAPI\Client\Model\GetProjectTimesheetByTransactionId $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['employeeProjectTimesheetGetProjectTimesheetByTransactionIdPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function employeeProjectTimesheetGetProjectTimesheetByTransactionIdPostAsync($body, string $contentType = self::contentTypes['employeeProjectTimesheetGetProjectTimesheetByTransactionIdPost'][0])
    {
        return $this->employeeProjectTimesheetGetProjectTimesheetByTransactionIdPostAsyncWithHttpInfo($body, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation employeeProjectTimesheetGetProjectTimesheetByTransactionIdPostAsyncWithHttpInfo
     *
     * Get Project Timesheet By TransactionId
     *
     * @param  \OpenAPI\Client\Model\GetProjectTimesheetByTransactionId $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['employeeProjectTimesheetGetProjectTimesheetByTransactionIdPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function employeeProjectTimesheetGetProjectTimesheetByTransactionIdPostAsyncWithHttpInfo($body, string $contentType = self::contentTypes['employeeProjectTimesheetGetProjectTimesheetByTransactionIdPost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ErrorForGetProjectTimesheetByTransactionId';
        $request = $this->employeeProjectTimesheetGetProjectTimesheetByTransactionIdPostRequest($body, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'employeeProjectTimesheetGetProjectTimesheetByTransactionIdPost'
     *
     * @param  \OpenAPI\Client\Model\GetProjectTimesheetByTransactionId $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['employeeProjectTimesheetGetProjectTimesheetByTransactionIdPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function employeeProjectTimesheetGetProjectTimesheetByTransactionIdPostRequest($body, string $contentType = self::contentTypes['employeeProjectTimesheetGetProjectTimesheetByTransactionIdPost'][0])
    {

        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling employeeProjectTimesheetGetProjectTimesheetByTransactionIdPost'
            );
        }


        $resourcePath = '/Employee Project Timesheet  -  GetProjectTimesheetByTransactionId';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($body)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation employeeProjectTimesheetGetProjectTimesheetDetailPost
     *
     * Get Project Time sheet Detail
     *
     * @param  \OpenAPI\Client\Model\GetProjectTimesheetDetail $body body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['employeeProjectTimesheetGetProjectTimesheetDetailPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ErrorForGetProjectTimesheetDetail
     */
    public function employeeProjectTimesheetGetProjectTimesheetDetailPost($body, string $contentType = self::contentTypes['employeeProjectTimesheetGetProjectTimesheetDetailPost'][0])
    {
        list($response) = $this->employeeProjectTimesheetGetProjectTimesheetDetailPostWithHttpInfo($body, $contentType);
        return $response;
    }

    /**
     * Operation employeeProjectTimesheetGetProjectTimesheetDetailPostWithHttpInfo
     *
     * Get Project Time sheet Detail
     *
     * @param  \OpenAPI\Client\Model\GetProjectTimesheetDetail $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['employeeProjectTimesheetGetProjectTimesheetDetailPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ErrorForGetProjectTimesheetDetail, HTTP status code, HTTP response headers (array of strings)
     */
    public function employeeProjectTimesheetGetProjectTimesheetDetailPostWithHttpInfo($body, string $contentType = self::contentTypes['employeeProjectTimesheetGetProjectTimesheetDetailPost'][0])
    {
        $request = $this->employeeProjectTimesheetGetProjectTimesheetDetailPostRequest($body, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ErrorForGetProjectTimesheetDetail' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorForGetProjectTimesheetDetail' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorForGetProjectTimesheetDetail', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\OpenAPI\Client\Model\ErrorForGetProjectTimesheetDetail';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorForGetProjectTimesheetDetail',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation employeeProjectTimesheetGetProjectTimesheetDetailPostAsync
     *
     * Get Project Time sheet Detail
     *
     * @param  \OpenAPI\Client\Model\GetProjectTimesheetDetail $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['employeeProjectTimesheetGetProjectTimesheetDetailPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function employeeProjectTimesheetGetProjectTimesheetDetailPostAsync($body, string $contentType = self::contentTypes['employeeProjectTimesheetGetProjectTimesheetDetailPost'][0])
    {
        return $this->employeeProjectTimesheetGetProjectTimesheetDetailPostAsyncWithHttpInfo($body, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation employeeProjectTimesheetGetProjectTimesheetDetailPostAsyncWithHttpInfo
     *
     * Get Project Time sheet Detail
     *
     * @param  \OpenAPI\Client\Model\GetProjectTimesheetDetail $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['employeeProjectTimesheetGetProjectTimesheetDetailPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function employeeProjectTimesheetGetProjectTimesheetDetailPostAsyncWithHttpInfo($body, string $contentType = self::contentTypes['employeeProjectTimesheetGetProjectTimesheetDetailPost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ErrorForGetProjectTimesheetDetail';
        $request = $this->employeeProjectTimesheetGetProjectTimesheetDetailPostRequest($body, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'employeeProjectTimesheetGetProjectTimesheetDetailPost'
     *
     * @param  \OpenAPI\Client\Model\GetProjectTimesheetDetail $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['employeeProjectTimesheetGetProjectTimesheetDetailPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function employeeProjectTimesheetGetProjectTimesheetDetailPostRequest($body, string $contentType = self::contentTypes['employeeProjectTimesheetGetProjectTimesheetDetailPost'][0])
    {

        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling employeeProjectTimesheetGetProjectTimesheetDetailPost'
            );
        }


        $resourcePath = '/Employee Project Timesheet  -  GetProjectTimesheetDetail';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($body)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation employeeProjectTimesheetUpdateProjectTimesheetPost
     *
     * Update project timesheet
     *
     * @param  \OpenAPI\Client\Model\UpdateProjectTimesheetParameter $body body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['employeeProjectTimesheetUpdateProjectTimesheetPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ErrorForUpdateProjectTimesheet
     */
    public function employeeProjectTimesheetUpdateProjectTimesheetPost($body, string $contentType = self::contentTypes['employeeProjectTimesheetUpdateProjectTimesheetPost'][0])
    {
        list($response) = $this->employeeProjectTimesheetUpdateProjectTimesheetPostWithHttpInfo($body, $contentType);
        return $response;
    }

    /**
     * Operation employeeProjectTimesheetUpdateProjectTimesheetPostWithHttpInfo
     *
     * Update project timesheet
     *
     * @param  \OpenAPI\Client\Model\UpdateProjectTimesheetParameter $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['employeeProjectTimesheetUpdateProjectTimesheetPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ErrorForUpdateProjectTimesheet, HTTP status code, HTTP response headers (array of strings)
     */
    public function employeeProjectTimesheetUpdateProjectTimesheetPostWithHttpInfo($body, string $contentType = self::contentTypes['employeeProjectTimesheetUpdateProjectTimesheetPost'][0])
    {
        $request = $this->employeeProjectTimesheetUpdateProjectTimesheetPostRequest($body, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ErrorForUpdateProjectTimesheet' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorForUpdateProjectTimesheet' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorForUpdateProjectTimesheet', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\OpenAPI\Client\Model\ErrorForUpdateProjectTimesheet';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorForUpdateProjectTimesheet',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation employeeProjectTimesheetUpdateProjectTimesheetPostAsync
     *
     * Update project timesheet
     *
     * @param  \OpenAPI\Client\Model\UpdateProjectTimesheetParameter $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['employeeProjectTimesheetUpdateProjectTimesheetPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function employeeProjectTimesheetUpdateProjectTimesheetPostAsync($body, string $contentType = self::contentTypes['employeeProjectTimesheetUpdateProjectTimesheetPost'][0])
    {
        return $this->employeeProjectTimesheetUpdateProjectTimesheetPostAsyncWithHttpInfo($body, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation employeeProjectTimesheetUpdateProjectTimesheetPostAsyncWithHttpInfo
     *
     * Update project timesheet
     *
     * @param  \OpenAPI\Client\Model\UpdateProjectTimesheetParameter $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['employeeProjectTimesheetUpdateProjectTimesheetPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function employeeProjectTimesheetUpdateProjectTimesheetPostAsyncWithHttpInfo($body, string $contentType = self::contentTypes['employeeProjectTimesheetUpdateProjectTimesheetPost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ErrorForUpdateProjectTimesheet';
        $request = $this->employeeProjectTimesheetUpdateProjectTimesheetPostRequest($body, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'employeeProjectTimesheetUpdateProjectTimesheetPost'
     *
     * @param  \OpenAPI\Client\Model\UpdateProjectTimesheetParameter $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['employeeProjectTimesheetUpdateProjectTimesheetPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function employeeProjectTimesheetUpdateProjectTimesheetPostRequest($body, string $contentType = self::contentTypes['employeeProjectTimesheetUpdateProjectTimesheetPost'][0])
    {

        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling employeeProjectTimesheetUpdateProjectTimesheetPost'
            );
        }


        $resourcePath = '/Employee Project Timesheet  -  UpdateProjectTimesheet';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($body)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}

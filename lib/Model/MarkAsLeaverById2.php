<?php
/**
 * MarkAsLeaverById2
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  PeopleHR
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * PeopleHR API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.1
 * Contact: customerservices@peoplehr.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.10.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace PeopleHR\Model;

use \ArrayAccess;
use \PeopleHR\ObjectSerializer;

/**
 * MarkAsLeaverById2 Class Doc Comment
 *
 * @category Class
 * @package  PeopleHR
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class MarkAsLeaverById2 implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'MarkAsLeaverById2';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'api_key' => 'string',
        'action' => 'string',
        'employee_id' => 'string',
        'reasonfor_leaving' => 'string',
        'additional_comments' => 'string',
        'final_employment_date' => '\DateTime',
        'final_working_date' => 'string',
        'markas_leaver_immediately' => 'bool',
        'reports_to' => 'string',
        're_employable' => 'string',
        'supporting_comments' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'api_key' => null,
        'action' => null,
        'employee_id' => null,
        'reasonfor_leaving' => null,
        'additional_comments' => null,
        'final_employment_date' => 'date',
        'final_working_date' => null,
        'markas_leaver_immediately' => null,
        'reports_to' => 'email',
        're_employable' => null,
        'supporting_comments' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'api_key' => false,
        'action' => false,
        'employee_id' => false,
        'reasonfor_leaving' => false,
        'additional_comments' => false,
        'final_employment_date' => false,
        'final_working_date' => false,
        'markas_leaver_immediately' => false,
        'reports_to' => false,
        're_employable' => false,
        'supporting_comments' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'api_key' => 'APIKey',
        'action' => 'Action',
        'employee_id' => 'EmployeeId',
        'reasonfor_leaving' => 'ReasonforLeaving',
        'additional_comments' => 'AdditionalComments',
        'final_employment_date' => 'FinalEmploymentDate',
        'final_working_date' => 'FinalWorkingDate',
        'markas_leaver_immediately' => 'MarkasLeaverImmediately',
        'reports_to' => 'ReportsTo',
        're_employable' => 'ReEmployable',
        'supporting_comments' => 'SupportingComments'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'api_key' => 'setApiKey',
        'action' => 'setAction',
        'employee_id' => 'setEmployeeId',
        'reasonfor_leaving' => 'setReasonforLeaving',
        'additional_comments' => 'setAdditionalComments',
        'final_employment_date' => 'setFinalEmploymentDate',
        'final_working_date' => 'setFinalWorkingDate',
        'markas_leaver_immediately' => 'setMarkasLeaverImmediately',
        'reports_to' => 'setReportsTo',
        're_employable' => 'setReEmployable',
        'supporting_comments' => 'setSupportingComments'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'api_key' => 'getApiKey',
        'action' => 'getAction',
        'employee_id' => 'getEmployeeId',
        'reasonfor_leaving' => 'getReasonforLeaving',
        'additional_comments' => 'getAdditionalComments',
        'final_employment_date' => 'getFinalEmploymentDate',
        'final_working_date' => 'getFinalWorkingDate',
        'markas_leaver_immediately' => 'getMarkasLeaverImmediately',
        'reports_to' => 'getReportsTo',
        're_employable' => 'getReEmployable',
        'supporting_comments' => 'getSupportingComments'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('api_key', $data ?? [], null);
        $this->setIfExists('action', $data ?? [], null);
        $this->setIfExists('employee_id', $data ?? [], null);
        $this->setIfExists('reasonfor_leaving', $data ?? [], null);
        $this->setIfExists('additional_comments', $data ?? [], null);
        $this->setIfExists('final_employment_date', $data ?? [], null);
        $this->setIfExists('final_working_date', $data ?? [], null);
        $this->setIfExists('markas_leaver_immediately', $data ?? [], null);
        $this->setIfExists('reports_to', $data ?? [], null);
        $this->setIfExists('re_employable', $data ?? [], null);
        $this->setIfExists('supporting_comments', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['api_key'] === null) {
            $invalidProperties[] = "'api_key' can't be null";
        }
        if ((mb_strlen($this->container['api_key']) > 50)) {
            $invalidProperties[] = "invalid value for 'api_key', the character length must be smaller than or equal to 50.";
        }

        if ($this->container['action'] === null) {
            $invalidProperties[] = "'action' can't be null";
        }
        if ($this->container['employee_id'] === null) {
            $invalidProperties[] = "'employee_id' can't be null";
        }
        if ((mb_strlen($this->container['employee_id']) > 15)) {
            $invalidProperties[] = "invalid value for 'employee_id', the character length must be smaller than or equal to 15.";
        }

        if ($this->container['reasonfor_leaving'] === null) {
            $invalidProperties[] = "'reasonfor_leaving' can't be null";
        }
        if (!is_null($this->container['additional_comments']) && (mb_strlen($this->container['additional_comments']) > 256)) {
            $invalidProperties[] = "invalid value for 'additional_comments', the character length must be smaller than or equal to 256.";
        }

        if ($this->container['final_employment_date'] === null) {
            $invalidProperties[] = "'final_employment_date' can't be null";
        }
        if (!is_null($this->container['reports_to']) && (mb_strlen($this->container['reports_to']) > 256)) {
            $invalidProperties[] = "invalid value for 'reports_to', the character length must be smaller than or equal to 256.";
        }

        if (!is_null($this->container['supporting_comments']) && (mb_strlen($this->container['supporting_comments']) > 256)) {
            $invalidProperties[] = "invalid value for 'supporting_comments', the character length must be smaller than or equal to 256.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets api_key
     *
     * @return string
     */
    public function getApiKey()
    {
        return $this->container['api_key'];
    }

    /**
     * Sets api_key
     *
     * @param string $api_key APIKey for employee api to markAsLeaverById
     *
     * @return self
     */
    public function setApiKey($api_key)
    {
        if (is_null($api_key)) {
            throw new \InvalidArgumentException('non-nullable api_key cannot be null');
        }
        if ((mb_strlen($api_key) > 50)) {
            throw new \InvalidArgumentException('invalid length for $api_key when calling MarkAsLeaverById2., must be smaller than or equal to 50.');
        }

        $this->container['api_key'] = $api_key;

        return $this;
    }

    /**
     * Gets action
     *
     * @return string
     */
    public function getAction()
    {
        return $this->container['action'];
    }

    /**
     * Sets action
     *
     * @param string $action Action name = MarkAsLeaverById
     *
     * @return self
     */
    public function setAction($action)
    {
        if (is_null($action)) {
            throw new \InvalidArgumentException('non-nullable action cannot be null');
        }
        $this->container['action'] = $action;

        return $this;
    }

    /**
     * Gets employee_id
     *
     * @return string
     */
    public function getEmployeeId()
    {
        return $this->container['employee_id'];
    }

    /**
     * Sets employee_id
     *
     * @param string $employee_id Employee id for mark as leaver by id
     *
     * @return self
     */
    public function setEmployeeId($employee_id)
    {
        if (is_null($employee_id)) {
            throw new \InvalidArgumentException('non-nullable employee_id cannot be null');
        }
        if ((mb_strlen($employee_id) > 15)) {
            throw new \InvalidArgumentException('invalid length for $employee_id when calling MarkAsLeaverById2., must be smaller than or equal to 15.');
        }

        $this->container['employee_id'] = $employee_id;

        return $this;
    }

    /**
     * Gets reasonfor_leaving
     *
     * @return string
     */
    public function getReasonforLeaving()
    {
        return $this->container['reasonfor_leaving'];
    }

    /**
     * Sets reasonfor_leaving
     *
     * @param string $reasonfor_leaving Reason for leaving employee
     *
     * @return self
     */
    public function setReasonforLeaving($reasonfor_leaving)
    {
        if (is_null($reasonfor_leaving)) {
            throw new \InvalidArgumentException('non-nullable reasonfor_leaving cannot be null');
        }
        $this->container['reasonfor_leaving'] = $reasonfor_leaving;

        return $this;
    }

    /**
     * Gets additional_comments
     *
     * @return string|null
     */
    public function getAdditionalComments()
    {
        return $this->container['additional_comments'];
    }

    /**
     * Sets additional_comments
     *
     * @param string|null $additional_comments Additional comments for mark as leaver by id
     *
     * @return self
     */
    public function setAdditionalComments($additional_comments)
    {
        if (is_null($additional_comments)) {
            throw new \InvalidArgumentException('non-nullable additional_comments cannot be null');
        }
        if ((mb_strlen($additional_comments) > 256)) {
            throw new \InvalidArgumentException('invalid length for $additional_comments when calling MarkAsLeaverById2., must be smaller than or equal to 256.');
        }

        $this->container['additional_comments'] = $additional_comments;

        return $this;
    }

    /**
     * Gets final_employment_date
     *
     * @return \DateTime
     */
    public function getFinalEmploymentDate()
    {
        return $this->container['final_employment_date'];
    }

    /**
     * Sets final_employment_date
     *
     * @param \DateTime $final_employment_date Final employment date for mark as leaver by id
     *
     * @return self
     */
    public function setFinalEmploymentDate($final_employment_date)
    {
        if (is_null($final_employment_date)) {
            throw new \InvalidArgumentException('non-nullable final_employment_date cannot be null');
        }
        $this->container['final_employment_date'] = $final_employment_date;

        return $this;
    }

    /**
     * Gets final_working_date
     *
     * @return string|null
     */
    public function getFinalWorkingDate()
    {
        return $this->container['final_working_date'];
    }

    /**
     * Sets final_working_date
     *
     * @param string|null $final_working_date Final working date for mark as leaver by id
     *
     * @return self
     */
    public function setFinalWorkingDate($final_working_date)
    {
        if (is_null($final_working_date)) {
            throw new \InvalidArgumentException('non-nullable final_working_date cannot be null');
        }
        $this->container['final_working_date'] = $final_working_date;

        return $this;
    }

    /**
     * Gets markas_leaver_immediately
     *
     * @return bool|null
     */
    public function getMarkasLeaverImmediately()
    {
        return $this->container['markas_leaver_immediately'];
    }

    /**
     * Sets markas_leaver_immediately
     *
     * @param bool|null $markas_leaver_immediately Mark as leaver immediately for mark as leaver by id
     *
     * @return self
     */
    public function setMarkasLeaverImmediately($markas_leaver_immediately)
    {
        if (is_null($markas_leaver_immediately)) {
            throw new \InvalidArgumentException('non-nullable markas_leaver_immediately cannot be null');
        }
        $this->container['markas_leaver_immediately'] = $markas_leaver_immediately;

        return $this;
    }

    /**
     * Gets reports_to
     *
     * @return string|null
     */
    public function getReportsTo()
    {
        return $this->container['reports_to'];
    }

    /**
     * Sets reports_to
     *
     * @param string|null $reports_to Reports to for mark as leaver by id
     *
     * @return self
     */
    public function setReportsTo($reports_to)
    {
        if (is_null($reports_to)) {
            throw new \InvalidArgumentException('non-nullable reports_to cannot be null');
        }
        if ((mb_strlen($reports_to) > 256)) {
            throw new \InvalidArgumentException('invalid length for $reports_to when calling MarkAsLeaverById2., must be smaller than or equal to 256.');
        }

        $this->container['reports_to'] = $reports_to;

        return $this;
    }

    /**
     * Gets re_employable
     *
     * @return string|null
     */
    public function getReEmployable()
    {
        return $this->container['re_employable'];
    }

    /**
     * Sets re_employable
     *
     * @param string|null $re_employable Re employable for mark as leaver by id
     *
     * @return self
     */
    public function setReEmployable($re_employable)
    {
        if (is_null($re_employable)) {
            throw new \InvalidArgumentException('non-nullable re_employable cannot be null');
        }
        $this->container['re_employable'] = $re_employable;

        return $this;
    }

    /**
     * Gets supporting_comments
     *
     * @return string|null
     */
    public function getSupportingComments()
    {
        return $this->container['supporting_comments'];
    }

    /**
     * Sets supporting_comments
     *
     * @param string|null $supporting_comments Supporting comments for mark as leaver by id
     *
     * @return self
     */
    public function setSupportingComments($supporting_comments)
    {
        if (is_null($supporting_comments)) {
            throw new \InvalidArgumentException('non-nullable supporting_comments cannot be null');
        }
        if ((mb_strlen($supporting_comments) > 256)) {
            throw new \InvalidArgumentException('invalid length for $supporting_comments when calling MarkAsLeaverById2., must be smaller than or equal to 256.');
        }

        $this->container['supporting_comments'] = $supporting_comments;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}



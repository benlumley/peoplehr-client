<?php
/**
 * AddNewVehicleDetailDefinition
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  PeopleHR
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * PeopleHR API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.1
 * Contact: customerservices@peoplehr.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.10.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace PeopleHR\Model;

use \ArrayAccess;
use \PeopleHR\ObjectSerializer;

/**
 * AddNewVehicleDetailDefinition Class Doc Comment
 *
 * @category Class
 * @package  PeopleHR
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class AddNewVehicleDetailDefinition implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'AddNewVehicleDetailDefinition';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'api_key' => 'string',
        'action' => 'string',
        'employee_id' => 'string',
        'registration' => 'string',
        'make' => 'string',
        'model' => 'string',
        'colour' => 'string',
        'engine_size' => 'string',
        'fuel_type' => 'string',
        'insurance_company' => 'string',
        'policy_number' => 'string',
        'mot_expiry_date' => '\DateTime',
        'insurance_expiry_date' => '\DateTime',
        'comments' => 'string',
        'custom_columns' => '\PeopleHR\Model\CustomColumnsForEmployeeVehicleAddArrayInner[]',
        'add_files' => '\PeopleHR\Model\AddFilesForEmployeeVehicleAddArrayInner[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'api_key' => null,
        'action' => null,
        'employee_id' => null,
        'registration' => null,
        'make' => null,
        'model' => null,
        'colour' => null,
        'engine_size' => null,
        'fuel_type' => null,
        'insurance_company' => null,
        'policy_number' => null,
        'mot_expiry_date' => 'date',
        'insurance_expiry_date' => 'date',
        'comments' => null,
        'custom_columns' => null,
        'add_files' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'api_key' => false,
        'action' => false,
        'employee_id' => false,
        'registration' => false,
        'make' => false,
        'model' => false,
        'colour' => false,
        'engine_size' => false,
        'fuel_type' => false,
        'insurance_company' => false,
        'policy_number' => false,
        'mot_expiry_date' => false,
        'insurance_expiry_date' => false,
        'comments' => false,
        'custom_columns' => false,
        'add_files' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'api_key' => 'APIKey',
        'action' => 'Action',
        'employee_id' => 'EmployeeId',
        'registration' => 'Registration',
        'make' => 'Make',
        'model' => 'Model',
        'colour' => 'Colour',
        'engine_size' => 'EngineSize',
        'fuel_type' => 'FuelType',
        'insurance_company' => 'InsuranceCompany',
        'policy_number' => 'PolicyNumber',
        'mot_expiry_date' => 'MOTExpiryDate',
        'insurance_expiry_date' => 'InsuranceExpiryDate',
        'comments' => 'Comments',
        'custom_columns' => 'CustomColumns',
        'add_files' => 'AddFiles'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'api_key' => 'setApiKey',
        'action' => 'setAction',
        'employee_id' => 'setEmployeeId',
        'registration' => 'setRegistration',
        'make' => 'setMake',
        'model' => 'setModel',
        'colour' => 'setColour',
        'engine_size' => 'setEngineSize',
        'fuel_type' => 'setFuelType',
        'insurance_company' => 'setInsuranceCompany',
        'policy_number' => 'setPolicyNumber',
        'mot_expiry_date' => 'setMotExpiryDate',
        'insurance_expiry_date' => 'setInsuranceExpiryDate',
        'comments' => 'setComments',
        'custom_columns' => 'setCustomColumns',
        'add_files' => 'setAddFiles'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'api_key' => 'getApiKey',
        'action' => 'getAction',
        'employee_id' => 'getEmployeeId',
        'registration' => 'getRegistration',
        'make' => 'getMake',
        'model' => 'getModel',
        'colour' => 'getColour',
        'engine_size' => 'getEngineSize',
        'fuel_type' => 'getFuelType',
        'insurance_company' => 'getInsuranceCompany',
        'policy_number' => 'getPolicyNumber',
        'mot_expiry_date' => 'getMotExpiryDate',
        'insurance_expiry_date' => 'getInsuranceExpiryDate',
        'comments' => 'getComments',
        'custom_columns' => 'getCustomColumns',
        'add_files' => 'getAddFiles'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('api_key', $data ?? [], null);
        $this->setIfExists('action', $data ?? [], null);
        $this->setIfExists('employee_id', $data ?? [], null);
        $this->setIfExists('registration', $data ?? [], null);
        $this->setIfExists('make', $data ?? [], null);
        $this->setIfExists('model', $data ?? [], null);
        $this->setIfExists('colour', $data ?? [], null);
        $this->setIfExists('engine_size', $data ?? [], null);
        $this->setIfExists('fuel_type', $data ?? [], null);
        $this->setIfExists('insurance_company', $data ?? [], null);
        $this->setIfExists('policy_number', $data ?? [], null);
        $this->setIfExists('mot_expiry_date', $data ?? [], null);
        $this->setIfExists('insurance_expiry_date', $data ?? [], null);
        $this->setIfExists('comments', $data ?? [], null);
        $this->setIfExists('custom_columns', $data ?? [], null);
        $this->setIfExists('add_files', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['api_key'] === null) {
            $invalidProperties[] = "'api_key' can't be null";
        }
        if ((mb_strlen($this->container['api_key']) > 50)) {
            $invalidProperties[] = "invalid value for 'api_key', the character length must be smaller than or equal to 50.";
        }

        if ($this->container['action'] === null) {
            $invalidProperties[] = "'action' can't be null";
        }
        if ($this->container['employee_id'] === null) {
            $invalidProperties[] = "'employee_id' can't be null";
        }
        if ((mb_strlen($this->container['employee_id']) > 15)) {
            $invalidProperties[] = "invalid value for 'employee_id', the character length must be smaller than or equal to 15.";
        }

        if ($this->container['registration'] === null) {
            $invalidProperties[] = "'registration' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets api_key
     *
     * @return string
     */
    public function getApiKey()
    {
        return $this->container['api_key'];
    }

    /**
     * Sets api_key
     *
     * @param string $api_key APIKey to add employee's new vehicle detail
     *
     * @return self
     */
    public function setApiKey($api_key)
    {
        if (is_null($api_key)) {
            throw new \InvalidArgumentException('non-nullable api_key cannot be null');
        }
        if ((mb_strlen($api_key) > 50)) {
            throw new \InvalidArgumentException('invalid length for $api_key when calling AddNewVehicleDetailDefinition., must be smaller than or equal to 50.');
        }

        $this->container['api_key'] = $api_key;

        return $this;
    }

    /**
     * Gets action
     *
     * @return string
     */
    public function getAction()
    {
        return $this->container['action'];
    }

    /**
     * Sets action
     *
     * @param string $action Action name = AddNewVehicleDetail
     *
     * @return self
     */
    public function setAction($action)
    {
        if (is_null($action)) {
            throw new \InvalidArgumentException('non-nullable action cannot be null');
        }
        $this->container['action'] = $action;

        return $this;
    }

    /**
     * Gets employee_id
     *
     * @return string
     */
    public function getEmployeeId()
    {
        return $this->container['employee_id'];
    }

    /**
     * Sets employee_id
     *
     * @param string $employee_id Employee id to add employee's new vehicle detail
     *
     * @return self
     */
    public function setEmployeeId($employee_id)
    {
        if (is_null($employee_id)) {
            throw new \InvalidArgumentException('non-nullable employee_id cannot be null');
        }
        if ((mb_strlen($employee_id) > 15)) {
            throw new \InvalidArgumentException('invalid length for $employee_id when calling AddNewVehicleDetailDefinition., must be smaller than or equal to 15.');
        }

        $this->container['employee_id'] = $employee_id;

        return $this;
    }

    /**
     * Gets registration
     *
     * @return string
     */
    public function getRegistration()
    {
        return $this->container['registration'];
    }

    /**
     * Sets registration
     *
     * @param string $registration Registration to add employee's new vehicle detail
     *
     * @return self
     */
    public function setRegistration($registration)
    {
        if (is_null($registration)) {
            throw new \InvalidArgumentException('non-nullable registration cannot be null');
        }
        $this->container['registration'] = $registration;

        return $this;
    }

    /**
     * Gets make
     *
     * @return string|null
     */
    public function getMake()
    {
        return $this->container['make'];
    }

    /**
     * Sets make
     *
     * @param string|null $make Make to add employee's new vehicle detail
     *
     * @return self
     */
    public function setMake($make)
    {
        if (is_null($make)) {
            throw new \InvalidArgumentException('non-nullable make cannot be null');
        }
        $this->container['make'] = $make;

        return $this;
    }

    /**
     * Gets model
     *
     * @return string|null
     */
    public function getModel()
    {
        return $this->container['model'];
    }

    /**
     * Sets model
     *
     * @param string|null $model Model to add employee's new vehicle detail
     *
     * @return self
     */
    public function setModel($model)
    {
        if (is_null($model)) {
            throw new \InvalidArgumentException('non-nullable model cannot be null');
        }
        $this->container['model'] = $model;

        return $this;
    }

    /**
     * Gets colour
     *
     * @return string|null
     */
    public function getColour()
    {
        return $this->container['colour'];
    }

    /**
     * Sets colour
     *
     * @param string|null $colour Colour to add employee's new vehicle detail
     *
     * @return self
     */
    public function setColour($colour)
    {
        if (is_null($colour)) {
            throw new \InvalidArgumentException('non-nullable colour cannot be null');
        }
        $this->container['colour'] = $colour;

        return $this;
    }

    /**
     * Gets engine_size
     *
     * @return string|null
     */
    public function getEngineSize()
    {
        return $this->container['engine_size'];
    }

    /**
     * Sets engine_size
     *
     * @param string|null $engine_size EngineSize to add employee's new vehicle detail
     *
     * @return self
     */
    public function setEngineSize($engine_size)
    {
        if (is_null($engine_size)) {
            throw new \InvalidArgumentException('non-nullable engine_size cannot be null');
        }
        $this->container['engine_size'] = $engine_size;

        return $this;
    }

    /**
     * Gets fuel_type
     *
     * @return string|null
     */
    public function getFuelType()
    {
        return $this->container['fuel_type'];
    }

    /**
     * Sets fuel_type
     *
     * @param string|null $fuel_type FuelType to add employee's new vehicle detail
     *
     * @return self
     */
    public function setFuelType($fuel_type)
    {
        if (is_null($fuel_type)) {
            throw new \InvalidArgumentException('non-nullable fuel_type cannot be null');
        }
        $this->container['fuel_type'] = $fuel_type;

        return $this;
    }

    /**
     * Gets insurance_company
     *
     * @return string|null
     */
    public function getInsuranceCompany()
    {
        return $this->container['insurance_company'];
    }

    /**
     * Sets insurance_company
     *
     * @param string|null $insurance_company InsuranceCompany to add employee's new vehicle detail
     *
     * @return self
     */
    public function setInsuranceCompany($insurance_company)
    {
        if (is_null($insurance_company)) {
            throw new \InvalidArgumentException('non-nullable insurance_company cannot be null');
        }
        $this->container['insurance_company'] = $insurance_company;

        return $this;
    }

    /**
     * Gets policy_number
     *
     * @return string|null
     */
    public function getPolicyNumber()
    {
        return $this->container['policy_number'];
    }

    /**
     * Sets policy_number
     *
     * @param string|null $policy_number PolicyNumber to add employee's new vehicle detail
     *
     * @return self
     */
    public function setPolicyNumber($policy_number)
    {
        if (is_null($policy_number)) {
            throw new \InvalidArgumentException('non-nullable policy_number cannot be null');
        }
        $this->container['policy_number'] = $policy_number;

        return $this;
    }

    /**
     * Gets mot_expiry_date
     *
     * @return \DateTime|null
     */
    public function getMotExpiryDate()
    {
        return $this->container['mot_expiry_date'];
    }

    /**
     * Sets mot_expiry_date
     *
     * @param \DateTime|null $mot_expiry_date MOTExpiryDate to add employee's new vehicle detail
     *
     * @return self
     */
    public function setMotExpiryDate($mot_expiry_date)
    {
        if (is_null($mot_expiry_date)) {
            throw new \InvalidArgumentException('non-nullable mot_expiry_date cannot be null');
        }
        $this->container['mot_expiry_date'] = $mot_expiry_date;

        return $this;
    }

    /**
     * Gets insurance_expiry_date
     *
     * @return \DateTime|null
     */
    public function getInsuranceExpiryDate()
    {
        return $this->container['insurance_expiry_date'];
    }

    /**
     * Sets insurance_expiry_date
     *
     * @param \DateTime|null $insurance_expiry_date InsuranceExpiryDate to add employee's new vehicle detail
     *
     * @return self
     */
    public function setInsuranceExpiryDate($insurance_expiry_date)
    {
        if (is_null($insurance_expiry_date)) {
            throw new \InvalidArgumentException('non-nullable insurance_expiry_date cannot be null');
        }
        $this->container['insurance_expiry_date'] = $insurance_expiry_date;

        return $this;
    }

    /**
     * Gets comments
     *
     * @return string|null
     */
    public function getComments()
    {
        return $this->container['comments'];
    }

    /**
     * Sets comments
     *
     * @param string|null $comments Comments to add employee's new vehicle detail
     *
     * @return self
     */
    public function setComments($comments)
    {
        if (is_null($comments)) {
            throw new \InvalidArgumentException('non-nullable comments cannot be null');
        }
        $this->container['comments'] = $comments;

        return $this;
    }

    /**
     * Gets custom_columns
     *
     * @return \PeopleHR\Model\CustomColumnsForEmployeeVehicleAddArrayInner[]|null
     */
    public function getCustomColumns()
    {
        return $this->container['custom_columns'];
    }

    /**
     * Sets custom_columns
     *
     * @param \PeopleHR\Model\CustomColumnsForEmployeeVehicleAddArrayInner[]|null $custom_columns CustomColumns to add employee's new vehicle detail
     *
     * @return self
     */
    public function setCustomColumns($custom_columns)
    {
        if (is_null($custom_columns)) {
            throw new \InvalidArgumentException('non-nullable custom_columns cannot be null');
        }
        $this->container['custom_columns'] = $custom_columns;

        return $this;
    }

    /**
     * Gets add_files
     *
     * @return \PeopleHR\Model\AddFilesForEmployeeVehicleAddArrayInner[]|null
     */
    public function getAddFiles()
    {
        return $this->container['add_files'];
    }

    /**
     * Sets add_files
     *
     * @param \PeopleHR\Model\AddFilesForEmployeeVehicleAddArrayInner[]|null $add_files AddFiles to add employee's new vehicle detail
     *
     * @return self
     */
    public function setAddFiles($add_files)
    {
        if (is_null($add_files)) {
            throw new \InvalidArgumentException('non-nullable add_files cannot be null');
        }
        $this->container['add_files'] = $add_files;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}



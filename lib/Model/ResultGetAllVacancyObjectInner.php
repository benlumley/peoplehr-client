<?php
/**
 * ResultGetAllVacancyObjectInner
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  PeopleHR
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * PeopleHR API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.1
 * Contact: customerservices@peoplehr.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.10.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace PeopleHR\Model;

use \ArrayAccess;
use \PeopleHR\ObjectSerializer;

/**
 * ResultGetAllVacancyObjectInner Class Doc Comment
 *
 * @category Class
 * @package  PeopleHR
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ResultGetAllVacancyObjectInner implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ResultGetAllVacancyObject_inner';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'vacancy_name' => 'string',
        'vacancy_description' => 'string',
        'company' => 'string',
        'location' => 'string',
        'department' => 'string',
        'status' => 'int',
        'closing_date' => '\DateTime',
        'reference' => 'string',
        'salary_range' => 'string',
        'job_description' => 'string',
        'is_hide_salary' => 'bool',
        'job_title' => 'string',
        'vacancy_type' => 'string',
        'city' => 'string',
        'country' => 'string',
        'experience' => 'string',
        'job_bord_url' => 'string',
        'additional_questions' => '\PeopleHR\Model\ResultAdditionalQuestionsArrayobjectInner[]',
        'internal_questions' => '\PeopleHR\Model\ResultInternalQuestionsArrayobjectInner[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'vacancy_name' => null,
        'vacancy_description' => null,
        'company' => null,
        'location' => null,
        'department' => null,
        'status' => null,
        'closing_date' => 'date',
        'reference' => null,
        'salary_range' => null,
        'job_description' => null,
        'is_hide_salary' => null,
        'job_title' => null,
        'vacancy_type' => null,
        'city' => null,
        'country' => null,
        'experience' => null,
        'job_bord_url' => 'url',
        'additional_questions' => null,
        'internal_questions' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'vacancy_name' => false,
        'vacancy_description' => false,
        'company' => false,
        'location' => false,
        'department' => false,
        'status' => false,
        'closing_date' => false,
        'reference' => false,
        'salary_range' => false,
        'job_description' => false,
        'is_hide_salary' => false,
        'job_title' => false,
        'vacancy_type' => false,
        'city' => false,
        'country' => false,
        'experience' => false,
        'job_bord_url' => false,
        'additional_questions' => false,
        'internal_questions' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'vacancy_name' => 'VacancyName',
        'vacancy_description' => 'VacancyDescription',
        'company' => 'Company',
        'location' => 'Location',
        'department' => 'Department',
        'status' => 'Status',
        'closing_date' => 'ClosingDate',
        'reference' => 'Reference',
        'salary_range' => 'SalaryRange',
        'job_description' => 'JobDescription',
        'is_hide_salary' => 'IsHideSalary',
        'job_title' => 'JobTitle',
        'vacancy_type' => 'VacancyType',
        'city' => 'City',
        'country' => 'Country',
        'experience' => 'Experience',
        'job_bord_url' => 'JobBordUrl',
        'additional_questions' => 'AdditionalQuestions',
        'internal_questions' => 'InternalQuestions'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'vacancy_name' => 'setVacancyName',
        'vacancy_description' => 'setVacancyDescription',
        'company' => 'setCompany',
        'location' => 'setLocation',
        'department' => 'setDepartment',
        'status' => 'setStatus',
        'closing_date' => 'setClosingDate',
        'reference' => 'setReference',
        'salary_range' => 'setSalaryRange',
        'job_description' => 'setJobDescription',
        'is_hide_salary' => 'setIsHideSalary',
        'job_title' => 'setJobTitle',
        'vacancy_type' => 'setVacancyType',
        'city' => 'setCity',
        'country' => 'setCountry',
        'experience' => 'setExperience',
        'job_bord_url' => 'setJobBordUrl',
        'additional_questions' => 'setAdditionalQuestions',
        'internal_questions' => 'setInternalQuestions'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'vacancy_name' => 'getVacancyName',
        'vacancy_description' => 'getVacancyDescription',
        'company' => 'getCompany',
        'location' => 'getLocation',
        'department' => 'getDepartment',
        'status' => 'getStatus',
        'closing_date' => 'getClosingDate',
        'reference' => 'getReference',
        'salary_range' => 'getSalaryRange',
        'job_description' => 'getJobDescription',
        'is_hide_salary' => 'getIsHideSalary',
        'job_title' => 'getJobTitle',
        'vacancy_type' => 'getVacancyType',
        'city' => 'getCity',
        'country' => 'getCountry',
        'experience' => 'getExperience',
        'job_bord_url' => 'getJobBordUrl',
        'additional_questions' => 'getAdditionalQuestions',
        'internal_questions' => 'getInternalQuestions'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const VACANCY_TYPE_EXTERNAL = 'External';
    public const VACANCY_TYPE_INTERNAL = 'Internal';
    public const VACANCY_TYPE_BOTH = 'Both';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getVacancyTypeAllowableValues()
    {
        return [
            self::VACANCY_TYPE_EXTERNAL,
            self::VACANCY_TYPE_INTERNAL,
            self::VACANCY_TYPE_BOTH,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('vacancy_name', $data ?? [], null);
        $this->setIfExists('vacancy_description', $data ?? [], null);
        $this->setIfExists('company', $data ?? [], null);
        $this->setIfExists('location', $data ?? [], null);
        $this->setIfExists('department', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('closing_date', $data ?? [], null);
        $this->setIfExists('reference', $data ?? [], null);
        $this->setIfExists('salary_range', $data ?? [], null);
        $this->setIfExists('job_description', $data ?? [], null);
        $this->setIfExists('is_hide_salary', $data ?? [], null);
        $this->setIfExists('job_title', $data ?? [], null);
        $this->setIfExists('vacancy_type', $data ?? [], null);
        $this->setIfExists('city', $data ?? [], null);
        $this->setIfExists('country', $data ?? [], null);
        $this->setIfExists('experience', $data ?? [], null);
        $this->setIfExists('job_bord_url', $data ?? [], null);
        $this->setIfExists('additional_questions', $data ?? [], null);
        $this->setIfExists('internal_questions', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getVacancyTypeAllowableValues();
        if (!is_null($this->container['vacancy_type']) && !in_array($this->container['vacancy_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'vacancy_type', must be one of '%s'",
                $this->container['vacancy_type'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets vacancy_name
     *
     * @return string|null
     */
    public function getVacancyName()
    {
        return $this->container['vacancy_name'];
    }

    /**
     * Sets vacancy_name
     *
     * @param string|null $vacancy_name Vacancy name value
     *
     * @return self
     */
    public function setVacancyName($vacancy_name)
    {
        if (is_null($vacancy_name)) {
            throw new \InvalidArgumentException('non-nullable vacancy_name cannot be null');
        }
        $this->container['vacancy_name'] = $vacancy_name;

        return $this;
    }

    /**
     * Gets vacancy_description
     *
     * @return string|null
     */
    public function getVacancyDescription()
    {
        return $this->container['vacancy_description'];
    }

    /**
     * Sets vacancy_description
     *
     * @param string|null $vacancy_description Vacancy description value
     *
     * @return self
     */
    public function setVacancyDescription($vacancy_description)
    {
        if (is_null($vacancy_description)) {
            throw new \InvalidArgumentException('non-nullable vacancy_description cannot be null');
        }
        $this->container['vacancy_description'] = $vacancy_description;

        return $this;
    }

    /**
     * Gets company
     *
     * @return string|null
     */
    public function getCompany()
    {
        return $this->container['company'];
    }

    /**
     * Sets company
     *
     * @param string|null $company Company name value
     *
     * @return self
     */
    public function setCompany($company)
    {
        if (is_null($company)) {
            throw new \InvalidArgumentException('non-nullable company cannot be null');
        }
        $this->container['company'] = $company;

        return $this;
    }

    /**
     * Gets location
     *
     * @return string|null
     */
    public function getLocation()
    {
        return $this->container['location'];
    }

    /**
     * Sets location
     *
     * @param string|null $location Location value
     *
     * @return self
     */
    public function setLocation($location)
    {
        if (is_null($location)) {
            throw new \InvalidArgumentException('non-nullable location cannot be null');
        }
        $this->container['location'] = $location;

        return $this;
    }

    /**
     * Gets department
     *
     * @return string|null
     */
    public function getDepartment()
    {
        return $this->container['department'];
    }

    /**
     * Sets department
     *
     * @param string|null $department Department value
     *
     * @return self
     */
    public function setDepartment($department)
    {
        if (is_null($department)) {
            throw new \InvalidArgumentException('non-nullable department cannot be null');
        }
        $this->container['department'] = $department;

        return $this;
    }

    /**
     * Gets status
     *
     * @return int|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param int|null $status Status value
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets closing_date
     *
     * @return \DateTime|null
     */
    public function getClosingDate()
    {
        return $this->container['closing_date'];
    }

    /**
     * Sets closing_date
     *
     * @param \DateTime|null $closing_date Closing date value
     *
     * @return self
     */
    public function setClosingDate($closing_date)
    {
        if (is_null($closing_date)) {
            throw new \InvalidArgumentException('non-nullable closing_date cannot be null');
        }
        $this->container['closing_date'] = $closing_date;

        return $this;
    }

    /**
     * Gets reference
     *
     * @return string|null
     */
    public function getReference()
    {
        return $this->container['reference'];
    }

    /**
     * Sets reference
     *
     * @param string|null $reference Reference value
     *
     * @return self
     */
    public function setReference($reference)
    {
        if (is_null($reference)) {
            throw new \InvalidArgumentException('non-nullable reference cannot be null');
        }
        $this->container['reference'] = $reference;

        return $this;
    }

    /**
     * Gets salary_range
     *
     * @return string|null
     */
    public function getSalaryRange()
    {
        return $this->container['salary_range'];
    }

    /**
     * Sets salary_range
     *
     * @param string|null $salary_range Salary range value
     *
     * @return self
     */
    public function setSalaryRange($salary_range)
    {
        if (is_null($salary_range)) {
            throw new \InvalidArgumentException('non-nullable salary_range cannot be null');
        }
        $this->container['salary_range'] = $salary_range;

        return $this;
    }

    /**
     * Gets job_description
     *
     * @return string|null
     */
    public function getJobDescription()
    {
        return $this->container['job_description'];
    }

    /**
     * Sets job_description
     *
     * @param string|null $job_description Job description value
     *
     * @return self
     */
    public function setJobDescription($job_description)
    {
        if (is_null($job_description)) {
            throw new \InvalidArgumentException('non-nullable job_description cannot be null');
        }
        $this->container['job_description'] = $job_description;

        return $this;
    }

    /**
     * Gets is_hide_salary
     *
     * @return bool|null
     */
    public function getIsHideSalary()
    {
        return $this->container['is_hide_salary'];
    }

    /**
     * Sets is_hide_salary
     *
     * @param bool|null $is_hide_salary IsHideSalary value
     *
     * @return self
     */
    public function setIsHideSalary($is_hide_salary)
    {
        if (is_null($is_hide_salary)) {
            throw new \InvalidArgumentException('non-nullable is_hide_salary cannot be null');
        }
        $this->container['is_hide_salary'] = $is_hide_salary;

        return $this;
    }

    /**
     * Gets job_title
     *
     * @return string|null
     */
    public function getJobTitle()
    {
        return $this->container['job_title'];
    }

    /**
     * Sets job_title
     *
     * @param string|null $job_title Job title value
     *
     * @return self
     */
    public function setJobTitle($job_title)
    {
        if (is_null($job_title)) {
            throw new \InvalidArgumentException('non-nullable job_title cannot be null');
        }
        $this->container['job_title'] = $job_title;

        return $this;
    }

    /**
     * Gets vacancy_type
     *
     * @return string|null
     */
    public function getVacancyType()
    {
        return $this->container['vacancy_type'];
    }

    /**
     * Sets vacancy_type
     *
     * @param string|null $vacancy_type Vacancy type value
     *
     * @return self
     */
    public function setVacancyType($vacancy_type)
    {
        if (is_null($vacancy_type)) {
            throw new \InvalidArgumentException('non-nullable vacancy_type cannot be null');
        }
        $allowedValues = $this->getVacancyTypeAllowableValues();
        if (!in_array($vacancy_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'vacancy_type', must be one of '%s'",
                    $vacancy_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['vacancy_type'] = $vacancy_type;

        return $this;
    }

    /**
     * Gets city
     *
     * @return string|null
     */
    public function getCity()
    {
        return $this->container['city'];
    }

    /**
     * Sets city
     *
     * @param string|null $city City value
     *
     * @return self
     */
    public function setCity($city)
    {
        if (is_null($city)) {
            throw new \InvalidArgumentException('non-nullable city cannot be null');
        }
        $this->container['city'] = $city;

        return $this;
    }

    /**
     * Gets country
     *
     * @return string|null
     */
    public function getCountry()
    {
        return $this->container['country'];
    }

    /**
     * Sets country
     *
     * @param string|null $country Country value
     *
     * @return self
     */
    public function setCountry($country)
    {
        if (is_null($country)) {
            throw new \InvalidArgumentException('non-nullable country cannot be null');
        }
        $this->container['country'] = $country;

        return $this;
    }

    /**
     * Gets experience
     *
     * @return string|null
     */
    public function getExperience()
    {
        return $this->container['experience'];
    }

    /**
     * Sets experience
     *
     * @param string|null $experience Experience value
     *
     * @return self
     */
    public function setExperience($experience)
    {
        if (is_null($experience)) {
            throw new \InvalidArgumentException('non-nullable experience cannot be null');
        }
        $this->container['experience'] = $experience;

        return $this;
    }

    /**
     * Gets job_bord_url
     *
     * @return string|null
     */
    public function getJobBordUrl()
    {
        return $this->container['job_bord_url'];
    }

    /**
     * Sets job_bord_url
     *
     * @param string|null $job_bord_url JobBordUrl value
     *
     * @return self
     */
    public function setJobBordUrl($job_bord_url)
    {
        if (is_null($job_bord_url)) {
            throw new \InvalidArgumentException('non-nullable job_bord_url cannot be null');
        }
        $this->container['job_bord_url'] = $job_bord_url;

        return $this;
    }

    /**
     * Gets additional_questions
     *
     * @return \PeopleHR\Model\ResultAdditionalQuestionsArrayobjectInner[]|null
     */
    public function getAdditionalQuestions()
    {
        return $this->container['additional_questions'];
    }

    /**
     * Sets additional_questions
     *
     * @param \PeopleHR\Model\ResultAdditionalQuestionsArrayobjectInner[]|null $additional_questions Additional questions array list
     *
     * @return self
     */
    public function setAdditionalQuestions($additional_questions)
    {
        if (is_null($additional_questions)) {
            throw new \InvalidArgumentException('non-nullable additional_questions cannot be null');
        }
        $this->container['additional_questions'] = $additional_questions;

        return $this;
    }

    /**
     * Gets internal_questions
     *
     * @return \PeopleHR\Model\ResultInternalQuestionsArrayobjectInner[]|null
     */
    public function getInternalQuestions()
    {
        return $this->container['internal_questions'];
    }

    /**
     * Sets internal_questions
     *
     * @param \PeopleHR\Model\ResultInternalQuestionsArrayobjectInner[]|null $internal_questions Internal questions array list
     *
     * @return self
     */
    public function setInternalQuestions($internal_questions)
    {
        if (is_null($internal_questions)) {
            throw new \InvalidArgumentException('non-nullable internal_questions cannot be null');
        }
        $this->container['internal_questions'] = $internal_questions;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}



<?php
/**
 * Result1GetList5ArrayInner
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  PeopleHR
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * PeopleHR API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.1
 * Contact: customerservices@peoplehr.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.10.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace PeopleHR\Model;

use \ArrayAccess;
use \PeopleHR\ObjectSerializer;

/**
 * Result1GetList5ArrayInner Class Doc Comment
 *
 * @category Class
 * @package  PeopleHR
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Result1GetList5ArrayInner implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Result1GetList5Array_inner';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'employee_id' => '\PeopleHR\Model\EmployeeIdArrayObject',
        'title' => '\PeopleHR\Model\TitleObject',
        'first_name' => '\PeopleHR\Model\FirstNameObject',
        'last_name' => '\PeopleHR\Model\LastNameObject',
        'other_name' => '\PeopleHR\Model\OtherNameObject',
        'known_as' => '\PeopleHR\Model\KnownAsObject',
        'email_id' => '\PeopleHR\Model\EmailIdObject',
        'start_date' => '\PeopleHR\Model\StartDateObject',
        'date_of_birth' => '\PeopleHR\Model\DateOfBirthObject',
        'job_role' => '\PeopleHR\Model\JobRoleObject',
        'company' => '\PeopleHR\Model\CompanyObject',
        'company_effective_date' => '\PeopleHR\Model\Result1GetList5ArrayInnerCompanyEffectiveDate',
        'location' => '\PeopleHR\Model\LocationObject',
        'location_effective_date' => '\PeopleHR\Model\Result1GetList5ArrayInnerLocationEffectiveDate',
        'department' => '\PeopleHR\Model\DepartmentObject',
        'department_effective_date' => '\PeopleHR\Model\Result1GetList5ArrayInnerDepartmentEffectiveDate',
        'job_role_change_date' => '\PeopleHR\Model\Result1GetList5ArrayInnerJobRoleChangeDate',
        'reports_to' => '\PeopleHR\Model\ReportsToObject',
        'reports_to_effective_date' => '\PeopleHR\Model\Result1GetList5ArrayInnerReportsToEffectiveDate',
        'reports_to_employee_id' => '\PeopleHR\Model\Result1GetList5ArrayInnerReportsToEmployeeId',
        'reports_to_email_address' => '\PeopleHR\Model\Result1GetList5ArrayInnerReportsToEmailAddress',
        'nis_number' => '\PeopleHR\Model\NISNumberObject',
        'nationality' => '\PeopleHR\Model\NationalityObject',
        'employment_type' => '\PeopleHR\Model\EmploymentTypeObject',
        'employment_type_effective_date' => '\PeopleHR\Model\Result1GetList5ArrayInnerEmploymentTypeEffectiveDate',
        'employee_status' => '\PeopleHR\Model\Result1GetList5ArrayInnerEmployeeStatus',
        'holiday_allowance_days' => '\PeopleHR\Model\Result1GetList5ArrayInnerHolidayAllowanceDays',
        'holiday_allowance_mins' => '\PeopleHR\Model\Result1GetList5ArrayInnerHolidayAllowanceMins',
        'notice_period' => '\PeopleHR\Model\NoticePeriodObject',
        'probation_end_date' => '\PeopleHR\Model\ProbationEndDateObject',
        'gender' => '\PeopleHR\Model\GenderObject',
        'contact_detail' => '\PeopleHR\Model\ContactDetailObject',
        'other_contact' => '\PeopleHR\Model\OtherContactObject',
        'right_to_work' => '\PeopleHR\Model\RightToWorkObject',
        'background_detail' => '\PeopleHR\Model\BackgroundDetailObject',
        'bank_detail' => '\PeopleHR\Model\BankDetailObject',
        'employment_detail' => '\PeopleHR\Model\EmploymentDetailObject',
        'leaving_date' => 'string',
        'reason_for_leaving' => 'string',
        'employee_image' => 'string',
        'api_column1' => 'string',
        'api_column2' => 'string',
        'api_column3' => 'string',
        'api_column4' => 'string',
        'api_column5' => 'string',
        'lst_field_history_jobrole' => '\PeopleHR\Model\LstFieldHistoryJobrole'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'employee_id' => null,
        'title' => null,
        'first_name' => null,
        'last_name' => null,
        'other_name' => null,
        'known_as' => null,
        'email_id' => null,
        'start_date' => null,
        'date_of_birth' => null,
        'job_role' => null,
        'company' => null,
        'company_effective_date' => null,
        'location' => null,
        'location_effective_date' => null,
        'department' => null,
        'department_effective_date' => null,
        'job_role_change_date' => null,
        'reports_to' => null,
        'reports_to_effective_date' => null,
        'reports_to_employee_id' => null,
        'reports_to_email_address' => null,
        'nis_number' => null,
        'nationality' => null,
        'employment_type' => null,
        'employment_type_effective_date' => null,
        'employee_status' => null,
        'holiday_allowance_days' => null,
        'holiday_allowance_mins' => null,
        'notice_period' => null,
        'probation_end_date' => null,
        'gender' => null,
        'contact_detail' => null,
        'other_contact' => null,
        'right_to_work' => null,
        'background_detail' => null,
        'bank_detail' => null,
        'employment_detail' => null,
        'leaving_date' => null,
        'reason_for_leaving' => null,
        'employee_image' => null,
        'api_column1' => null,
        'api_column2' => null,
        'api_column3' => null,
        'api_column4' => null,
        'api_column5' => null,
        'lst_field_history_jobrole' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'employee_id' => false,
        'title' => false,
        'first_name' => false,
        'last_name' => false,
        'other_name' => false,
        'known_as' => false,
        'email_id' => false,
        'start_date' => false,
        'date_of_birth' => false,
        'job_role' => false,
        'company' => false,
        'company_effective_date' => false,
        'location' => false,
        'location_effective_date' => false,
        'department' => false,
        'department_effective_date' => false,
        'job_role_change_date' => false,
        'reports_to' => false,
        'reports_to_effective_date' => false,
        'reports_to_employee_id' => false,
        'reports_to_email_address' => false,
        'nis_number' => false,
        'nationality' => false,
        'employment_type' => false,
        'employment_type_effective_date' => false,
        'employee_status' => false,
        'holiday_allowance_days' => false,
        'holiday_allowance_mins' => false,
        'notice_period' => false,
        'probation_end_date' => false,
        'gender' => false,
        'contact_detail' => false,
        'other_contact' => false,
        'right_to_work' => false,
        'background_detail' => false,
        'bank_detail' => false,
        'employment_detail' => false,
        'leaving_date' => false,
        'reason_for_leaving' => false,
        'employee_image' => false,
        'api_column1' => false,
        'api_column2' => false,
        'api_column3' => false,
        'api_column4' => false,
        'api_column5' => false,
        'lst_field_history_jobrole' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'employee_id' => 'EmployeeId',
        'title' => 'Title',
        'first_name' => 'FirstName',
        'last_name' => 'LastName',
        'other_name' => 'OtherName',
        'known_as' => 'KnownAs',
        'email_id' => 'EmailId',
        'start_date' => 'StartDate',
        'date_of_birth' => 'DateOfBirth',
        'job_role' => 'JobRole',
        'company' => 'Company',
        'company_effective_date' => 'CompanyEffectiveDate',
        'location' => 'Location',
        'location_effective_date' => 'LocationEffectiveDate',
        'department' => 'Department',
        'department_effective_date' => 'DepartmentEffectiveDate',
        'job_role_change_date' => 'JobRoleChangeDate',
        'reports_to' => 'ReportsTo',
        'reports_to_effective_date' => 'ReportsToEffectiveDate',
        'reports_to_employee_id' => 'ReportsToEmployeeId',
        'reports_to_email_address' => 'ReportsToEmailAddress',
        'nis_number' => 'NISNumber',
        'nationality' => 'Nationality',
        'employment_type' => 'EmploymentType',
        'employment_type_effective_date' => 'EmploymentTypeEffectiveDate',
        'employee_status' => 'EmployeeStatus',
        'holiday_allowance_days' => 'HolidayAllowanceDays',
        'holiday_allowance_mins' => 'HolidayAllowanceMins',
        'notice_period' => 'NoticePeriod',
        'probation_end_date' => 'ProbationEndDate',
        'gender' => 'Gender',
        'contact_detail' => 'ContactDetail',
        'other_contact' => 'OtherContact',
        'right_to_work' => 'RightToWork',
        'background_detail' => 'BackgroundDetail',
        'bank_detail' => 'BankDetail',
        'employment_detail' => 'EmploymentDetail',
        'leaving_date' => 'LeavingDate',
        'reason_for_leaving' => 'ReasonForLeaving',
        'employee_image' => 'EmployeeImage',
        'api_column1' => 'APIColumn1',
        'api_column2' => 'APIColumn2',
        'api_column3' => 'APIColumn3',
        'api_column4' => 'APIColumn4',
        'api_column5' => 'APIColumn5',
        'lst_field_history_jobrole' => 'lstFieldHistoryJobrole'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'employee_id' => 'setEmployeeId',
        'title' => 'setTitle',
        'first_name' => 'setFirstName',
        'last_name' => 'setLastName',
        'other_name' => 'setOtherName',
        'known_as' => 'setKnownAs',
        'email_id' => 'setEmailId',
        'start_date' => 'setStartDate',
        'date_of_birth' => 'setDateOfBirth',
        'job_role' => 'setJobRole',
        'company' => 'setCompany',
        'company_effective_date' => 'setCompanyEffectiveDate',
        'location' => 'setLocation',
        'location_effective_date' => 'setLocationEffectiveDate',
        'department' => 'setDepartment',
        'department_effective_date' => 'setDepartmentEffectiveDate',
        'job_role_change_date' => 'setJobRoleChangeDate',
        'reports_to' => 'setReportsTo',
        'reports_to_effective_date' => 'setReportsToEffectiveDate',
        'reports_to_employee_id' => 'setReportsToEmployeeId',
        'reports_to_email_address' => 'setReportsToEmailAddress',
        'nis_number' => 'setNisNumber',
        'nationality' => 'setNationality',
        'employment_type' => 'setEmploymentType',
        'employment_type_effective_date' => 'setEmploymentTypeEffectiveDate',
        'employee_status' => 'setEmployeeStatus',
        'holiday_allowance_days' => 'setHolidayAllowanceDays',
        'holiday_allowance_mins' => 'setHolidayAllowanceMins',
        'notice_period' => 'setNoticePeriod',
        'probation_end_date' => 'setProbationEndDate',
        'gender' => 'setGender',
        'contact_detail' => 'setContactDetail',
        'other_contact' => 'setOtherContact',
        'right_to_work' => 'setRightToWork',
        'background_detail' => 'setBackgroundDetail',
        'bank_detail' => 'setBankDetail',
        'employment_detail' => 'setEmploymentDetail',
        'leaving_date' => 'setLeavingDate',
        'reason_for_leaving' => 'setReasonForLeaving',
        'employee_image' => 'setEmployeeImage',
        'api_column1' => 'setApiColumn1',
        'api_column2' => 'setApiColumn2',
        'api_column3' => 'setApiColumn3',
        'api_column4' => 'setApiColumn4',
        'api_column5' => 'setApiColumn5',
        'lst_field_history_jobrole' => 'setLstFieldHistoryJobrole'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'employee_id' => 'getEmployeeId',
        'title' => 'getTitle',
        'first_name' => 'getFirstName',
        'last_name' => 'getLastName',
        'other_name' => 'getOtherName',
        'known_as' => 'getKnownAs',
        'email_id' => 'getEmailId',
        'start_date' => 'getStartDate',
        'date_of_birth' => 'getDateOfBirth',
        'job_role' => 'getJobRole',
        'company' => 'getCompany',
        'company_effective_date' => 'getCompanyEffectiveDate',
        'location' => 'getLocation',
        'location_effective_date' => 'getLocationEffectiveDate',
        'department' => 'getDepartment',
        'department_effective_date' => 'getDepartmentEffectiveDate',
        'job_role_change_date' => 'getJobRoleChangeDate',
        'reports_to' => 'getReportsTo',
        'reports_to_effective_date' => 'getReportsToEffectiveDate',
        'reports_to_employee_id' => 'getReportsToEmployeeId',
        'reports_to_email_address' => 'getReportsToEmailAddress',
        'nis_number' => 'getNisNumber',
        'nationality' => 'getNationality',
        'employment_type' => 'getEmploymentType',
        'employment_type_effective_date' => 'getEmploymentTypeEffectiveDate',
        'employee_status' => 'getEmployeeStatus',
        'holiday_allowance_days' => 'getHolidayAllowanceDays',
        'holiday_allowance_mins' => 'getHolidayAllowanceMins',
        'notice_period' => 'getNoticePeriod',
        'probation_end_date' => 'getProbationEndDate',
        'gender' => 'getGender',
        'contact_detail' => 'getContactDetail',
        'other_contact' => 'getOtherContact',
        'right_to_work' => 'getRightToWork',
        'background_detail' => 'getBackgroundDetail',
        'bank_detail' => 'getBankDetail',
        'employment_detail' => 'getEmploymentDetail',
        'leaving_date' => 'getLeavingDate',
        'reason_for_leaving' => 'getReasonForLeaving',
        'employee_image' => 'getEmployeeImage',
        'api_column1' => 'getApiColumn1',
        'api_column2' => 'getApiColumn2',
        'api_column3' => 'getApiColumn3',
        'api_column4' => 'getApiColumn4',
        'api_column5' => 'getApiColumn5',
        'lst_field_history_jobrole' => 'getLstFieldHistoryJobrole'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('employee_id', $data ?? [], null);
        $this->setIfExists('title', $data ?? [], null);
        $this->setIfExists('first_name', $data ?? [], null);
        $this->setIfExists('last_name', $data ?? [], null);
        $this->setIfExists('other_name', $data ?? [], null);
        $this->setIfExists('known_as', $data ?? [], null);
        $this->setIfExists('email_id', $data ?? [], null);
        $this->setIfExists('start_date', $data ?? [], null);
        $this->setIfExists('date_of_birth', $data ?? [], null);
        $this->setIfExists('job_role', $data ?? [], null);
        $this->setIfExists('company', $data ?? [], null);
        $this->setIfExists('company_effective_date', $data ?? [], null);
        $this->setIfExists('location', $data ?? [], null);
        $this->setIfExists('location_effective_date', $data ?? [], null);
        $this->setIfExists('department', $data ?? [], null);
        $this->setIfExists('department_effective_date', $data ?? [], null);
        $this->setIfExists('job_role_change_date', $data ?? [], null);
        $this->setIfExists('reports_to', $data ?? [], null);
        $this->setIfExists('reports_to_effective_date', $data ?? [], null);
        $this->setIfExists('reports_to_employee_id', $data ?? [], null);
        $this->setIfExists('reports_to_email_address', $data ?? [], null);
        $this->setIfExists('nis_number', $data ?? [], null);
        $this->setIfExists('nationality', $data ?? [], null);
        $this->setIfExists('employment_type', $data ?? [], null);
        $this->setIfExists('employment_type_effective_date', $data ?? [], null);
        $this->setIfExists('employee_status', $data ?? [], null);
        $this->setIfExists('holiday_allowance_days', $data ?? [], null);
        $this->setIfExists('holiday_allowance_mins', $data ?? [], null);
        $this->setIfExists('notice_period', $data ?? [], null);
        $this->setIfExists('probation_end_date', $data ?? [], null);
        $this->setIfExists('gender', $data ?? [], null);
        $this->setIfExists('contact_detail', $data ?? [], null);
        $this->setIfExists('other_contact', $data ?? [], null);
        $this->setIfExists('right_to_work', $data ?? [], null);
        $this->setIfExists('background_detail', $data ?? [], null);
        $this->setIfExists('bank_detail', $data ?? [], null);
        $this->setIfExists('employment_detail', $data ?? [], null);
        $this->setIfExists('leaving_date', $data ?? [], null);
        $this->setIfExists('reason_for_leaving', $data ?? [], null);
        $this->setIfExists('employee_image', $data ?? [], null);
        $this->setIfExists('api_column1', $data ?? [], null);
        $this->setIfExists('api_column2', $data ?? [], null);
        $this->setIfExists('api_column3', $data ?? [], null);
        $this->setIfExists('api_column4', $data ?? [], null);
        $this->setIfExists('api_column5', $data ?? [], null);
        $this->setIfExists('lst_field_history_jobrole', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets employee_id
     *
     * @return \PeopleHR\Model\EmployeeIdArrayObject|null
     */
    public function getEmployeeId()
    {
        return $this->container['employee_id'];
    }

    /**
     * Sets employee_id
     *
     * @param \PeopleHR\Model\EmployeeIdArrayObject|null $employee_id EmployeeId contain displayValue and FieldHistory array
     *
     * @return self
     */
    public function setEmployeeId($employee_id)
    {
        if (is_null($employee_id)) {
            throw new \InvalidArgumentException('non-nullable employee_id cannot be null');
        }
        $this->container['employee_id'] = $employee_id;

        return $this;
    }

    /**
     * Gets title
     *
     * @return \PeopleHR\Model\TitleObject|null
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param \PeopleHR\Model\TitleObject|null $title Title
     *
     * @return self
     */
    public function setTitle($title)
    {
        if (is_null($title)) {
            throw new \InvalidArgumentException('non-nullable title cannot be null');
        }
        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets first_name
     *
     * @return \PeopleHR\Model\FirstNameObject|null
     */
    public function getFirstName()
    {
        return $this->container['first_name'];
    }

    /**
     * Sets first_name
     *
     * @param \PeopleHR\Model\FirstNameObject|null $first_name FirstName of employee
     *
     * @return self
     */
    public function setFirstName($first_name)
    {
        if (is_null($first_name)) {
            throw new \InvalidArgumentException('non-nullable first_name cannot be null');
        }
        $this->container['first_name'] = $first_name;

        return $this;
    }

    /**
     * Gets last_name
     *
     * @return \PeopleHR\Model\LastNameObject|null
     */
    public function getLastName()
    {
        return $this->container['last_name'];
    }

    /**
     * Sets last_name
     *
     * @param \PeopleHR\Model\LastNameObject|null $last_name LastName of employee
     *
     * @return self
     */
    public function setLastName($last_name)
    {
        if (is_null($last_name)) {
            throw new \InvalidArgumentException('non-nullable last_name cannot be null');
        }
        $this->container['last_name'] = $last_name;

        return $this;
    }

    /**
     * Gets other_name
     *
     * @return \PeopleHR\Model\OtherNameObject|null
     */
    public function getOtherName()
    {
        return $this->container['other_name'];
    }

    /**
     * Sets other_name
     *
     * @param \PeopleHR\Model\OtherNameObject|null $other_name OtherName of employee
     *
     * @return self
     */
    public function setOtherName($other_name)
    {
        if (is_null($other_name)) {
            throw new \InvalidArgumentException('non-nullable other_name cannot be null');
        }
        $this->container['other_name'] = $other_name;

        return $this;
    }

    /**
     * Gets known_as
     *
     * @return \PeopleHR\Model\KnownAsObject|null
     */
    public function getKnownAs()
    {
        return $this->container['known_as'];
    }

    /**
     * Sets known_as
     *
     * @param \PeopleHR\Model\KnownAsObject|null $known_as KnownAs
     *
     * @return self
     */
    public function setKnownAs($known_as)
    {
        if (is_null($known_as)) {
            throw new \InvalidArgumentException('non-nullable known_as cannot be null');
        }
        $this->container['known_as'] = $known_as;

        return $this;
    }

    /**
     * Gets email_id
     *
     * @return \PeopleHR\Model\EmailIdObject|null
     */
    public function getEmailId()
    {
        return $this->container['email_id'];
    }

    /**
     * Sets email_id
     *
     * @param \PeopleHR\Model\EmailIdObject|null $email_id EmailId of employee
     *
     * @return self
     */
    public function setEmailId($email_id)
    {
        if (is_null($email_id)) {
            throw new \InvalidArgumentException('non-nullable email_id cannot be null');
        }
        $this->container['email_id'] = $email_id;

        return $this;
    }

    /**
     * Gets start_date
     *
     * @return \PeopleHR\Model\StartDateObject|null
     */
    public function getStartDate()
    {
        return $this->container['start_date'];
    }

    /**
     * Sets start_date
     *
     * @param \PeopleHR\Model\StartDateObject|null $start_date StartDate of employee
     *
     * @return self
     */
    public function setStartDate($start_date)
    {
        if (is_null($start_date)) {
            throw new \InvalidArgumentException('non-nullable start_date cannot be null');
        }
        $this->container['start_date'] = $start_date;

        return $this;
    }

    /**
     * Gets date_of_birth
     *
     * @return \PeopleHR\Model\DateOfBirthObject|null
     */
    public function getDateOfBirth()
    {
        return $this->container['date_of_birth'];
    }

    /**
     * Sets date_of_birth
     *
     * @param \PeopleHR\Model\DateOfBirthObject|null $date_of_birth DateOfBirth of employee
     *
     * @return self
     */
    public function setDateOfBirth($date_of_birth)
    {
        if (is_null($date_of_birth)) {
            throw new \InvalidArgumentException('non-nullable date_of_birth cannot be null');
        }
        $this->container['date_of_birth'] = $date_of_birth;

        return $this;
    }

    /**
     * Gets job_role
     *
     * @return \PeopleHR\Model\JobRoleObject|null
     */
    public function getJobRole()
    {
        return $this->container['job_role'];
    }

    /**
     * Sets job_role
     *
     * @param \PeopleHR\Model\JobRoleObject|null $job_role JobRole of employee
     *
     * @return self
     */
    public function setJobRole($job_role)
    {
        if (is_null($job_role)) {
            throw new \InvalidArgumentException('non-nullable job_role cannot be null');
        }
        $this->container['job_role'] = $job_role;

        return $this;
    }

    /**
     * Gets company
     *
     * @return \PeopleHR\Model\CompanyObject|null
     */
    public function getCompany()
    {
        return $this->container['company'];
    }

    /**
     * Sets company
     *
     * @param \PeopleHR\Model\CompanyObject|null $company Company name of employee
     *
     * @return self
     */
    public function setCompany($company)
    {
        if (is_null($company)) {
            throw new \InvalidArgumentException('non-nullable company cannot be null');
        }
        $this->container['company'] = $company;

        return $this;
    }

    /**
     * Gets company_effective_date
     *
     * @return \PeopleHR\Model\Result1GetList5ArrayInnerCompanyEffectiveDate|null
     */
    public function getCompanyEffectiveDate()
    {
        return $this->container['company_effective_date'];
    }

    /**
     * Sets company_effective_date
     *
     * @param \PeopleHR\Model\Result1GetList5ArrayInnerCompanyEffectiveDate|null $company_effective_date company_effective_date
     *
     * @return self
     */
    public function setCompanyEffectiveDate($company_effective_date)
    {
        if (is_null($company_effective_date)) {
            throw new \InvalidArgumentException('non-nullable company_effective_date cannot be null');
        }
        $this->container['company_effective_date'] = $company_effective_date;

        return $this;
    }

    /**
     * Gets location
     *
     * @return \PeopleHR\Model\LocationObject|null
     */
    public function getLocation()
    {
        return $this->container['location'];
    }

    /**
     * Sets location
     *
     * @param \PeopleHR\Model\LocationObject|null $location Location name of employee
     *
     * @return self
     */
    public function setLocation($location)
    {
        if (is_null($location)) {
            throw new \InvalidArgumentException('non-nullable location cannot be null');
        }
        $this->container['location'] = $location;

        return $this;
    }

    /**
     * Gets location_effective_date
     *
     * @return \PeopleHR\Model\Result1GetList5ArrayInnerLocationEffectiveDate|null
     */
    public function getLocationEffectiveDate()
    {
        return $this->container['location_effective_date'];
    }

    /**
     * Sets location_effective_date
     *
     * @param \PeopleHR\Model\Result1GetList5ArrayInnerLocationEffectiveDate|null $location_effective_date location_effective_date
     *
     * @return self
     */
    public function setLocationEffectiveDate($location_effective_date)
    {
        if (is_null($location_effective_date)) {
            throw new \InvalidArgumentException('non-nullable location_effective_date cannot be null');
        }
        $this->container['location_effective_date'] = $location_effective_date;

        return $this;
    }

    /**
     * Gets department
     *
     * @return \PeopleHR\Model\DepartmentObject|null
     */
    public function getDepartment()
    {
        return $this->container['department'];
    }

    /**
     * Sets department
     *
     * @param \PeopleHR\Model\DepartmentObject|null $department Department name of employee
     *
     * @return self
     */
    public function setDepartment($department)
    {
        if (is_null($department)) {
            throw new \InvalidArgumentException('non-nullable department cannot be null');
        }
        $this->container['department'] = $department;

        return $this;
    }

    /**
     * Gets department_effective_date
     *
     * @return \PeopleHR\Model\Result1GetList5ArrayInnerDepartmentEffectiveDate|null
     */
    public function getDepartmentEffectiveDate()
    {
        return $this->container['department_effective_date'];
    }

    /**
     * Sets department_effective_date
     *
     * @param \PeopleHR\Model\Result1GetList5ArrayInnerDepartmentEffectiveDate|null $department_effective_date department_effective_date
     *
     * @return self
     */
    public function setDepartmentEffectiveDate($department_effective_date)
    {
        if (is_null($department_effective_date)) {
            throw new \InvalidArgumentException('non-nullable department_effective_date cannot be null');
        }
        $this->container['department_effective_date'] = $department_effective_date;

        return $this;
    }

    /**
     * Gets job_role_change_date
     *
     * @return \PeopleHR\Model\Result1GetList5ArrayInnerJobRoleChangeDate|null
     */
    public function getJobRoleChangeDate()
    {
        return $this->container['job_role_change_date'];
    }

    /**
     * Sets job_role_change_date
     *
     * @param \PeopleHR\Model\Result1GetList5ArrayInnerJobRoleChangeDate|null $job_role_change_date job_role_change_date
     *
     * @return self
     */
    public function setJobRoleChangeDate($job_role_change_date)
    {
        if (is_null($job_role_change_date)) {
            throw new \InvalidArgumentException('non-nullable job_role_change_date cannot be null');
        }
        $this->container['job_role_change_date'] = $job_role_change_date;

        return $this;
    }

    /**
     * Gets reports_to
     *
     * @return \PeopleHR\Model\ReportsToObject|null
     */
    public function getReportsTo()
    {
        return $this->container['reports_to'];
    }

    /**
     * Sets reports_to
     *
     * @param \PeopleHR\Model\ReportsToObject|null $reports_to Reports to value
     *
     * @return self
     */
    public function setReportsTo($reports_to)
    {
        if (is_null($reports_to)) {
            throw new \InvalidArgumentException('non-nullable reports_to cannot be null');
        }
        $this->container['reports_to'] = $reports_to;

        return $this;
    }

    /**
     * Gets reports_to_effective_date
     *
     * @return \PeopleHR\Model\Result1GetList5ArrayInnerReportsToEffectiveDate|null
     */
    public function getReportsToEffectiveDate()
    {
        return $this->container['reports_to_effective_date'];
    }

    /**
     * Sets reports_to_effective_date
     *
     * @param \PeopleHR\Model\Result1GetList5ArrayInnerReportsToEffectiveDate|null $reports_to_effective_date reports_to_effective_date
     *
     * @return self
     */
    public function setReportsToEffectiveDate($reports_to_effective_date)
    {
        if (is_null($reports_to_effective_date)) {
            throw new \InvalidArgumentException('non-nullable reports_to_effective_date cannot be null');
        }
        $this->container['reports_to_effective_date'] = $reports_to_effective_date;

        return $this;
    }

    /**
     * Gets reports_to_employee_id
     *
     * @return \PeopleHR\Model\Result1GetList5ArrayInnerReportsToEmployeeId|null
     */
    public function getReportsToEmployeeId()
    {
        return $this->container['reports_to_employee_id'];
    }

    /**
     * Sets reports_to_employee_id
     *
     * @param \PeopleHR\Model\Result1GetList5ArrayInnerReportsToEmployeeId|null $reports_to_employee_id reports_to_employee_id
     *
     * @return self
     */
    public function setReportsToEmployeeId($reports_to_employee_id)
    {
        if (is_null($reports_to_employee_id)) {
            throw new \InvalidArgumentException('non-nullable reports_to_employee_id cannot be null');
        }
        $this->container['reports_to_employee_id'] = $reports_to_employee_id;

        return $this;
    }

    /**
     * Gets reports_to_email_address
     *
     * @return \PeopleHR\Model\Result1GetList5ArrayInnerReportsToEmailAddress|null
     */
    public function getReportsToEmailAddress()
    {
        return $this->container['reports_to_email_address'];
    }

    /**
     * Sets reports_to_email_address
     *
     * @param \PeopleHR\Model\Result1GetList5ArrayInnerReportsToEmailAddress|null $reports_to_email_address reports_to_email_address
     *
     * @return self
     */
    public function setReportsToEmailAddress($reports_to_email_address)
    {
        if (is_null($reports_to_email_address)) {
            throw new \InvalidArgumentException('non-nullable reports_to_email_address cannot be null');
        }
        $this->container['reports_to_email_address'] = $reports_to_email_address;

        return $this;
    }

    /**
     * Gets nis_number
     *
     * @return \PeopleHR\Model\NISNumberObject|null
     */
    public function getNisNumber()
    {
        return $this->container['nis_number'];
    }

    /**
     * Sets nis_number
     *
     * @param \PeopleHR\Model\NISNumberObject|null $nis_number NIS number value
     *
     * @return self
     */
    public function setNisNumber($nis_number)
    {
        if (is_null($nis_number)) {
            throw new \InvalidArgumentException('non-nullable nis_number cannot be null');
        }
        $this->container['nis_number'] = $nis_number;

        return $this;
    }

    /**
     * Gets nationality
     *
     * @return \PeopleHR\Model\NationalityObject|null
     */
    public function getNationality()
    {
        return $this->container['nationality'];
    }

    /**
     * Sets nationality
     *
     * @param \PeopleHR\Model\NationalityObject|null $nationality Nationality value
     *
     * @return self
     */
    public function setNationality($nationality)
    {
        if (is_null($nationality)) {
            throw new \InvalidArgumentException('non-nullable nationality cannot be null');
        }
        $this->container['nationality'] = $nationality;

        return $this;
    }

    /**
     * Gets employment_type
     *
     * @return \PeopleHR\Model\EmploymentTypeObject|null
     */
    public function getEmploymentType()
    {
        return $this->container['employment_type'];
    }

    /**
     * Sets employment_type
     *
     * @param \PeopleHR\Model\EmploymentTypeObject|null $employment_type Employment type value
     *
     * @return self
     */
    public function setEmploymentType($employment_type)
    {
        if (is_null($employment_type)) {
            throw new \InvalidArgumentException('non-nullable employment_type cannot be null');
        }
        $this->container['employment_type'] = $employment_type;

        return $this;
    }

    /**
     * Gets employment_type_effective_date
     *
     * @return \PeopleHR\Model\Result1GetList5ArrayInnerEmploymentTypeEffectiveDate|null
     */
    public function getEmploymentTypeEffectiveDate()
    {
        return $this->container['employment_type_effective_date'];
    }

    /**
     * Sets employment_type_effective_date
     *
     * @param \PeopleHR\Model\Result1GetList5ArrayInnerEmploymentTypeEffectiveDate|null $employment_type_effective_date employment_type_effective_date
     *
     * @return self
     */
    public function setEmploymentTypeEffectiveDate($employment_type_effective_date)
    {
        if (is_null($employment_type_effective_date)) {
            throw new \InvalidArgumentException('non-nullable employment_type_effective_date cannot be null');
        }
        $this->container['employment_type_effective_date'] = $employment_type_effective_date;

        return $this;
    }

    /**
     * Gets employee_status
     *
     * @return \PeopleHR\Model\Result1GetList5ArrayInnerEmployeeStatus|null
     */
    public function getEmployeeStatus()
    {
        return $this->container['employee_status'];
    }

    /**
     * Sets employee_status
     *
     * @param \PeopleHR\Model\Result1GetList5ArrayInnerEmployeeStatus|null $employee_status employee_status
     *
     * @return self
     */
    public function setEmployeeStatus($employee_status)
    {
        if (is_null($employee_status)) {
            throw new \InvalidArgumentException('non-nullable employee_status cannot be null');
        }
        $this->container['employee_status'] = $employee_status;

        return $this;
    }

    /**
     * Gets holiday_allowance_days
     *
     * @return \PeopleHR\Model\Result1GetList5ArrayInnerHolidayAllowanceDays|null
     */
    public function getHolidayAllowanceDays()
    {
        return $this->container['holiday_allowance_days'];
    }

    /**
     * Sets holiday_allowance_days
     *
     * @param \PeopleHR\Model\Result1GetList5ArrayInnerHolidayAllowanceDays|null $holiday_allowance_days holiday_allowance_days
     *
     * @return self
     */
    public function setHolidayAllowanceDays($holiday_allowance_days)
    {
        if (is_null($holiday_allowance_days)) {
            throw new \InvalidArgumentException('non-nullable holiday_allowance_days cannot be null');
        }
        $this->container['holiday_allowance_days'] = $holiday_allowance_days;

        return $this;
    }

    /**
     * Gets holiday_allowance_mins
     *
     * @return \PeopleHR\Model\Result1GetList5ArrayInnerHolidayAllowanceMins|null
     */
    public function getHolidayAllowanceMins()
    {
        return $this->container['holiday_allowance_mins'];
    }

    /**
     * Sets holiday_allowance_mins
     *
     * @param \PeopleHR\Model\Result1GetList5ArrayInnerHolidayAllowanceMins|null $holiday_allowance_mins holiday_allowance_mins
     *
     * @return self
     */
    public function setHolidayAllowanceMins($holiday_allowance_mins)
    {
        if (is_null($holiday_allowance_mins)) {
            throw new \InvalidArgumentException('non-nullable holiday_allowance_mins cannot be null');
        }
        $this->container['holiday_allowance_mins'] = $holiday_allowance_mins;

        return $this;
    }

    /**
     * Gets notice_period
     *
     * @return \PeopleHR\Model\NoticePeriodObject|null
     */
    public function getNoticePeriod()
    {
        return $this->container['notice_period'];
    }

    /**
     * Sets notice_period
     *
     * @param \PeopleHR\Model\NoticePeriodObject|null $notice_period Notice period value
     *
     * @return self
     */
    public function setNoticePeriod($notice_period)
    {
        if (is_null($notice_period)) {
            throw new \InvalidArgumentException('non-nullable notice_period cannot be null');
        }
        $this->container['notice_period'] = $notice_period;

        return $this;
    }

    /**
     * Gets probation_end_date
     *
     * @return \PeopleHR\Model\ProbationEndDateObject|null
     */
    public function getProbationEndDate()
    {
        return $this->container['probation_end_date'];
    }

    /**
     * Sets probation_end_date
     *
     * @param \PeopleHR\Model\ProbationEndDateObject|null $probation_end_date Probation end date value
     *
     * @return self
     */
    public function setProbationEndDate($probation_end_date)
    {
        if (is_null($probation_end_date)) {
            throw new \InvalidArgumentException('non-nullable probation_end_date cannot be null');
        }
        $this->container['probation_end_date'] = $probation_end_date;

        return $this;
    }

    /**
     * Gets gender
     *
     * @return \PeopleHR\Model\GenderObject|null
     */
    public function getGender()
    {
        return $this->container['gender'];
    }

    /**
     * Sets gender
     *
     * @param \PeopleHR\Model\GenderObject|null $gender Gender value
     *
     * @return self
     */
    public function setGender($gender)
    {
        if (is_null($gender)) {
            throw new \InvalidArgumentException('non-nullable gender cannot be null');
        }
        $this->container['gender'] = $gender;

        return $this;
    }

    /**
     * Gets contact_detail
     *
     * @return \PeopleHR\Model\ContactDetailObject|null
     */
    public function getContactDetail()
    {
        return $this->container['contact_detail'];
    }

    /**
     * Sets contact_detail
     *
     * @param \PeopleHR\Model\ContactDetailObject|null $contact_detail Contact detail value
     *
     * @return self
     */
    public function setContactDetail($contact_detail)
    {
        if (is_null($contact_detail)) {
            throw new \InvalidArgumentException('non-nullable contact_detail cannot be null');
        }
        $this->container['contact_detail'] = $contact_detail;

        return $this;
    }

    /**
     * Gets other_contact
     *
     * @return \PeopleHR\Model\OtherContactObject|null
     */
    public function getOtherContact()
    {
        return $this->container['other_contact'];
    }

    /**
     * Sets other_contact
     *
     * @param \PeopleHR\Model\OtherContactObject|null $other_contact Other Contact detail value
     *
     * @return self
     */
    public function setOtherContact($other_contact)
    {
        if (is_null($other_contact)) {
            throw new \InvalidArgumentException('non-nullable other_contact cannot be null');
        }
        $this->container['other_contact'] = $other_contact;

        return $this;
    }

    /**
     * Gets right_to_work
     *
     * @return \PeopleHR\Model\RightToWorkObject|null
     */
    public function getRightToWork()
    {
        return $this->container['right_to_work'];
    }

    /**
     * Sets right_to_work
     *
     * @param \PeopleHR\Model\RightToWorkObject|null $right_to_work Right to work value
     *
     * @return self
     */
    public function setRightToWork($right_to_work)
    {
        if (is_null($right_to_work)) {
            throw new \InvalidArgumentException('non-nullable right_to_work cannot be null');
        }
        $this->container['right_to_work'] = $right_to_work;

        return $this;
    }

    /**
     * Gets background_detail
     *
     * @return \PeopleHR\Model\BackgroundDetailObject|null
     */
    public function getBackgroundDetail()
    {
        return $this->container['background_detail'];
    }

    /**
     * Sets background_detail
     *
     * @param \PeopleHR\Model\BackgroundDetailObject|null $background_detail Background detail value
     *
     * @return self
     */
    public function setBackgroundDetail($background_detail)
    {
        if (is_null($background_detail)) {
            throw new \InvalidArgumentException('non-nullable background_detail cannot be null');
        }
        $this->container['background_detail'] = $background_detail;

        return $this;
    }

    /**
     * Gets bank_detail
     *
     * @return \PeopleHR\Model\BankDetailObject|null
     */
    public function getBankDetail()
    {
        return $this->container['bank_detail'];
    }

    /**
     * Sets bank_detail
     *
     * @param \PeopleHR\Model\BankDetailObject|null $bank_detail Bank detail value
     *
     * @return self
     */
    public function setBankDetail($bank_detail)
    {
        if (is_null($bank_detail)) {
            throw new \InvalidArgumentException('non-nullable bank_detail cannot be null');
        }
        $this->container['bank_detail'] = $bank_detail;

        return $this;
    }

    /**
     * Gets employment_detail
     *
     * @return \PeopleHR\Model\EmploymentDetailObject|null
     */
    public function getEmploymentDetail()
    {
        return $this->container['employment_detail'];
    }

    /**
     * Sets employment_detail
     *
     * @param \PeopleHR\Model\EmploymentDetailObject|null $employment_detail Employment detail value
     *
     * @return self
     */
    public function setEmploymentDetail($employment_detail)
    {
        if (is_null($employment_detail)) {
            throw new \InvalidArgumentException('non-nullable employment_detail cannot be null');
        }
        $this->container['employment_detail'] = $employment_detail;

        return $this;
    }

    /**
     * Gets leaving_date
     *
     * @return string|null
     */
    public function getLeavingDate()
    {
        return $this->container['leaving_date'];
    }

    /**
     * Sets leaving_date
     *
     * @param string|null $leaving_date LeavingDate value
     *
     * @return self
     */
    public function setLeavingDate($leaving_date)
    {
        if (is_null($leaving_date)) {
            throw new \InvalidArgumentException('non-nullable leaving_date cannot be null');
        }
        $this->container['leaving_date'] = $leaving_date;

        return $this;
    }

    /**
     * Gets reason_for_leaving
     *
     * @return string|null
     */
    public function getReasonForLeaving()
    {
        return $this->container['reason_for_leaving'];
    }

    /**
     * Sets reason_for_leaving
     *
     * @param string|null $reason_for_leaving Reason for leaving value
     *
     * @return self
     */
    public function setReasonForLeaving($reason_for_leaving)
    {
        if (is_null($reason_for_leaving)) {
            throw new \InvalidArgumentException('non-nullable reason_for_leaving cannot be null');
        }
        $this->container['reason_for_leaving'] = $reason_for_leaving;

        return $this;
    }

    /**
     * Gets employee_image
     *
     * @return string|null
     */
    public function getEmployeeImage()
    {
        return $this->container['employee_image'];
    }

    /**
     * Sets employee_image
     *
     * @param string|null $employee_image Employee image value
     *
     * @return self
     */
    public function setEmployeeImage($employee_image)
    {
        if (is_null($employee_image)) {
            throw new \InvalidArgumentException('non-nullable employee_image cannot be null');
        }
        $this->container['employee_image'] = $employee_image;

        return $this;
    }

    /**
     * Gets api_column1
     *
     * @return string|null
     */
    public function getApiColumn1()
    {
        return $this->container['api_column1'];
    }

    /**
     * Sets api_column1
     *
     * @param string|null $api_column1 API column 1 value
     *
     * @return self
     */
    public function setApiColumn1($api_column1)
    {
        if (is_null($api_column1)) {
            throw new \InvalidArgumentException('non-nullable api_column1 cannot be null');
        }
        $this->container['api_column1'] = $api_column1;

        return $this;
    }

    /**
     * Gets api_column2
     *
     * @return string|null
     */
    public function getApiColumn2()
    {
        return $this->container['api_column2'];
    }

    /**
     * Sets api_column2
     *
     * @param string|null $api_column2 API column 2 value
     *
     * @return self
     */
    public function setApiColumn2($api_column2)
    {
        if (is_null($api_column2)) {
            throw new \InvalidArgumentException('non-nullable api_column2 cannot be null');
        }
        $this->container['api_column2'] = $api_column2;

        return $this;
    }

    /**
     * Gets api_column3
     *
     * @return string|null
     */
    public function getApiColumn3()
    {
        return $this->container['api_column3'];
    }

    /**
     * Sets api_column3
     *
     * @param string|null $api_column3 API column 3 value
     *
     * @return self
     */
    public function setApiColumn3($api_column3)
    {
        if (is_null($api_column3)) {
            throw new \InvalidArgumentException('non-nullable api_column3 cannot be null');
        }
        $this->container['api_column3'] = $api_column3;

        return $this;
    }

    /**
     * Gets api_column4
     *
     * @return string|null
     */
    public function getApiColumn4()
    {
        return $this->container['api_column4'];
    }

    /**
     * Sets api_column4
     *
     * @param string|null $api_column4 API column 4 value
     *
     * @return self
     */
    public function setApiColumn4($api_column4)
    {
        if (is_null($api_column4)) {
            throw new \InvalidArgumentException('non-nullable api_column4 cannot be null');
        }
        $this->container['api_column4'] = $api_column4;

        return $this;
    }

    /**
     * Gets api_column5
     *
     * @return string|null
     */
    public function getApiColumn5()
    {
        return $this->container['api_column5'];
    }

    /**
     * Sets api_column5
     *
     * @param string|null $api_column5 API column 5 value
     *
     * @return self
     */
    public function setApiColumn5($api_column5)
    {
        if (is_null($api_column5)) {
            throw new \InvalidArgumentException('non-nullable api_column5 cannot be null');
        }
        $this->container['api_column5'] = $api_column5;

        return $this;
    }

    /**
     * Gets lst_field_history_jobrole
     *
     * @return \PeopleHR\Model\LstFieldHistoryJobrole|null
     */
    public function getLstFieldHistoryJobrole()
    {
        return $this->container['lst_field_history_jobrole'];
    }

    /**
     * Sets lst_field_history_jobrole
     *
     * @param \PeopleHR\Model\LstFieldHistoryJobrole|null $lst_field_history_jobrole list of Field history job role
     *
     * @return self
     */
    public function setLstFieldHistoryJobrole($lst_field_history_jobrole)
    {
        if (is_null($lst_field_history_jobrole)) {
            throw new \InvalidArgumentException('non-nullable lst_field_history_jobrole cannot be null');
        }
        $this->container['lst_field_history_jobrole'] = $lst_field_history_jobrole;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}



<?php
/**
 * UpdateEmployeeDetail3
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  PeopleHR
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * PeopleHR API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.1
 * Contact: customerservices@peoplehr.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.10.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace PeopleHR\Model;

use \ArrayAccess;
use \PeopleHR\ObjectSerializer;

/**
 * UpdateEmployeeDetail3 Class Doc Comment
 *
 * @category Class
 * @package  PeopleHR
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class UpdateEmployeeDetail3 implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'UpdateEmployeeDetail3';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'api_key' => 'string',
        'action' => 'string',
        'reason_for_change' => 'string',
        'employee_id' => 'string',
        'title' => 'string',
        'first_name' => 'string',
        'last_name' => 'string',
        'email' => 'string',
        'gender' => '\PeopleHR\Model\Gender',
        'date_of_birth' => '\DateTime',
        'start_date' => '\DateTime',
        'reports_to' => 'string',
        'reports_to_effective_date' => '\DateTime',
        'company' => 'string',
        'company_effective_date' => '\DateTime',
        'job_role' => 'string',
        'job_role_effective_date' => '\DateTime',
        'location' => 'string',
        'location_effective_date' => '\DateTime',
        'department' => 'string',
        'department_effective_date' => '\DateTime',
        'national_insurance_number' => 'string',
        'nationality' => 'string',
        'employment_type' => 'string',
        'employment_type_effective_date' => '\DateTime',
        'address' => 'string',
        'personal_phone_number' => 'string',
        'payroll_company' => 'string',
        'payroll_id' => 'string',
        'time__attendance_id' => 'string',
        'rota_id' => 'string',
        'crm_id' => 'string',
        'ats_id' => 'string',
        'performance_id' => 'string',
        'benefits_id' => 'string',
        'system1_id' => 'string',
        'system2_id' => 'string',
        'system3_id' => 'string',
        'api_column1' => 'string',
        'api_column2' => 'string',
        'api_column3' => 'string',
        'api_column4' => 'string',
        'api_column5' => 'string',
        'personal_email' => 'string',
        'method_of_recruitment' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'api_key' => null,
        'action' => null,
        'reason_for_change' => null,
        'employee_id' => null,
        'title' => null,
        'first_name' => null,
        'last_name' => null,
        'email' => 'email',
        'gender' => null,
        'date_of_birth' => 'date',
        'start_date' => 'date',
        'reports_to' => 'email',
        'reports_to_effective_date' => 'date',
        'company' => null,
        'company_effective_date' => 'date',
        'job_role' => null,
        'job_role_effective_date' => 'date',
        'location' => null,
        'location_effective_date' => 'date',
        'department' => null,
        'department_effective_date' => 'date',
        'national_insurance_number' => null,
        'nationality' => null,
        'employment_type' => null,
        'employment_type_effective_date' => 'date',
        'address' => null,
        'personal_phone_number' => null,
        'payroll_company' => null,
        'payroll_id' => null,
        'time__attendance_id' => null,
        'rota_id' => null,
        'crm_id' => null,
        'ats_id' => null,
        'performance_id' => null,
        'benefits_id' => null,
        'system1_id' => null,
        'system2_id' => null,
        'system3_id' => null,
        'api_column1' => null,
        'api_column2' => null,
        'api_column3' => null,
        'api_column4' => null,
        'api_column5' => null,
        'personal_email' => 'email',
        'method_of_recruitment' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'api_key' => false,
        'action' => false,
        'reason_for_change' => false,
        'employee_id' => false,
        'title' => false,
        'first_name' => false,
        'last_name' => false,
        'email' => false,
        'gender' => false,
        'date_of_birth' => false,
        'start_date' => false,
        'reports_to' => false,
        'reports_to_effective_date' => false,
        'company' => false,
        'company_effective_date' => false,
        'job_role' => false,
        'job_role_effective_date' => false,
        'location' => false,
        'location_effective_date' => false,
        'department' => false,
        'department_effective_date' => false,
        'national_insurance_number' => false,
        'nationality' => false,
        'employment_type' => false,
        'employment_type_effective_date' => false,
        'address' => false,
        'personal_phone_number' => false,
        'payroll_company' => false,
        'payroll_id' => false,
        'time__attendance_id' => false,
        'rota_id' => false,
        'crm_id' => false,
        'ats_id' => false,
        'performance_id' => false,
        'benefits_id' => false,
        'system1_id' => false,
        'system2_id' => false,
        'system3_id' => false,
        'api_column1' => false,
        'api_column2' => false,
        'api_column3' => false,
        'api_column4' => false,
        'api_column5' => false,
        'personal_email' => false,
        'method_of_recruitment' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'api_key' => 'APIKey',
        'action' => 'Action',
        'reason_for_change' => 'ReasonForChange',
        'employee_id' => 'EmployeeId',
        'title' => 'Title',
        'first_name' => 'FirstName',
        'last_name' => 'LastName',
        'email' => 'Email',
        'gender' => 'Gender',
        'date_of_birth' => 'DateOfBirth',
        'start_date' => 'StartDate',
        'reports_to' => 'ReportsTo',
        'reports_to_effective_date' => 'ReportsToEffectiveDate',
        'company' => 'Company',
        'company_effective_date' => 'CompanyEffectiveDate',
        'job_role' => 'JobRole',
        'job_role_effective_date' => 'JobRoleEffectiveDate',
        'location' => 'Location',
        'location_effective_date' => 'LocationEffectiveDate',
        'department' => 'Department',
        'department_effective_date' => 'DepartmentEffectiveDate',
        'national_insurance_number' => 'NationalInsuranceNumber',
        'nationality' => 'Nationality',
        'employment_type' => 'EmploymentType',
        'employment_type_effective_date' => 'EmploymentTypeEffectiveDate',
        'address' => 'Address',
        'personal_phone_number' => 'PersonalPhoneNumber',
        'payroll_company' => 'Payroll Company',
        'payroll_id' => 'Payroll ID',
        'time__attendance_id' => 'Time &amp; Attendance ID',
        'rota_id' => 'Rota ID',
        'crm_id' => 'CRM ID',
        'ats_id' => 'ATS ID',
        'performance_id' => 'Performance ID',
        'benefits_id' => 'Benefits ID',
        'system1_id' => 'System1 ID',
        'system2_id' => 'System2 ID',
        'system3_id' => 'System3 ID',
        'api_column1' => 'APIColumn1',
        'api_column2' => 'APIColumn2',
        'api_column3' => 'APIColumn3',
        'api_column4' => 'APIColumn4',
        'api_column5' => 'APIColumn5',
        'personal_email' => 'PersonalEmail',
        'method_of_recruitment' => 'MethodOfRecruitment'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'api_key' => 'setApiKey',
        'action' => 'setAction',
        'reason_for_change' => 'setReasonForChange',
        'employee_id' => 'setEmployeeId',
        'title' => 'setTitle',
        'first_name' => 'setFirstName',
        'last_name' => 'setLastName',
        'email' => 'setEmail',
        'gender' => 'setGender',
        'date_of_birth' => 'setDateOfBirth',
        'start_date' => 'setStartDate',
        'reports_to' => 'setReportsTo',
        'reports_to_effective_date' => 'setReportsToEffectiveDate',
        'company' => 'setCompany',
        'company_effective_date' => 'setCompanyEffectiveDate',
        'job_role' => 'setJobRole',
        'job_role_effective_date' => 'setJobRoleEffectiveDate',
        'location' => 'setLocation',
        'location_effective_date' => 'setLocationEffectiveDate',
        'department' => 'setDepartment',
        'department_effective_date' => 'setDepartmentEffectiveDate',
        'national_insurance_number' => 'setNationalInsuranceNumber',
        'nationality' => 'setNationality',
        'employment_type' => 'setEmploymentType',
        'employment_type_effective_date' => 'setEmploymentTypeEffectiveDate',
        'address' => 'setAddress',
        'personal_phone_number' => 'setPersonalPhoneNumber',
        'payroll_company' => 'setPayrollCompany',
        'payroll_id' => 'setPayrollId',
        'time__attendance_id' => 'setTimeAttendanceId',
        'rota_id' => 'setRotaId',
        'crm_id' => 'setCrmId',
        'ats_id' => 'setAtsId',
        'performance_id' => 'setPerformanceId',
        'benefits_id' => 'setBenefitsId',
        'system1_id' => 'setSystem1Id',
        'system2_id' => 'setSystem2Id',
        'system3_id' => 'setSystem3Id',
        'api_column1' => 'setApiColumn1',
        'api_column2' => 'setApiColumn2',
        'api_column3' => 'setApiColumn3',
        'api_column4' => 'setApiColumn4',
        'api_column5' => 'setApiColumn5',
        'personal_email' => 'setPersonalEmail',
        'method_of_recruitment' => 'setMethodOfRecruitment'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'api_key' => 'getApiKey',
        'action' => 'getAction',
        'reason_for_change' => 'getReasonForChange',
        'employee_id' => 'getEmployeeId',
        'title' => 'getTitle',
        'first_name' => 'getFirstName',
        'last_name' => 'getLastName',
        'email' => 'getEmail',
        'gender' => 'getGender',
        'date_of_birth' => 'getDateOfBirth',
        'start_date' => 'getStartDate',
        'reports_to' => 'getReportsTo',
        'reports_to_effective_date' => 'getReportsToEffectiveDate',
        'company' => 'getCompany',
        'company_effective_date' => 'getCompanyEffectiveDate',
        'job_role' => 'getJobRole',
        'job_role_effective_date' => 'getJobRoleEffectiveDate',
        'location' => 'getLocation',
        'location_effective_date' => 'getLocationEffectiveDate',
        'department' => 'getDepartment',
        'department_effective_date' => 'getDepartmentEffectiveDate',
        'national_insurance_number' => 'getNationalInsuranceNumber',
        'nationality' => 'getNationality',
        'employment_type' => 'getEmploymentType',
        'employment_type_effective_date' => 'getEmploymentTypeEffectiveDate',
        'address' => 'getAddress',
        'personal_phone_number' => 'getPersonalPhoneNumber',
        'payroll_company' => 'getPayrollCompany',
        'payroll_id' => 'getPayrollId',
        'time__attendance_id' => 'getTimeAttendanceId',
        'rota_id' => 'getRotaId',
        'crm_id' => 'getCrmId',
        'ats_id' => 'getAtsId',
        'performance_id' => 'getPerformanceId',
        'benefits_id' => 'getBenefitsId',
        'system1_id' => 'getSystem1Id',
        'system2_id' => 'getSystem2Id',
        'system3_id' => 'getSystem3Id',
        'api_column1' => 'getApiColumn1',
        'api_column2' => 'getApiColumn2',
        'api_column3' => 'getApiColumn3',
        'api_column4' => 'getApiColumn4',
        'api_column5' => 'getApiColumn5',
        'personal_email' => 'getPersonalEmail',
        'method_of_recruitment' => 'getMethodOfRecruitment'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('api_key', $data ?? [], null);
        $this->setIfExists('action', $data ?? [], null);
        $this->setIfExists('reason_for_change', $data ?? [], null);
        $this->setIfExists('employee_id', $data ?? [], null);
        $this->setIfExists('title', $data ?? [], null);
        $this->setIfExists('first_name', $data ?? [], null);
        $this->setIfExists('last_name', $data ?? [], null);
        $this->setIfExists('email', $data ?? [], null);
        $this->setIfExists('gender', $data ?? [], null);
        $this->setIfExists('date_of_birth', $data ?? [], null);
        $this->setIfExists('start_date', $data ?? [], null);
        $this->setIfExists('reports_to', $data ?? [], null);
        $this->setIfExists('reports_to_effective_date', $data ?? [], null);
        $this->setIfExists('company', $data ?? [], null);
        $this->setIfExists('company_effective_date', $data ?? [], null);
        $this->setIfExists('job_role', $data ?? [], null);
        $this->setIfExists('job_role_effective_date', $data ?? [], null);
        $this->setIfExists('location', $data ?? [], null);
        $this->setIfExists('location_effective_date', $data ?? [], null);
        $this->setIfExists('department', $data ?? [], null);
        $this->setIfExists('department_effective_date', $data ?? [], null);
        $this->setIfExists('national_insurance_number', $data ?? [], null);
        $this->setIfExists('nationality', $data ?? [], null);
        $this->setIfExists('employment_type', $data ?? [], null);
        $this->setIfExists('employment_type_effective_date', $data ?? [], null);
        $this->setIfExists('address', $data ?? [], null);
        $this->setIfExists('personal_phone_number', $data ?? [], null);
        $this->setIfExists('payroll_company', $data ?? [], null);
        $this->setIfExists('payroll_id', $data ?? [], null);
        $this->setIfExists('time__attendance_id', $data ?? [], null);
        $this->setIfExists('rota_id', $data ?? [], null);
        $this->setIfExists('crm_id', $data ?? [], null);
        $this->setIfExists('ats_id', $data ?? [], null);
        $this->setIfExists('performance_id', $data ?? [], null);
        $this->setIfExists('benefits_id', $data ?? [], null);
        $this->setIfExists('system1_id', $data ?? [], null);
        $this->setIfExists('system2_id', $data ?? [], null);
        $this->setIfExists('system3_id', $data ?? [], null);
        $this->setIfExists('api_column1', $data ?? [], null);
        $this->setIfExists('api_column2', $data ?? [], null);
        $this->setIfExists('api_column3', $data ?? [], null);
        $this->setIfExists('api_column4', $data ?? [], null);
        $this->setIfExists('api_column5', $data ?? [], null);
        $this->setIfExists('personal_email', $data ?? [], null);
        $this->setIfExists('method_of_recruitment', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['api_key'] === null) {
            $invalidProperties[] = "'api_key' can't be null";
        }
        if ((mb_strlen($this->container['api_key']) > 50)) {
            $invalidProperties[] = "invalid value for 'api_key', the character length must be smaller than or equal to 50.";
        }

        if ($this->container['action'] === null) {
            $invalidProperties[] = "'action' can't be null";
        }
        if ($this->container['reason_for_change'] === null) {
            $invalidProperties[] = "'reason_for_change' can't be null";
        }
        if ((mb_strlen($this->container['reason_for_change']) > 256)) {
            $invalidProperties[] = "invalid value for 'reason_for_change', the character length must be smaller than or equal to 256.";
        }

        if ($this->container['employee_id'] === null) {
            $invalidProperties[] = "'employee_id' can't be null";
        }
        if ((mb_strlen($this->container['employee_id']) > 15)) {
            $invalidProperties[] = "invalid value for 'employee_id', the character length must be smaller than or equal to 15.";
        }

        if (!is_null($this->container['title']) && (mb_strlen($this->container['title']) > 100)) {
            $invalidProperties[] = "invalid value for 'title', the character length must be smaller than or equal to 100.";
        }

        if ($this->container['first_name'] === null) {
            $invalidProperties[] = "'first_name' can't be null";
        }
        if ((mb_strlen($this->container['first_name']) > 50)) {
            $invalidProperties[] = "invalid value for 'first_name', the character length must be smaller than or equal to 50.";
        }

        if ($this->container['last_name'] === null) {
            $invalidProperties[] = "'last_name' can't be null";
        }
        if ((mb_strlen($this->container['last_name']) > 50)) {
            $invalidProperties[] = "invalid value for 'last_name', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['email']) && (mb_strlen($this->container['email']) > 254)) {
            $invalidProperties[] = "invalid value for 'email', the character length must be smaller than or equal to 254.";
        }

        if ($this->container['gender'] === null) {
            $invalidProperties[] = "'gender' can't be null";
        }
        if ($this->container['start_date'] === null) {
            $invalidProperties[] = "'start_date' can't be null";
        }
        if (!is_null($this->container['reports_to']) && (mb_strlen($this->container['reports_to']) > 256)) {
            $invalidProperties[] = "invalid value for 'reports_to', the character length must be smaller than or equal to 256.";
        }

        if ($this->container['reports_to_effective_date'] === null) {
            $invalidProperties[] = "'reports_to_effective_date' can't be null";
        }
        if (!is_null($this->container['company']) && (mb_strlen($this->container['company']) > 100)) {
            $invalidProperties[] = "invalid value for 'company', the character length must be smaller than or equal to 100.";
        }

        if ($this->container['company_effective_date'] === null) {
            $invalidProperties[] = "'company_effective_date' can't be null";
        }
        if ($this->container['job_role'] === null) {
            $invalidProperties[] = "'job_role' can't be null";
        }
        if ((mb_strlen($this->container['job_role']) > 100)) {
            $invalidProperties[] = "invalid value for 'job_role', the character length must be smaller than or equal to 100.";
        }

        if ($this->container['job_role_effective_date'] === null) {
            $invalidProperties[] = "'job_role_effective_date' can't be null";
        }
        if ($this->container['location'] === null) {
            $invalidProperties[] = "'location' can't be null";
        }
        if ($this->container['location_effective_date'] === null) {
            $invalidProperties[] = "'location_effective_date' can't be null";
        }
        if ($this->container['department'] === null) {
            $invalidProperties[] = "'department' can't be null";
        }
        if ($this->container['department_effective_date'] === null) {
            $invalidProperties[] = "'department_effective_date' can't be null";
        }
        if (!is_null($this->container['national_insurance_number']) && (mb_strlen($this->container['national_insurance_number']) > 30)) {
            $invalidProperties[] = "invalid value for 'national_insurance_number', the character length must be smaller than or equal to 30.";
        }

        if (!is_null($this->container['nationality']) && (mb_strlen($this->container['nationality']) > 100)) {
            $invalidProperties[] = "invalid value for 'nationality', the character length must be smaller than or equal to 100.";
        }

        if (!is_null($this->container['employment_type']) && (mb_strlen($this->container['employment_type']) > 100)) {
            $invalidProperties[] = "invalid value for 'employment_type', the character length must be smaller than or equal to 100.";
        }

        if ($this->container['employment_type_effective_date'] === null) {
            $invalidProperties[] = "'employment_type_effective_date' can't be null";
        }
        if (!is_null($this->container['personal_phone_number']) && (mb_strlen($this->container['personal_phone_number']) > 80)) {
            $invalidProperties[] = "invalid value for 'personal_phone_number', the character length must be smaller than or equal to 80.";
        }

        if (!is_null($this->container['payroll_company']) && (mb_strlen($this->container['payroll_company']) > 200)) {
            $invalidProperties[] = "invalid value for 'payroll_company', the character length must be smaller than or equal to 200.";
        }

        if (!is_null($this->container['payroll_id']) && (mb_strlen($this->container['payroll_id']) > 200)) {
            $invalidProperties[] = "invalid value for 'payroll_id', the character length must be smaller than or equal to 200.";
        }

        if (!is_null($this->container['time__attendance_id']) && (mb_strlen($this->container['time__attendance_id']) > 200)) {
            $invalidProperties[] = "invalid value for 'time__attendance_id', the character length must be smaller than or equal to 200.";
        }

        if (!is_null($this->container['rota_id']) && (mb_strlen($this->container['rota_id']) > 200)) {
            $invalidProperties[] = "invalid value for 'rota_id', the character length must be smaller than or equal to 200.";
        }

        if (!is_null($this->container['crm_id']) && (mb_strlen($this->container['crm_id']) > 200)) {
            $invalidProperties[] = "invalid value for 'crm_id', the character length must be smaller than or equal to 200.";
        }

        if (!is_null($this->container['ats_id']) && (mb_strlen($this->container['ats_id']) > 200)) {
            $invalidProperties[] = "invalid value for 'ats_id', the character length must be smaller than or equal to 200.";
        }

        if (!is_null($this->container['performance_id']) && (mb_strlen($this->container['performance_id']) > 200)) {
            $invalidProperties[] = "invalid value for 'performance_id', the character length must be smaller than or equal to 200.";
        }

        if (!is_null($this->container['benefits_id']) && (mb_strlen($this->container['benefits_id']) > 200)) {
            $invalidProperties[] = "invalid value for 'benefits_id', the character length must be smaller than or equal to 200.";
        }

        if (!is_null($this->container['system1_id']) && (mb_strlen($this->container['system1_id']) > 200)) {
            $invalidProperties[] = "invalid value for 'system1_id', the character length must be smaller than or equal to 200.";
        }

        if (!is_null($this->container['system2_id']) && (mb_strlen($this->container['system2_id']) > 200)) {
            $invalidProperties[] = "invalid value for 'system2_id', the character length must be smaller than or equal to 200.";
        }

        if (!is_null($this->container['system3_id']) && (mb_strlen($this->container['system3_id']) > 200)) {
            $invalidProperties[] = "invalid value for 'system3_id', the character length must be smaller than or equal to 200.";
        }

        if (!is_null($this->container['personal_email']) && (mb_strlen($this->container['personal_email']) > 254)) {
            $invalidProperties[] = "invalid value for 'personal_email', the character length must be smaller than or equal to 254.";
        }

        if (!is_null($this->container['method_of_recruitment']) && (mb_strlen($this->container['method_of_recruitment']) > 512)) {
            $invalidProperties[] = "invalid value for 'method_of_recruitment', the character length must be smaller than or equal to 512.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets api_key
     *
     * @return string
     */
    public function getApiKey()
    {
        return $this->container['api_key'];
    }

    /**
     * Sets api_key
     *
     * @param string $api_key APIKey for employee api to updateEmployeeId
     *
     * @return self
     */
    public function setApiKey($api_key)
    {
        if (is_null($api_key)) {
            throw new \InvalidArgumentException('non-nullable api_key cannot be null');
        }
        if ((mb_strlen($api_key) > 50)) {
            throw new \InvalidArgumentException('invalid length for $api_key when calling UpdateEmployeeDetail3., must be smaller than or equal to 50.');
        }

        $this->container['api_key'] = $api_key;

        return $this;
    }

    /**
     * Gets action
     *
     * @return string
     */
    public function getAction()
    {
        return $this->container['action'];
    }

    /**
     * Sets action
     *
     * @param string $action Action name = UpdateEmployeeDetail
     *
     * @return self
     */
    public function setAction($action)
    {
        if (is_null($action)) {
            throw new \InvalidArgumentException('non-nullable action cannot be null');
        }
        $this->container['action'] = $action;

        return $this;
    }

    /**
     * Gets reason_for_change
     *
     * @return string
     */
    public function getReasonForChange()
    {
        return $this->container['reason_for_change'];
    }

    /**
     * Sets reason_for_change
     *
     * @param string $reason_for_change Reason for change employee id
     *
     * @return self
     */
    public function setReasonForChange($reason_for_change)
    {
        if (is_null($reason_for_change)) {
            throw new \InvalidArgumentException('non-nullable reason_for_change cannot be null');
        }
        if ((mb_strlen($reason_for_change) > 256)) {
            throw new \InvalidArgumentException('invalid length for $reason_for_change when calling UpdateEmployeeDetail3., must be smaller than or equal to 256.');
        }

        $this->container['reason_for_change'] = $reason_for_change;

        return $this;
    }

    /**
     * Gets employee_id
     *
     * @return string
     */
    public function getEmployeeId()
    {
        return $this->container['employee_id'];
    }

    /**
     * Sets employee_id
     *
     * @param string $employee_id Employee id for update employee data
     *
     * @return self
     */
    public function setEmployeeId($employee_id)
    {
        if (is_null($employee_id)) {
            throw new \InvalidArgumentException('non-nullable employee_id cannot be null');
        }
        if ((mb_strlen($employee_id) > 15)) {
            throw new \InvalidArgumentException('invalid length for $employee_id when calling UpdateEmployeeDetail3., must be smaller than or equal to 15.');
        }

        $this->container['employee_id'] = $employee_id;

        return $this;
    }

    /**
     * Gets title
     *
     * @return string|null
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string|null $title Title for update employee data
     *
     * @return self
     */
    public function setTitle($title)
    {
        if (is_null($title)) {
            throw new \InvalidArgumentException('non-nullable title cannot be null');
        }
        if ((mb_strlen($title) > 100)) {
            throw new \InvalidArgumentException('invalid length for $title when calling UpdateEmployeeDetail3., must be smaller than or equal to 100.');
        }

        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets first_name
     *
     * @return string
     */
    public function getFirstName()
    {
        return $this->container['first_name'];
    }

    /**
     * Sets first_name
     *
     * @param string $first_name FirstName for update employee data
     *
     * @return self
     */
    public function setFirstName($first_name)
    {
        if (is_null($first_name)) {
            throw new \InvalidArgumentException('non-nullable first_name cannot be null');
        }
        if ((mb_strlen($first_name) > 50)) {
            throw new \InvalidArgumentException('invalid length for $first_name when calling UpdateEmployeeDetail3., must be smaller than or equal to 50.');
        }

        $this->container['first_name'] = $first_name;

        return $this;
    }

    /**
     * Gets last_name
     *
     * @return string
     */
    public function getLastName()
    {
        return $this->container['last_name'];
    }

    /**
     * Sets last_name
     *
     * @param string $last_name LastName for update employee data
     *
     * @return self
     */
    public function setLastName($last_name)
    {
        if (is_null($last_name)) {
            throw new \InvalidArgumentException('non-nullable last_name cannot be null');
        }
        if ((mb_strlen($last_name) > 50)) {
            throw new \InvalidArgumentException('invalid length for $last_name when calling UpdateEmployeeDetail3., must be smaller than or equal to 50.');
        }

        $this->container['last_name'] = $last_name;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string|null
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string|null $email Email for update employee data
     *
     * @return self
     */
    public function setEmail($email)
    {
        if (is_null($email)) {
            throw new \InvalidArgumentException('non-nullable email cannot be null');
        }
        if ((mb_strlen($email) > 254)) {
            throw new \InvalidArgumentException('invalid length for $email when calling UpdateEmployeeDetail3., must be smaller than or equal to 254.');
        }

        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets gender
     *
     * @return \PeopleHR\Model\Gender
     */
    public function getGender()
    {
        return $this->container['gender'];
    }

    /**
     * Sets gender
     *
     * @param \PeopleHR\Model\Gender $gender Gender value for update employee data
     *
     * @return self
     */
    public function setGender($gender)
    {
        if (is_null($gender)) {
            throw new \InvalidArgumentException('non-nullable gender cannot be null');
        }
        $this->container['gender'] = $gender;

        return $this;
    }

    /**
     * Gets date_of_birth
     *
     * @return \DateTime|null
     */
    public function getDateOfBirth()
    {
        return $this->container['date_of_birth'];
    }

    /**
     * Sets date_of_birth
     *
     * @param \DateTime|null $date_of_birth Date of birth for update employee data
     *
     * @return self
     */
    public function setDateOfBirth($date_of_birth)
    {
        if (is_null($date_of_birth)) {
            throw new \InvalidArgumentException('non-nullable date_of_birth cannot be null');
        }
        $this->container['date_of_birth'] = $date_of_birth;

        return $this;
    }

    /**
     * Gets start_date
     *
     * @return \DateTime
     */
    public function getStartDate()
    {
        return $this->container['start_date'];
    }

    /**
     * Sets start_date
     *
     * @param \DateTime $start_date Start date for update employee data
     *
     * @return self
     */
    public function setStartDate($start_date)
    {
        if (is_null($start_date)) {
            throw new \InvalidArgumentException('non-nullable start_date cannot be null');
        }
        $this->container['start_date'] = $start_date;

        return $this;
    }

    /**
     * Gets reports_to
     *
     * @return string|null
     */
    public function getReportsTo()
    {
        return $this->container['reports_to'];
    }

    /**
     * Sets reports_to
     *
     * @param string|null $reports_to Reports To for update employee data
     *
     * @return self
     */
    public function setReportsTo($reports_to)
    {
        if (is_null($reports_to)) {
            throw new \InvalidArgumentException('non-nullable reports_to cannot be null');
        }
        if ((mb_strlen($reports_to) > 256)) {
            throw new \InvalidArgumentException('invalid length for $reports_to when calling UpdateEmployeeDetail3., must be smaller than or equal to 256.');
        }

        $this->container['reports_to'] = $reports_to;

        return $this;
    }

    /**
     * Gets reports_to_effective_date
     *
     * @return \DateTime
     */
    public function getReportsToEffectiveDate()
    {
        return $this->container['reports_to_effective_date'];
    }

    /**
     * Sets reports_to_effective_date
     *
     * @param \DateTime $reports_to_effective_date Reports to effective date for update employee data
     *
     * @return self
     */
    public function setReportsToEffectiveDate($reports_to_effective_date)
    {
        if (is_null($reports_to_effective_date)) {
            throw new \InvalidArgumentException('non-nullable reports_to_effective_date cannot be null');
        }
        $this->container['reports_to_effective_date'] = $reports_to_effective_date;

        return $this;
    }

    /**
     * Gets company
     *
     * @return string|null
     */
    public function getCompany()
    {
        return $this->container['company'];
    }

    /**
     * Sets company
     *
     * @param string|null $company Company name for update employee data
     *
     * @return self
     */
    public function setCompany($company)
    {
        if (is_null($company)) {
            throw new \InvalidArgumentException('non-nullable company cannot be null');
        }
        if ((mb_strlen($company) > 100)) {
            throw new \InvalidArgumentException('invalid length for $company when calling UpdateEmployeeDetail3., must be smaller than or equal to 100.');
        }

        $this->container['company'] = $company;

        return $this;
    }

    /**
     * Gets company_effective_date
     *
     * @return \DateTime
     */
    public function getCompanyEffectiveDate()
    {
        return $this->container['company_effective_date'];
    }

    /**
     * Sets company_effective_date
     *
     * @param \DateTime $company_effective_date Company effective date for update employee data
     *
     * @return self
     */
    public function setCompanyEffectiveDate($company_effective_date)
    {
        if (is_null($company_effective_date)) {
            throw new \InvalidArgumentException('non-nullable company_effective_date cannot be null');
        }
        $this->container['company_effective_date'] = $company_effective_date;

        return $this;
    }

    /**
     * Gets job_role
     *
     * @return string
     */
    public function getJobRole()
    {
        return $this->container['job_role'];
    }

    /**
     * Sets job_role
     *
     * @param string $job_role Job role for update employee data
     *
     * @return self
     */
    public function setJobRole($job_role)
    {
        if (is_null($job_role)) {
            throw new \InvalidArgumentException('non-nullable job_role cannot be null');
        }
        if ((mb_strlen($job_role) > 100)) {
            throw new \InvalidArgumentException('invalid length for $job_role when calling UpdateEmployeeDetail3., must be smaller than or equal to 100.');
        }

        $this->container['job_role'] = $job_role;

        return $this;
    }

    /**
     * Gets job_role_effective_date
     *
     * @return \DateTime
     */
    public function getJobRoleEffectiveDate()
    {
        return $this->container['job_role_effective_date'];
    }

    /**
     * Sets job_role_effective_date
     *
     * @param \DateTime $job_role_effective_date Job role effective date for update employee data
     *
     * @return self
     */
    public function setJobRoleEffectiveDate($job_role_effective_date)
    {
        if (is_null($job_role_effective_date)) {
            throw new \InvalidArgumentException('non-nullable job_role_effective_date cannot be null');
        }
        $this->container['job_role_effective_date'] = $job_role_effective_date;

        return $this;
    }

    /**
     * Gets location
     *
     * @return string
     */
    public function getLocation()
    {
        return $this->container['location'];
    }

    /**
     * Sets location
     *
     * @param string $location Location for update employee data
     *
     * @return self
     */
    public function setLocation($location)
    {
        if (is_null($location)) {
            throw new \InvalidArgumentException('non-nullable location cannot be null');
        }
        $this->container['location'] = $location;

        return $this;
    }

    /**
     * Gets location_effective_date
     *
     * @return \DateTime
     */
    public function getLocationEffectiveDate()
    {
        return $this->container['location_effective_date'];
    }

    /**
     * Sets location_effective_date
     *
     * @param \DateTime $location_effective_date Location effective date for update employee data
     *
     * @return self
     */
    public function setLocationEffectiveDate($location_effective_date)
    {
        if (is_null($location_effective_date)) {
            throw new \InvalidArgumentException('non-nullable location_effective_date cannot be null');
        }
        $this->container['location_effective_date'] = $location_effective_date;

        return $this;
    }

    /**
     * Gets department
     *
     * @return string
     */
    public function getDepartment()
    {
        return $this->container['department'];
    }

    /**
     * Sets department
     *
     * @param string $department Department for update employee data
     *
     * @return self
     */
    public function setDepartment($department)
    {
        if (is_null($department)) {
            throw new \InvalidArgumentException('non-nullable department cannot be null');
        }
        $this->container['department'] = $department;

        return $this;
    }

    /**
     * Gets department_effective_date
     *
     * @return \DateTime
     */
    public function getDepartmentEffectiveDate()
    {
        return $this->container['department_effective_date'];
    }

    /**
     * Sets department_effective_date
     *
     * @param \DateTime $department_effective_date Department effective date for update employee data
     *
     * @return self
     */
    public function setDepartmentEffectiveDate($department_effective_date)
    {
        if (is_null($department_effective_date)) {
            throw new \InvalidArgumentException('non-nullable department_effective_date cannot be null');
        }
        $this->container['department_effective_date'] = $department_effective_date;

        return $this;
    }

    /**
     * Gets national_insurance_number
     *
     * @return string|null
     */
    public function getNationalInsuranceNumber()
    {
        return $this->container['national_insurance_number'];
    }

    /**
     * Sets national_insurance_number
     *
     * @param string|null $national_insurance_number National insurance number for update employee data
     *
     * @return self
     */
    public function setNationalInsuranceNumber($national_insurance_number)
    {
        if (is_null($national_insurance_number)) {
            throw new \InvalidArgumentException('non-nullable national_insurance_number cannot be null');
        }
        if ((mb_strlen($national_insurance_number) > 30)) {
            throw new \InvalidArgumentException('invalid length for $national_insurance_number when calling UpdateEmployeeDetail3., must be smaller than or equal to 30.');
        }

        $this->container['national_insurance_number'] = $national_insurance_number;

        return $this;
    }

    /**
     * Gets nationality
     *
     * @return string|null
     */
    public function getNationality()
    {
        return $this->container['nationality'];
    }

    /**
     * Sets nationality
     *
     * @param string|null $nationality Nationality for update employee data
     *
     * @return self
     */
    public function setNationality($nationality)
    {
        if (is_null($nationality)) {
            throw new \InvalidArgumentException('non-nullable nationality cannot be null');
        }
        if ((mb_strlen($nationality) > 100)) {
            throw new \InvalidArgumentException('invalid length for $nationality when calling UpdateEmployeeDetail3., must be smaller than or equal to 100.');
        }

        $this->container['nationality'] = $nationality;

        return $this;
    }

    /**
     * Gets employment_type
     *
     * @return string|null
     */
    public function getEmploymentType()
    {
        return $this->container['employment_type'];
    }

    /**
     * Sets employment_type
     *
     * @param string|null $employment_type Employment type for update employee data
     *
     * @return self
     */
    public function setEmploymentType($employment_type)
    {
        if (is_null($employment_type)) {
            throw new \InvalidArgumentException('non-nullable employment_type cannot be null');
        }
        if ((mb_strlen($employment_type) > 100)) {
            throw new \InvalidArgumentException('invalid length for $employment_type when calling UpdateEmployeeDetail3., must be smaller than or equal to 100.');
        }

        $this->container['employment_type'] = $employment_type;

        return $this;
    }

    /**
     * Gets employment_type_effective_date
     *
     * @return \DateTime
     */
    public function getEmploymentTypeEffectiveDate()
    {
        return $this->container['employment_type_effective_date'];
    }

    /**
     * Sets employment_type_effective_date
     *
     * @param \DateTime $employment_type_effective_date Employment type effective date for update employee data
     *
     * @return self
     */
    public function setEmploymentTypeEffectiveDate($employment_type_effective_date)
    {
        if (is_null($employment_type_effective_date)) {
            throw new \InvalidArgumentException('non-nullable employment_type_effective_date cannot be null');
        }
        $this->container['employment_type_effective_date'] = $employment_type_effective_date;

        return $this;
    }

    /**
     * Gets address
     *
     * @return string|null
     */
    public function getAddress()
    {
        return $this->container['address'];
    }

    /**
     * Sets address
     *
     * @param string|null $address Address for update employee data
     *
     * @return self
     */
    public function setAddress($address)
    {
        if (is_null($address)) {
            throw new \InvalidArgumentException('non-nullable address cannot be null');
        }
        $this->container['address'] = $address;

        return $this;
    }

    /**
     * Gets personal_phone_number
     *
     * @return string|null
     */
    public function getPersonalPhoneNumber()
    {
        return $this->container['personal_phone_number'];
    }

    /**
     * Sets personal_phone_number
     *
     * @param string|null $personal_phone_number PersonalPhoneNumber for update employee data
     *
     * @return self
     */
    public function setPersonalPhoneNumber($personal_phone_number)
    {
        if (is_null($personal_phone_number)) {
            throw new \InvalidArgumentException('non-nullable personal_phone_number cannot be null');
        }
        if ((mb_strlen($personal_phone_number) > 80)) {
            throw new \InvalidArgumentException('invalid length for $personal_phone_number when calling UpdateEmployeeDetail3., must be smaller than or equal to 80.');
        }

        $this->container['personal_phone_number'] = $personal_phone_number;

        return $this;
    }

    /**
     * Gets payroll_company
     *
     * @return string|null
     */
    public function getPayrollCompany()
    {
        return $this->container['payroll_company'];
    }

    /**
     * Sets payroll_company
     *
     * @param string|null $payroll_company Payroll company for update employee data
     *
     * @return self
     */
    public function setPayrollCompany($payroll_company)
    {
        if (is_null($payroll_company)) {
            throw new \InvalidArgumentException('non-nullable payroll_company cannot be null');
        }
        if ((mb_strlen($payroll_company) > 200)) {
            throw new \InvalidArgumentException('invalid length for $payroll_company when calling UpdateEmployeeDetail3., must be smaller than or equal to 200.');
        }

        $this->container['payroll_company'] = $payroll_company;

        return $this;
    }

    /**
     * Gets payroll_id
     *
     * @return string|null
     */
    public function getPayrollId()
    {
        return $this->container['payroll_id'];
    }

    /**
     * Sets payroll_id
     *
     * @param string|null $payroll_id Payroll id for update employee data
     *
     * @return self
     */
    public function setPayrollId($payroll_id)
    {
        if (is_null($payroll_id)) {
            throw new \InvalidArgumentException('non-nullable payroll_id cannot be null');
        }
        if ((mb_strlen($payroll_id) > 200)) {
            throw new \InvalidArgumentException('invalid length for $payroll_id when calling UpdateEmployeeDetail3., must be smaller than or equal to 200.');
        }

        $this->container['payroll_id'] = $payroll_id;

        return $this;
    }

    /**
     * Gets time__attendance_id
     *
     * @return string|null
     */
    public function getTimeAttendanceId()
    {
        return $this->container['time__attendance_id'];
    }

    /**
     * Sets time__attendance_id
     *
     * @param string|null $time__attendance_id Time & attendance id for update employee data
     *
     * @return self
     */
    public function setTimeAttendanceId($time__attendance_id)
    {
        if (is_null($time__attendance_id)) {
            throw new \InvalidArgumentException('non-nullable time__attendance_id cannot be null');
        }
        if ((mb_strlen($time__attendance_id) > 200)) {
            throw new \InvalidArgumentException('invalid length for $time__attendance_id when calling UpdateEmployeeDetail3., must be smaller than or equal to 200.');
        }

        $this->container['time__attendance_id'] = $time__attendance_id;

        return $this;
    }

    /**
     * Gets rota_id
     *
     * @return string|null
     */
    public function getRotaId()
    {
        return $this->container['rota_id'];
    }

    /**
     * Sets rota_id
     *
     * @param string|null $rota_id Rota id for update employee data
     *
     * @return self
     */
    public function setRotaId($rota_id)
    {
        if (is_null($rota_id)) {
            throw new \InvalidArgumentException('non-nullable rota_id cannot be null');
        }
        if ((mb_strlen($rota_id) > 200)) {
            throw new \InvalidArgumentException('invalid length for $rota_id when calling UpdateEmployeeDetail3., must be smaller than or equal to 200.');
        }

        $this->container['rota_id'] = $rota_id;

        return $this;
    }

    /**
     * Gets crm_id
     *
     * @return string|null
     */
    public function getCrmId()
    {
        return $this->container['crm_id'];
    }

    /**
     * Sets crm_id
     *
     * @param string|null $crm_id CRM id for update employee data
     *
     * @return self
     */
    public function setCrmId($crm_id)
    {
        if (is_null($crm_id)) {
            throw new \InvalidArgumentException('non-nullable crm_id cannot be null');
        }
        if ((mb_strlen($crm_id) > 200)) {
            throw new \InvalidArgumentException('invalid length for $crm_id when calling UpdateEmployeeDetail3., must be smaller than or equal to 200.');
        }

        $this->container['crm_id'] = $crm_id;

        return $this;
    }

    /**
     * Gets ats_id
     *
     * @return string|null
     */
    public function getAtsId()
    {
        return $this->container['ats_id'];
    }

    /**
     * Sets ats_id
     *
     * @param string|null $ats_id ATS id for update employee data
     *
     * @return self
     */
    public function setAtsId($ats_id)
    {
        if (is_null($ats_id)) {
            throw new \InvalidArgumentException('non-nullable ats_id cannot be null');
        }
        if ((mb_strlen($ats_id) > 200)) {
            throw new \InvalidArgumentException('invalid length for $ats_id when calling UpdateEmployeeDetail3., must be smaller than or equal to 200.');
        }

        $this->container['ats_id'] = $ats_id;

        return $this;
    }

    /**
     * Gets performance_id
     *
     * @return string|null
     */
    public function getPerformanceId()
    {
        return $this->container['performance_id'];
    }

    /**
     * Sets performance_id
     *
     * @param string|null $performance_id Performance id for update employee data
     *
     * @return self
     */
    public function setPerformanceId($performance_id)
    {
        if (is_null($performance_id)) {
            throw new \InvalidArgumentException('non-nullable performance_id cannot be null');
        }
        if ((mb_strlen($performance_id) > 200)) {
            throw new \InvalidArgumentException('invalid length for $performance_id when calling UpdateEmployeeDetail3., must be smaller than or equal to 200.');
        }

        $this->container['performance_id'] = $performance_id;

        return $this;
    }

    /**
     * Gets benefits_id
     *
     * @return string|null
     */
    public function getBenefitsId()
    {
        return $this->container['benefits_id'];
    }

    /**
     * Sets benefits_id
     *
     * @param string|null $benefits_id Benefits id for update employee data
     *
     * @return self
     */
    public function setBenefitsId($benefits_id)
    {
        if (is_null($benefits_id)) {
            throw new \InvalidArgumentException('non-nullable benefits_id cannot be null');
        }
        if ((mb_strlen($benefits_id) > 200)) {
            throw new \InvalidArgumentException('invalid length for $benefits_id when calling UpdateEmployeeDetail3., must be smaller than or equal to 200.');
        }

        $this->container['benefits_id'] = $benefits_id;

        return $this;
    }

    /**
     * Gets system1_id
     *
     * @return string|null
     */
    public function getSystem1Id()
    {
        return $this->container['system1_id'];
    }

    /**
     * Sets system1_id
     *
     * @param string|null $system1_id System1 id for update employee data
     *
     * @return self
     */
    public function setSystem1Id($system1_id)
    {
        if (is_null($system1_id)) {
            throw new \InvalidArgumentException('non-nullable system1_id cannot be null');
        }
        if ((mb_strlen($system1_id) > 200)) {
            throw new \InvalidArgumentException('invalid length for $system1_id when calling UpdateEmployeeDetail3., must be smaller than or equal to 200.');
        }

        $this->container['system1_id'] = $system1_id;

        return $this;
    }

    /**
     * Gets system2_id
     *
     * @return string|null
     */
    public function getSystem2Id()
    {
        return $this->container['system2_id'];
    }

    /**
     * Sets system2_id
     *
     * @param string|null $system2_id System2 id for update employee data
     *
     * @return self
     */
    public function setSystem2Id($system2_id)
    {
        if (is_null($system2_id)) {
            throw new \InvalidArgumentException('non-nullable system2_id cannot be null');
        }
        if ((mb_strlen($system2_id) > 200)) {
            throw new \InvalidArgumentException('invalid length for $system2_id when calling UpdateEmployeeDetail3., must be smaller than or equal to 200.');
        }

        $this->container['system2_id'] = $system2_id;

        return $this;
    }

    /**
     * Gets system3_id
     *
     * @return string|null
     */
    public function getSystem3Id()
    {
        return $this->container['system3_id'];
    }

    /**
     * Sets system3_id
     *
     * @param string|null $system3_id System3 id for update employee data
     *
     * @return self
     */
    public function setSystem3Id($system3_id)
    {
        if (is_null($system3_id)) {
            throw new \InvalidArgumentException('non-nullable system3_id cannot be null');
        }
        if ((mb_strlen($system3_id) > 200)) {
            throw new \InvalidArgumentException('invalid length for $system3_id when calling UpdateEmployeeDetail3., must be smaller than or equal to 200.');
        }

        $this->container['system3_id'] = $system3_id;

        return $this;
    }

    /**
     * Gets api_column1
     *
     * @return string|null
     */
    public function getApiColumn1()
    {
        return $this->container['api_column1'];
    }

    /**
     * Sets api_column1
     *
     * @param string|null $api_column1 API column 1 for update employee data
     *
     * @return self
     */
    public function setApiColumn1($api_column1)
    {
        if (is_null($api_column1)) {
            throw new \InvalidArgumentException('non-nullable api_column1 cannot be null');
        }
        $this->container['api_column1'] = $api_column1;

        return $this;
    }

    /**
     * Gets api_column2
     *
     * @return string|null
     */
    public function getApiColumn2()
    {
        return $this->container['api_column2'];
    }

    /**
     * Sets api_column2
     *
     * @param string|null $api_column2 API column 2 for update employee data
     *
     * @return self
     */
    public function setApiColumn2($api_column2)
    {
        if (is_null($api_column2)) {
            throw new \InvalidArgumentException('non-nullable api_column2 cannot be null');
        }
        $this->container['api_column2'] = $api_column2;

        return $this;
    }

    /**
     * Gets api_column3
     *
     * @return string|null
     */
    public function getApiColumn3()
    {
        return $this->container['api_column3'];
    }

    /**
     * Sets api_column3
     *
     * @param string|null $api_column3 API column 3 for update employee data
     *
     * @return self
     */
    public function setApiColumn3($api_column3)
    {
        if (is_null($api_column3)) {
            throw new \InvalidArgumentException('non-nullable api_column3 cannot be null');
        }
        $this->container['api_column3'] = $api_column3;

        return $this;
    }

    /**
     * Gets api_column4
     *
     * @return string|null
     */
    public function getApiColumn4()
    {
        return $this->container['api_column4'];
    }

    /**
     * Sets api_column4
     *
     * @param string|null $api_column4 API column 4 for update employee data
     *
     * @return self
     */
    public function setApiColumn4($api_column4)
    {
        if (is_null($api_column4)) {
            throw new \InvalidArgumentException('non-nullable api_column4 cannot be null');
        }
        $this->container['api_column4'] = $api_column4;

        return $this;
    }

    /**
     * Gets api_column5
     *
     * @return string|null
     */
    public function getApiColumn5()
    {
        return $this->container['api_column5'];
    }

    /**
     * Sets api_column5
     *
     * @param string|null $api_column5 API column 5 for update employee data
     *
     * @return self
     */
    public function setApiColumn5($api_column5)
    {
        if (is_null($api_column5)) {
            throw new \InvalidArgumentException('non-nullable api_column5 cannot be null');
        }
        $this->container['api_column5'] = $api_column5;

        return $this;
    }

    /**
     * Gets personal_email
     *
     * @return string|null
     */
    public function getPersonalEmail()
    {
        return $this->container['personal_email'];
    }

    /**
     * Sets personal_email
     *
     * @param string|null $personal_email Personal email for update employee data
     *
     * @return self
     */
    public function setPersonalEmail($personal_email)
    {
        if (is_null($personal_email)) {
            throw new \InvalidArgumentException('non-nullable personal_email cannot be null');
        }
        if ((mb_strlen($personal_email) > 254)) {
            throw new \InvalidArgumentException('invalid length for $personal_email when calling UpdateEmployeeDetail3., must be smaller than or equal to 254.');
        }

        $this->container['personal_email'] = $personal_email;

        return $this;
    }

    /**
     * Gets method_of_recruitment
     *
     * @return string|null
     */
    public function getMethodOfRecruitment()
    {
        return $this->container['method_of_recruitment'];
    }

    /**
     * Sets method_of_recruitment
     *
     * @param string|null $method_of_recruitment Method of recruitment for update employee data
     *
     * @return self
     */
    public function setMethodOfRecruitment($method_of_recruitment)
    {
        if (is_null($method_of_recruitment)) {
            throw new \InvalidArgumentException('non-nullable method_of_recruitment cannot be null');
        }
        if ((mb_strlen($method_of_recruitment) > 512)) {
            throw new \InvalidArgumentException('invalid length for $method_of_recruitment when calling UpdateEmployeeDetail3., must be smaller than or equal to 512.');
        }

        $this->container['method_of_recruitment'] = $method_of_recruitment;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}



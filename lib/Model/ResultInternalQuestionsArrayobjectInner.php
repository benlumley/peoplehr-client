<?php
/**
 * ResultInternalQuestionsArrayobjectInner
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  PeopleHR
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * PeopleHR API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.1
 * Contact: customerservices@peoplehr.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.10.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace PeopleHR\Model;

use \ArrayAccess;
use \PeopleHR\ObjectSerializer;

/**
 * ResultInternalQuestionsArrayobjectInner Class Doc Comment
 *
 * @category Class
 * @package  PeopleHR
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ResultInternalQuestionsArrayobjectInner implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ResultInternalQuestionsArrayobject_inner';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'question_id' => 'string',
        'question_type' => 'string',
        'is_mandatory' => 'bool',
        'question' => 'string',
        'additional_or_internal_type' => 'int',
        'question_options' => '\PeopleHR\Model\ResultlstInternalQuestionsInner[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'question_id' => null,
        'question_type' => null,
        'is_mandatory' => null,
        'question' => null,
        'additional_or_internal_type' => null,
        'question_options' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'question_id' => false,
        'question_type' => false,
        'is_mandatory' => false,
        'question' => false,
        'additional_or_internal_type' => false,
        'question_options' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'question_id' => 'QuestionId',
        'question_type' => 'QuestionType',
        'is_mandatory' => 'IsMandatory',
        'question' => 'Question',
        'additional_or_internal_type' => 'AdditionalOrInternalType',
        'question_options' => 'QuestionOptions'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'question_id' => 'setQuestionId',
        'question_type' => 'setQuestionType',
        'is_mandatory' => 'setIsMandatory',
        'question' => 'setQuestion',
        'additional_or_internal_type' => 'setAdditionalOrInternalType',
        'question_options' => 'setQuestionOptions'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'question_id' => 'getQuestionId',
        'question_type' => 'getQuestionType',
        'is_mandatory' => 'getIsMandatory',
        'question' => 'getQuestion',
        'additional_or_internal_type' => 'getAdditionalOrInternalType',
        'question_options' => 'getQuestionOptions'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('question_id', $data ?? [], null);
        $this->setIfExists('question_type', $data ?? [], null);
        $this->setIfExists('is_mandatory', $data ?? [], null);
        $this->setIfExists('question', $data ?? [], null);
        $this->setIfExists('additional_or_internal_type', $data ?? [], null);
        $this->setIfExists('question_options', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets question_id
     *
     * @return string|null
     */
    public function getQuestionId()
    {
        return $this->container['question_id'];
    }

    /**
     * Sets question_id
     *
     * @param string|null $question_id Question id value
     *
     * @return self
     */
    public function setQuestionId($question_id)
    {
        if (is_null($question_id)) {
            throw new \InvalidArgumentException('non-nullable question_id cannot be null');
        }
        $this->container['question_id'] = $question_id;

        return $this;
    }

    /**
     * Gets question_type
     *
     * @return string|null
     */
    public function getQuestionType()
    {
        return $this->container['question_type'];
    }

    /**
     * Sets question_type
     *
     * @param string|null $question_type Question type value
     *
     * @return self
     */
    public function setQuestionType($question_type)
    {
        if (is_null($question_type)) {
            throw new \InvalidArgumentException('non-nullable question_type cannot be null');
        }
        $this->container['question_type'] = $question_type;

        return $this;
    }

    /**
     * Gets is_mandatory
     *
     * @return bool|null
     */
    public function getIsMandatory()
    {
        return $this->container['is_mandatory'];
    }

    /**
     * Sets is_mandatory
     *
     * @param bool|null $is_mandatory Is mandatory type value
     *
     * @return self
     */
    public function setIsMandatory($is_mandatory)
    {
        if (is_null($is_mandatory)) {
            throw new \InvalidArgumentException('non-nullable is_mandatory cannot be null');
        }
        $this->container['is_mandatory'] = $is_mandatory;

        return $this;
    }

    /**
     * Gets question
     *
     * @return string|null
     */
    public function getQuestion()
    {
        return $this->container['question'];
    }

    /**
     * Sets question
     *
     * @param string|null $question Question type value
     *
     * @return self
     */
    public function setQuestion($question)
    {
        if (is_null($question)) {
            throw new \InvalidArgumentException('non-nullable question cannot be null');
        }
        $this->container['question'] = $question;

        return $this;
    }

    /**
     * Gets additional_or_internal_type
     *
     * @return int|null
     */
    public function getAdditionalOrInternalType()
    {
        return $this->container['additional_or_internal_type'];
    }

    /**
     * Sets additional_or_internal_type
     *
     * @param int|null $additional_or_internal_type Additional or internal type value
     *
     * @return self
     */
    public function setAdditionalOrInternalType($additional_or_internal_type)
    {
        if (is_null($additional_or_internal_type)) {
            throw new \InvalidArgumentException('non-nullable additional_or_internal_type cannot be null');
        }
        $this->container['additional_or_internal_type'] = $additional_or_internal_type;

        return $this;
    }

    /**
     * Gets question_options
     *
     * @return \PeopleHR\Model\ResultlstInternalQuestionsInner[]|null
     */
    public function getQuestionOptions()
    {
        return $this->container['question_options'];
    }

    /**
     * Sets question_options
     *
     * @param \PeopleHR\Model\ResultlstInternalQuestionsInner[]|null $question_options Question options list value
     *
     * @return self
     */
    public function setQuestionOptions($question_options)
    {
        if (is_null($question_options)) {
            throw new \InvalidArgumentException('non-nullable question_options cannot be null');
        }
        $this->container['question_options'] = $question_options;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}



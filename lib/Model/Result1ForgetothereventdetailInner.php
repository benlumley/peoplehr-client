<?php
/**
 * Result1ForgetothereventdetailInner
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  PeopleHR
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * PeopleHR API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.1
 * Contact: customerservices@peoplehr.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.10.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace PeopleHR\Model;

use \ArrayAccess;
use \PeopleHR\ObjectSerializer;

/**
 * Result1ForgetothereventdetailInner Class Doc Comment
 *
 * @category Class
 * @package  PeopleHR
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Result1ForgetothereventdetailInner implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Result1Forgetothereventdetail_inner';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'other_leave_txn_id' => 'int',
        'start_date' => '\DateTime',
        'end_date' => '\DateTime',
        'duration_type' => 'int',
        'duration_in_days' => 'int',
        'duration_in_minutes' => 'int',
        'start_time' => 'string',
        'end_time' => 'string',
        'duration_in_days_this_period' => 'int',
        'duration_in_minutes_this_period' => 'int',
        'requester_comments' => 'string',
        'approver_comments' => 'string',
        'approver' => 'string',
        'reason' => 'string',
        'status' => 'string',
        'last_action_date_time' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'other_leave_txn_id' => null,
        'start_date' => 'date',
        'end_date' => 'date',
        'duration_type' => null,
        'duration_in_days' => 'decimal',
        'duration_in_minutes' => null,
        'start_time' => 'timespan',
        'end_time' => 'timespan',
        'duration_in_days_this_period' => 'decimal',
        'duration_in_minutes_this_period' => null,
        'requester_comments' => null,
        'approver_comments' => null,
        'approver' => null,
        'reason' => null,
        'status' => null,
        'last_action_date_time' => 'datetime'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'other_leave_txn_id' => false,
        'start_date' => false,
        'end_date' => false,
        'duration_type' => false,
        'duration_in_days' => false,
        'duration_in_minutes' => false,
        'start_time' => false,
        'end_time' => false,
        'duration_in_days_this_period' => false,
        'duration_in_minutes_this_period' => false,
        'requester_comments' => false,
        'approver_comments' => false,
        'approver' => false,
        'reason' => false,
        'status' => false,
        'last_action_date_time' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'other_leave_txn_id' => 'OtherLeaveTxnId',
        'start_date' => 'StartDate',
        'end_date' => 'EndDate',
        'duration_type' => 'DurationType',
        'duration_in_days' => 'DurationInDays',
        'duration_in_minutes' => 'DurationInMinutes',
        'start_time' => 'StartTime',
        'end_time' => 'EndTime',
        'duration_in_days_this_period' => 'DurationInDaysThisPeriod',
        'duration_in_minutes_this_period' => 'DurationInMinutesThisPeriod',
        'requester_comments' => 'RequesterComments',
        'approver_comments' => 'ApproverComments',
        'approver' => 'Approver',
        'reason' => 'Reason',
        'status' => 'Status',
        'last_action_date_time' => 'LastActionDateTime'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'other_leave_txn_id' => 'setOtherLeaveTxnId',
        'start_date' => 'setStartDate',
        'end_date' => 'setEndDate',
        'duration_type' => 'setDurationType',
        'duration_in_days' => 'setDurationInDays',
        'duration_in_minutes' => 'setDurationInMinutes',
        'start_time' => 'setStartTime',
        'end_time' => 'setEndTime',
        'duration_in_days_this_period' => 'setDurationInDaysThisPeriod',
        'duration_in_minutes_this_period' => 'setDurationInMinutesThisPeriod',
        'requester_comments' => 'setRequesterComments',
        'approver_comments' => 'setApproverComments',
        'approver' => 'setApprover',
        'reason' => 'setReason',
        'status' => 'setStatus',
        'last_action_date_time' => 'setLastActionDateTime'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'other_leave_txn_id' => 'getOtherLeaveTxnId',
        'start_date' => 'getStartDate',
        'end_date' => 'getEndDate',
        'duration_type' => 'getDurationType',
        'duration_in_days' => 'getDurationInDays',
        'duration_in_minutes' => 'getDurationInMinutes',
        'start_time' => 'getStartTime',
        'end_time' => 'getEndTime',
        'duration_in_days_this_period' => 'getDurationInDaysThisPeriod',
        'duration_in_minutes_this_period' => 'getDurationInMinutesThisPeriod',
        'requester_comments' => 'getRequesterComments',
        'approver_comments' => 'getApproverComments',
        'approver' => 'getApprover',
        'reason' => 'getReason',
        'status' => 'getStatus',
        'last_action_date_time' => 'getLastActionDateTime'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('other_leave_txn_id', $data ?? [], null);
        $this->setIfExists('start_date', $data ?? [], null);
        $this->setIfExists('end_date', $data ?? [], null);
        $this->setIfExists('duration_type', $data ?? [], null);
        $this->setIfExists('duration_in_days', $data ?? [], null);
        $this->setIfExists('duration_in_minutes', $data ?? [], null);
        $this->setIfExists('start_time', $data ?? [], null);
        $this->setIfExists('end_time', $data ?? [], null);
        $this->setIfExists('duration_in_days_this_period', $data ?? [], null);
        $this->setIfExists('duration_in_minutes_this_period', $data ?? [], null);
        $this->setIfExists('requester_comments', $data ?? [], null);
        $this->setIfExists('approver_comments', $data ?? [], null);
        $this->setIfExists('approver', $data ?? [], null);
        $this->setIfExists('reason', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('last_action_date_time', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets other_leave_txn_id
     *
     * @return int|null
     */
    public function getOtherLeaveTxnId()
    {
        return $this->container['other_leave_txn_id'];
    }

    /**
     * Sets other_leave_txn_id
     *
     * @param int|null $other_leave_txn_id OtherLeaveTxnId Value
     *
     * @return self
     */
    public function setOtherLeaveTxnId($other_leave_txn_id)
    {
        if (is_null($other_leave_txn_id)) {
            throw new \InvalidArgumentException('non-nullable other_leave_txn_id cannot be null');
        }
        $this->container['other_leave_txn_id'] = $other_leave_txn_id;

        return $this;
    }

    /**
     * Gets start_date
     *
     * @return \DateTime|null
     */
    public function getStartDate()
    {
        return $this->container['start_date'];
    }

    /**
     * Sets start_date
     *
     * @param \DateTime|null $start_date Start Date value
     *
     * @return self
     */
    public function setStartDate($start_date)
    {
        if (is_null($start_date)) {
            throw new \InvalidArgumentException('non-nullable start_date cannot be null');
        }
        $this->container['start_date'] = $start_date;

        return $this;
    }

    /**
     * Gets end_date
     *
     * @return \DateTime|null
     */
    public function getEndDate()
    {
        return $this->container['end_date'];
    }

    /**
     * Sets end_date
     *
     * @param \DateTime|null $end_date End Date value
     *
     * @return self
     */
    public function setEndDate($end_date)
    {
        if (is_null($end_date)) {
            throw new \InvalidArgumentException('non-nullable end_date cannot be null');
        }
        $this->container['end_date'] = $end_date;

        return $this;
    }

    /**
     * Gets duration_type
     *
     * @return int|null
     */
    public function getDurationType()
    {
        return $this->container['duration_type'];
    }

    /**
     * Sets duration_type
     *
     * @param int|null $duration_type Document type value
     *
     * @return self
     */
    public function setDurationType($duration_type)
    {
        if (is_null($duration_type)) {
            throw new \InvalidArgumentException('non-nullable duration_type cannot be null');
        }
        $this->container['duration_type'] = $duration_type;

        return $this;
    }

    /**
     * Gets duration_in_days
     *
     * @return int|null
     */
    public function getDurationInDays()
    {
        return $this->container['duration_in_days'];
    }

    /**
     * Sets duration_in_days
     *
     * @param int|null $duration_in_days Duration In Days value
     *
     * @return self
     */
    public function setDurationInDays($duration_in_days)
    {
        if (is_null($duration_in_days)) {
            throw new \InvalidArgumentException('non-nullable duration_in_days cannot be null');
        }
        $this->container['duration_in_days'] = $duration_in_days;

        return $this;
    }

    /**
     * Gets duration_in_minutes
     *
     * @return int|null
     */
    public function getDurationInMinutes()
    {
        return $this->container['duration_in_minutes'];
    }

    /**
     * Sets duration_in_minutes
     *
     * @param int|null $duration_in_minutes Duration In Minutes value
     *
     * @return self
     */
    public function setDurationInMinutes($duration_in_minutes)
    {
        if (is_null($duration_in_minutes)) {
            throw new \InvalidArgumentException('non-nullable duration_in_minutes cannot be null');
        }
        $this->container['duration_in_minutes'] = $duration_in_minutes;

        return $this;
    }

    /**
     * Gets start_time
     *
     * @return string|null
     */
    public function getStartTime()
    {
        return $this->container['start_time'];
    }

    /**
     * Sets start_time
     *
     * @param string|null $start_time Start Time value
     *
     * @return self
     */
    public function setStartTime($start_time)
    {
        if (is_null($start_time)) {
            throw new \InvalidArgumentException('non-nullable start_time cannot be null');
        }
        $this->container['start_time'] = $start_time;

        return $this;
    }

    /**
     * Gets end_time
     *
     * @return string|null
     */
    public function getEndTime()
    {
        return $this->container['end_time'];
    }

    /**
     * Sets end_time
     *
     * @param string|null $end_time End Time value
     *
     * @return self
     */
    public function setEndTime($end_time)
    {
        if (is_null($end_time)) {
            throw new \InvalidArgumentException('non-nullable end_time cannot be null');
        }
        $this->container['end_time'] = $end_time;

        return $this;
    }

    /**
     * Gets duration_in_days_this_period
     *
     * @return int|null
     */
    public function getDurationInDaysThisPeriod()
    {
        return $this->container['duration_in_days_this_period'];
    }

    /**
     * Sets duration_in_days_this_period
     *
     * @param int|null $duration_in_days_this_period Duration In Days This Period value
     *
     * @return self
     */
    public function setDurationInDaysThisPeriod($duration_in_days_this_period)
    {
        if (is_null($duration_in_days_this_period)) {
            throw new \InvalidArgumentException('non-nullable duration_in_days_this_period cannot be null');
        }
        $this->container['duration_in_days_this_period'] = $duration_in_days_this_period;

        return $this;
    }

    /**
     * Gets duration_in_minutes_this_period
     *
     * @return int|null
     */
    public function getDurationInMinutesThisPeriod()
    {
        return $this->container['duration_in_minutes_this_period'];
    }

    /**
     * Sets duration_in_minutes_this_period
     *
     * @param int|null $duration_in_minutes_this_period Duration In Minutes This Period value
     *
     * @return self
     */
    public function setDurationInMinutesThisPeriod($duration_in_minutes_this_period)
    {
        if (is_null($duration_in_minutes_this_period)) {
            throw new \InvalidArgumentException('non-nullable duration_in_minutes_this_period cannot be null');
        }
        $this->container['duration_in_minutes_this_period'] = $duration_in_minutes_this_period;

        return $this;
    }

    /**
     * Gets requester_comments
     *
     * @return string|null
     */
    public function getRequesterComments()
    {
        return $this->container['requester_comments'];
    }

    /**
     * Sets requester_comments
     *
     * @param string|null $requester_comments Requester Comments value
     *
     * @return self
     */
    public function setRequesterComments($requester_comments)
    {
        if (is_null($requester_comments)) {
            throw new \InvalidArgumentException('non-nullable requester_comments cannot be null');
        }
        $this->container['requester_comments'] = $requester_comments;

        return $this;
    }

    /**
     * Gets approver_comments
     *
     * @return string|null
     */
    public function getApproverComments()
    {
        return $this->container['approver_comments'];
    }

    /**
     * Sets approver_comments
     *
     * @param string|null $approver_comments Approver Comments value
     *
     * @return self
     */
    public function setApproverComments($approver_comments)
    {
        if (is_null($approver_comments)) {
            throw new \InvalidArgumentException('non-nullable approver_comments cannot be null');
        }
        $this->container['approver_comments'] = $approver_comments;

        return $this;
    }

    /**
     * Gets approver
     *
     * @return string|null
     */
    public function getApprover()
    {
        return $this->container['approver'];
    }

    /**
     * Sets approver
     *
     * @param string|null $approver Approver value
     *
     * @return self
     */
    public function setApprover($approver)
    {
        if (is_null($approver)) {
            throw new \InvalidArgumentException('non-nullable approver cannot be null');
        }
        $this->container['approver'] = $approver;

        return $this;
    }

    /**
     * Gets reason
     *
     * @return string|null
     */
    public function getReason()
    {
        return $this->container['reason'];
    }

    /**
     * Sets reason
     *
     * @param string|null $reason Reason value
     *
     * @return self
     */
    public function setReason($reason)
    {
        if (is_null($reason)) {
            throw new \InvalidArgumentException('non-nullable reason cannot be null');
        }
        $this->container['reason'] = $reason;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string|null $status Status value
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets last_action_date_time
     *
     * @return string|null
     */
    public function getLastActionDateTime()
    {
        return $this->container['last_action_date_time'];
    }

    /**
     * Sets last_action_date_time
     *
     * @param string|null $last_action_date_time Last Action DateTime value
     *
     * @return self
     */
    public function setLastActionDateTime($last_action_date_time)
    {
        if (is_null($last_action_date_time)) {
            throw new \InvalidArgumentException('non-nullable last_action_date_time cannot be null');
        }
        $this->container['last_action_date_time'] = $last_action_date_time;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}



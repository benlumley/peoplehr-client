<?php
/**
 * ResultEmployeeAbsenceArrayInner
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  PeopleHR
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * PeopleHR API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.1
 * Contact: customerservices@peoplehr.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.10.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace PeopleHR\Model;

use \ArrayAccess;
use \PeopleHR\ObjectSerializer;

/**
 * ResultEmployeeAbsenceArrayInner Class Doc Comment
 *
 * @category Class
 * @package  PeopleHR
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ResultEmployeeAbsenceArrayInner implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ResultEmployeeAbsenceArray_inner';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'start_date' => '\DateTime',
        'end_date' => '\DateTime',
        'duration_days' => 'int',
        'duration_in_days_this_period' => 'int',
        'part_of_day' => 'bool',
        'back_to_work_interview_requried' => 'bool',
        'back_to_work_interview_date' => 'string',
        'medical_certificate_type' => 'int',
        'medical_certificate_received_date' => 'string',
        'reason' => 'string',
        'comments' => '\PeopleHR\Model\CommentsArrayInner[]',
        'absence_paid_status' => 'int',
        'emergency_leave' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'start_date' => 'date',
        'end_date' => 'date',
        'duration_days' => 'double',
        'duration_in_days_this_period' => 'double',
        'part_of_day' => null,
        'back_to_work_interview_requried' => null,
        'back_to_work_interview_date' => null,
        'medical_certificate_type' => null,
        'medical_certificate_received_date' => null,
        'reason' => null,
        'comments' => null,
        'absence_paid_status' => null,
        'emergency_leave' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'start_date' => false,
        'end_date' => false,
        'duration_days' => false,
        'duration_in_days_this_period' => false,
        'part_of_day' => false,
        'back_to_work_interview_requried' => false,
        'back_to_work_interview_date' => false,
        'medical_certificate_type' => false,
        'medical_certificate_received_date' => false,
        'reason' => false,
        'comments' => false,
        'absence_paid_status' => false,
        'emergency_leave' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'start_date' => 'StartDate',
        'end_date' => 'EndDate',
        'duration_days' => 'DurationDays',
        'duration_in_days_this_period' => 'DurationInDaysThisPeriod',
        'part_of_day' => 'PartOfDay',
        'back_to_work_interview_requried' => 'BackToWorkInterviewRequried',
        'back_to_work_interview_date' => 'BackToWorkInterviewDate',
        'medical_certificate_type' => 'MedicalCertificateType',
        'medical_certificate_received_date' => 'MedicalCertificateReceivedDate',
        'reason' => 'Reason',
        'comments' => 'Comments',
        'absence_paid_status' => 'AbsencePaidStatus',
        'emergency_leave' => 'EmergencyLeave'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'start_date' => 'setStartDate',
        'end_date' => 'setEndDate',
        'duration_days' => 'setDurationDays',
        'duration_in_days_this_period' => 'setDurationInDaysThisPeriod',
        'part_of_day' => 'setPartOfDay',
        'back_to_work_interview_requried' => 'setBackToWorkInterviewRequried',
        'back_to_work_interview_date' => 'setBackToWorkInterviewDate',
        'medical_certificate_type' => 'setMedicalCertificateType',
        'medical_certificate_received_date' => 'setMedicalCertificateReceivedDate',
        'reason' => 'setReason',
        'comments' => 'setComments',
        'absence_paid_status' => 'setAbsencePaidStatus',
        'emergency_leave' => 'setEmergencyLeave'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'start_date' => 'getStartDate',
        'end_date' => 'getEndDate',
        'duration_days' => 'getDurationDays',
        'duration_in_days_this_period' => 'getDurationInDaysThisPeriod',
        'part_of_day' => 'getPartOfDay',
        'back_to_work_interview_requried' => 'getBackToWorkInterviewRequried',
        'back_to_work_interview_date' => 'getBackToWorkInterviewDate',
        'medical_certificate_type' => 'getMedicalCertificateType',
        'medical_certificate_received_date' => 'getMedicalCertificateReceivedDate',
        'reason' => 'getReason',
        'comments' => 'getComments',
        'absence_paid_status' => 'getAbsencePaidStatus',
        'emergency_leave' => 'getEmergencyLeave'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('start_date', $data ?? [], null);
        $this->setIfExists('end_date', $data ?? [], null);
        $this->setIfExists('duration_days', $data ?? [], null);
        $this->setIfExists('duration_in_days_this_period', $data ?? [], null);
        $this->setIfExists('part_of_day', $data ?? [], null);
        $this->setIfExists('back_to_work_interview_requried', $data ?? [], null);
        $this->setIfExists('back_to_work_interview_date', $data ?? [], null);
        $this->setIfExists('medical_certificate_type', $data ?? [], null);
        $this->setIfExists('medical_certificate_received_date', $data ?? [], null);
        $this->setIfExists('reason', $data ?? [], null);
        $this->setIfExists('comments', $data ?? [], null);
        $this->setIfExists('absence_paid_status', $data ?? [], null);
        $this->setIfExists('emergency_leave', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets start_date
     *
     * @return \DateTime|null
     */
    public function getStartDate()
    {
        return $this->container['start_date'];
    }

    /**
     * Sets start_date
     *
     * @param \DateTime|null $start_date Start Date Value
     *
     * @return self
     */
    public function setStartDate($start_date)
    {
        if (is_null($start_date)) {
            throw new \InvalidArgumentException('non-nullable start_date cannot be null');
        }
        $this->container['start_date'] = $start_date;

        return $this;
    }

    /**
     * Gets end_date
     *
     * @return \DateTime|null
     */
    public function getEndDate()
    {
        return $this->container['end_date'];
    }

    /**
     * Sets end_date
     *
     * @param \DateTime|null $end_date End Date  value
     *
     * @return self
     */
    public function setEndDate($end_date)
    {
        if (is_null($end_date)) {
            throw new \InvalidArgumentException('non-nullable end_date cannot be null');
        }
        $this->container['end_date'] = $end_date;

        return $this;
    }

    /**
     * Gets duration_days
     *
     * @return int|null
     */
    public function getDurationDays()
    {
        return $this->container['duration_days'];
    }

    /**
     * Sets duration_days
     *
     * @param int|null $duration_days Duration Days value
     *
     * @return self
     */
    public function setDurationDays($duration_days)
    {
        if (is_null($duration_days)) {
            throw new \InvalidArgumentException('non-nullable duration_days cannot be null');
        }
        $this->container['duration_days'] = $duration_days;

        return $this;
    }

    /**
     * Gets duration_in_days_this_period
     *
     * @return int|null
     */
    public function getDurationInDaysThisPeriod()
    {
        return $this->container['duration_in_days_this_period'];
    }

    /**
     * Sets duration_in_days_this_period
     *
     * @param int|null $duration_in_days_this_period Duration In Days This Period value
     *
     * @return self
     */
    public function setDurationInDaysThisPeriod($duration_in_days_this_period)
    {
        if (is_null($duration_in_days_this_period)) {
            throw new \InvalidArgumentException('non-nullable duration_in_days_this_period cannot be null');
        }
        $this->container['duration_in_days_this_period'] = $duration_in_days_this_period;

        return $this;
    }

    /**
     * Gets part_of_day
     *
     * @return bool|null
     */
    public function getPartOfDay()
    {
        return $this->container['part_of_day'];
    }

    /**
     * Sets part_of_day
     *
     * @param bool|null $part_of_day Part Of Day value
     *
     * @return self
     */
    public function setPartOfDay($part_of_day)
    {
        if (is_null($part_of_day)) {
            throw new \InvalidArgumentException('non-nullable part_of_day cannot be null');
        }
        $this->container['part_of_day'] = $part_of_day;

        return $this;
    }

    /**
     * Gets back_to_work_interview_requried
     *
     * @return bool|null
     */
    public function getBackToWorkInterviewRequried()
    {
        return $this->container['back_to_work_interview_requried'];
    }

    /**
     * Sets back_to_work_interview_requried
     *
     * @param bool|null $back_to_work_interview_requried The Back To Work Interview Requried  value
     *
     * @return self
     */
    public function setBackToWorkInterviewRequried($back_to_work_interview_requried)
    {
        if (is_null($back_to_work_interview_requried)) {
            throw new \InvalidArgumentException('non-nullable back_to_work_interview_requried cannot be null');
        }
        $this->container['back_to_work_interview_requried'] = $back_to_work_interview_requried;

        return $this;
    }

    /**
     * Gets back_to_work_interview_date
     *
     * @return string|null
     */
    public function getBackToWorkInterviewDate()
    {
        return $this->container['back_to_work_interview_date'];
    }

    /**
     * Sets back_to_work_interview_date
     *
     * @param string|null $back_to_work_interview_date Back To Work Interview Date value
     *
     * @return self
     */
    public function setBackToWorkInterviewDate($back_to_work_interview_date)
    {
        if (is_null($back_to_work_interview_date)) {
            throw new \InvalidArgumentException('non-nullable back_to_work_interview_date cannot be null');
        }
        $this->container['back_to_work_interview_date'] = $back_to_work_interview_date;

        return $this;
    }

    /**
     * Gets medical_certificate_type
     *
     * @return int|null
     */
    public function getMedicalCertificateType()
    {
        return $this->container['medical_certificate_type'];
    }

    /**
     * Sets medical_certificate_type
     *
     * @param int|null $medical_certificate_type Comments goes here
     *
     * @return self
     */
    public function setMedicalCertificateType($medical_certificate_type)
    {
        if (is_null($medical_certificate_type)) {
            throw new \InvalidArgumentException('non-nullable medical_certificate_type cannot be null');
        }
        $this->container['medical_certificate_type'] = $medical_certificate_type;

        return $this;
    }

    /**
     * Gets medical_certificate_received_date
     *
     * @return string|null
     */
    public function getMedicalCertificateReceivedDate()
    {
        return $this->container['medical_certificate_received_date'];
    }

    /**
     * Sets medical_certificate_received_date
     *
     * @param string|null $medical_certificate_received_date Comments goes here
     *
     * @return self
     */
    public function setMedicalCertificateReceivedDate($medical_certificate_received_date)
    {
        if (is_null($medical_certificate_received_date)) {
            throw new \InvalidArgumentException('non-nullable medical_certificate_received_date cannot be null');
        }
        $this->container['medical_certificate_received_date'] = $medical_certificate_received_date;

        return $this;
    }

    /**
     * Gets reason
     *
     * @return string|null
     */
    public function getReason()
    {
        return $this->container['reason'];
    }

    /**
     * Sets reason
     *
     * @param string|null $reason Reason for Absence
     *
     * @return self
     */
    public function setReason($reason)
    {
        if (is_null($reason)) {
            throw new \InvalidArgumentException('non-nullable reason cannot be null');
        }
        $this->container['reason'] = $reason;

        return $this;
    }

    /**
     * Gets comments
     *
     * @return \PeopleHR\Model\CommentsArrayInner[]|null
     */
    public function getComments()
    {
        return $this->container['comments'];
    }

    /**
     * Sets comments
     *
     * @param \PeopleHR\Model\CommentsArrayInner[]|null $comments Comments Array  list
     *
     * @return self
     */
    public function setComments($comments)
    {
        if (is_null($comments)) {
            throw new \InvalidArgumentException('non-nullable comments cannot be null');
        }
        $this->container['comments'] = $comments;

        return $this;
    }

    /**
     * Gets absence_paid_status
     *
     * @return int|null
     */
    public function getAbsencePaidStatus()
    {
        return $this->container['absence_paid_status'];
    }

    /**
     * Sets absence_paid_status
     *
     * @param int|null $absence_paid_status Absence Paid Status
     *
     * @return self
     */
    public function setAbsencePaidStatus($absence_paid_status)
    {
        if (is_null($absence_paid_status)) {
            throw new \InvalidArgumentException('non-nullable absence_paid_status cannot be null');
        }
        $this->container['absence_paid_status'] = $absence_paid_status;

        return $this;
    }

    /**
     * Gets emergency_leave
     *
     * @return bool|null
     */
    public function getEmergencyLeave()
    {
        return $this->container['emergency_leave'];
    }

    /**
     * Sets emergency_leave
     *
     * @param bool|null $emergency_leave Emergency Leave
     *
     * @return self
     */
    public function setEmergencyLeave($emergency_leave)
    {
        if (is_null($emergency_leave)) {
            throw new \InvalidArgumentException('non-nullable emergency_leave cannot be null');
        }
        $this->container['emergency_leave'] = $emergency_leave;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}



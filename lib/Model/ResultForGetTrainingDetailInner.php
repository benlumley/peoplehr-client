<?php
/**
 * ResultForGetTrainingDetailInner
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * PeopleHR API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.1
 * Contact: customerservices@peoplehr.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.10.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * ResultForGetTrainingDetailInner Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ResultForGetTrainingDetailInner implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ResultForGetTrainingDetail_inner';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'training_id' => 'int',
        'training_type' => 'string',
        'description' => 'string',
        'importance' => 'int',
        'status' => 'int',
        'percent_complete' => 'int',
        'training_date' => '\DateTime',
        'training_end_date' => '\DateTime',
        'training_expiry_date' => '\DateTime',
        'provider' => 'string',
        'cost' => 'float',
        'note' => 'string',
        'custom_columns' => '\OpenAPI\Client\Model\CustomColumnsForGetTrainingDetailInner[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'training_id' => null,
        'training_type' => null,
        'description' => null,
        'importance' => null,
        'status' => null,
        'percent_complete' => 'decimal',
        'training_date' => 'date',
        'training_end_date' => 'date',
        'training_expiry_date' => 'date',
        'provider' => null,
        'cost' => 'decimal',
        'note' => null,
        'custom_columns' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'training_id' => false,
        'training_type' => false,
        'description' => false,
        'importance' => false,
        'status' => false,
        'percent_complete' => false,
        'training_date' => false,
        'training_end_date' => false,
        'training_expiry_date' => false,
        'provider' => false,
        'cost' => false,
        'note' => false,
        'custom_columns' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'training_id' => 'TrainingId',
        'training_type' => 'TrainingType',
        'description' => 'Description',
        'importance' => 'Importance',
        'status' => 'Status',
        'percent_complete' => 'PercentComplete',
        'training_date' => 'TrainingDate',
        'training_end_date' => 'TrainingEndDate',
        'training_expiry_date' => 'TrainingExpiryDate',
        'provider' => 'Provider',
        'cost' => 'Cost',
        'note' => 'Note',
        'custom_columns' => 'CustomColumns'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'training_id' => 'setTrainingId',
        'training_type' => 'setTrainingType',
        'description' => 'setDescription',
        'importance' => 'setImportance',
        'status' => 'setStatus',
        'percent_complete' => 'setPercentComplete',
        'training_date' => 'setTrainingDate',
        'training_end_date' => 'setTrainingEndDate',
        'training_expiry_date' => 'setTrainingExpiryDate',
        'provider' => 'setProvider',
        'cost' => 'setCost',
        'note' => 'setNote',
        'custom_columns' => 'setCustomColumns'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'training_id' => 'getTrainingId',
        'training_type' => 'getTrainingType',
        'description' => 'getDescription',
        'importance' => 'getImportance',
        'status' => 'getStatus',
        'percent_complete' => 'getPercentComplete',
        'training_date' => 'getTrainingDate',
        'training_end_date' => 'getTrainingEndDate',
        'training_expiry_date' => 'getTrainingExpiryDate',
        'provider' => 'getProvider',
        'cost' => 'getCost',
        'note' => 'getNote',
        'custom_columns' => 'getCustomColumns'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('training_id', $data ?? [], null);
        $this->setIfExists('training_type', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('importance', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('percent_complete', $data ?? [], null);
        $this->setIfExists('training_date', $data ?? [], null);
        $this->setIfExists('training_end_date', $data ?? [], null);
        $this->setIfExists('training_expiry_date', $data ?? [], null);
        $this->setIfExists('provider', $data ?? [], null);
        $this->setIfExists('cost', $data ?? [], null);
        $this->setIfExists('note', $data ?? [], null);
        $this->setIfExists('custom_columns', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets training_id
     *
     * @return int|null
     */
    public function getTrainingId()
    {
        return $this->container['training_id'];
    }

    /**
     * Sets training_id
     *
     * @param int|null $training_id TrainingId Value
     *
     * @return self
     */
    public function setTrainingId($training_id)
    {
        if (is_null($training_id)) {
            throw new \InvalidArgumentException('non-nullable training_id cannot be null');
        }
        $this->container['training_id'] = $training_id;

        return $this;
    }

    /**
     * Gets training_type
     *
     * @return string|null
     */
    public function getTrainingType()
    {
        return $this->container['training_type'];
    }

    /**
     * Sets training_type
     *
     * @param string|null $training_type Training type Value
     *
     * @return self
     */
    public function setTrainingType($training_type)
    {
        if (is_null($training_type)) {
            throw new \InvalidArgumentException('non-nullable training_type cannot be null');
        }
        $this->container['training_type'] = $training_type;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description Description Value
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            throw new \InvalidArgumentException('non-nullable description cannot be null');
        }
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets importance
     *
     * @return int|null
     */
    public function getImportance()
    {
        return $this->container['importance'];
    }

    /**
     * Sets importance
     *
     * @param int|null $importance Importance Value
     *
     * @return self
     */
    public function setImportance($importance)
    {
        if (is_null($importance)) {
            throw new \InvalidArgumentException('non-nullable importance cannot be null');
        }
        $this->container['importance'] = $importance;

        return $this;
    }

    /**
     * Gets status
     *
     * @return int|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param int|null $status Status Value
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets percent_complete
     *
     * @return int|null
     */
    public function getPercentComplete()
    {
        return $this->container['percent_complete'];
    }

    /**
     * Sets percent_complete
     *
     * @param int|null $percent_complete Percent complete Value
     *
     * @return self
     */
    public function setPercentComplete($percent_complete)
    {
        if (is_null($percent_complete)) {
            throw new \InvalidArgumentException('non-nullable percent_complete cannot be null');
        }
        $this->container['percent_complete'] = $percent_complete;

        return $this;
    }

    /**
     * Gets training_date
     *
     * @return \DateTime|null
     */
    public function getTrainingDate()
    {
        return $this->container['training_date'];
    }

    /**
     * Sets training_date
     *
     * @param \DateTime|null $training_date Training date Value
     *
     * @return self
     */
    public function setTrainingDate($training_date)
    {
        if (is_null($training_date)) {
            throw new \InvalidArgumentException('non-nullable training_date cannot be null');
        }
        $this->container['training_date'] = $training_date;

        return $this;
    }

    /**
     * Gets training_end_date
     *
     * @return \DateTime|null
     */
    public function getTrainingEndDate()
    {
        return $this->container['training_end_date'];
    }

    /**
     * Sets training_end_date
     *
     * @param \DateTime|null $training_end_date TrainingEndDate Value
     *
     * @return self
     */
    public function setTrainingEndDate($training_end_date)
    {
        if (is_null($training_end_date)) {
            throw new \InvalidArgumentException('non-nullable training_end_date cannot be null');
        }
        $this->container['training_end_date'] = $training_end_date;

        return $this;
    }

    /**
     * Gets training_expiry_date
     *
     * @return \DateTime|null
     */
    public function getTrainingExpiryDate()
    {
        return $this->container['training_expiry_date'];
    }

    /**
     * Sets training_expiry_date
     *
     * @param \DateTime|null $training_expiry_date TrainingExpiryDate Value
     *
     * @return self
     */
    public function setTrainingExpiryDate($training_expiry_date)
    {
        if (is_null($training_expiry_date)) {
            throw new \InvalidArgumentException('non-nullable training_expiry_date cannot be null');
        }
        $this->container['training_expiry_date'] = $training_expiry_date;

        return $this;
    }

    /**
     * Gets provider
     *
     * @return string|null
     */
    public function getProvider()
    {
        return $this->container['provider'];
    }

    /**
     * Sets provider
     *
     * @param string|null $provider Provider Value
     *
     * @return self
     */
    public function setProvider($provider)
    {
        if (is_null($provider)) {
            throw new \InvalidArgumentException('non-nullable provider cannot be null');
        }
        $this->container['provider'] = $provider;

        return $this;
    }

    /**
     * Gets cost
     *
     * @return float|null
     */
    public function getCost()
    {
        return $this->container['cost'];
    }

    /**
     * Sets cost
     *
     * @param float|null $cost Cost Value
     *
     * @return self
     */
    public function setCost($cost)
    {
        if (is_null($cost)) {
            throw new \InvalidArgumentException('non-nullable cost cannot be null');
        }
        $this->container['cost'] = $cost;

        return $this;
    }

    /**
     * Gets note
     *
     * @return string|null
     */
    public function getNote()
    {
        return $this->container['note'];
    }

    /**
     * Sets note
     *
     * @param string|null $note Note Value
     *
     * @return self
     */
    public function setNote($note)
    {
        if (is_null($note)) {
            throw new \InvalidArgumentException('non-nullable note cannot be null');
        }
        $this->container['note'] = $note;

        return $this;
    }

    /**
     * Gets custom_columns
     *
     * @return \OpenAPI\Client\Model\CustomColumnsForGetTrainingDetailInner[]|null
     */
    public function getCustomColumns()
    {
        return $this->container['custom_columns'];
    }

    /**
     * Sets custom_columns
     *
     * @param \OpenAPI\Client\Model\CustomColumnsForGetTrainingDetailInner[]|null $custom_columns CustomColumns Value
     *
     * @return self
     */
    public function setCustomColumns($custom_columns)
    {
        if (is_null($custom_columns)) {
            throw new \InvalidArgumentException('non-nullable custom_columns cannot be null');
        }
        $this->container['custom_columns'] = $custom_columns;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}



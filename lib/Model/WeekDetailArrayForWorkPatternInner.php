<?php
/**
 * WeekDetailArrayForWorkPatternInner
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  PeopleHR
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * PeopleHR API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.1
 * Contact: customerservices@peoplehr.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.10.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace PeopleHR\Model;

use \ArrayAccess;
use \PeopleHR\ObjectSerializer;

/**
 * WeekDetailArrayForWorkPatternInner Class Doc Comment
 *
 * @category Class
 * @package  PeopleHR
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class WeekDetailArrayForWorkPatternInner implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'WeekDetailArrayForWorkPattern_inner';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'week_number' => 'int',
        'work_pattern_day' => 'string',
        'total_working_days' => 'int',
        'total_working_mins' => 'int',
        'shift_start_time' => 'string',
        'shift_end_time' => 'string',
        'break_time' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'week_number' => null,
        'work_pattern_day' => null,
        'total_working_days' => 'double',
        'total_working_mins' => null,
        'shift_start_time' => null,
        'shift_end_time' => null,
        'break_time' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'week_number' => false,
        'work_pattern_day' => false,
        'total_working_days' => false,
        'total_working_mins' => false,
        'shift_start_time' => false,
        'shift_end_time' => false,
        'break_time' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'week_number' => 'WeekNumber',
        'work_pattern_day' => 'WorkPatternDay',
        'total_working_days' => 'TotalWorkingDays',
        'total_working_mins' => 'TotalWorkingMins',
        'shift_start_time' => 'ShiftStartTime',
        'shift_end_time' => 'ShiftEndTime',
        'break_time' => 'BreakTime'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'week_number' => 'setWeekNumber',
        'work_pattern_day' => 'setWorkPatternDay',
        'total_working_days' => 'setTotalWorkingDays',
        'total_working_mins' => 'setTotalWorkingMins',
        'shift_start_time' => 'setShiftStartTime',
        'shift_end_time' => 'setShiftEndTime',
        'break_time' => 'setBreakTime'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'week_number' => 'getWeekNumber',
        'work_pattern_day' => 'getWorkPatternDay',
        'total_working_days' => 'getTotalWorkingDays',
        'total_working_mins' => 'getTotalWorkingMins',
        'shift_start_time' => 'getShiftStartTime',
        'shift_end_time' => 'getShiftEndTime',
        'break_time' => 'getBreakTime'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const WORK_PATTERN_DAY_MONDAY = 'Monday';
    public const WORK_PATTERN_DAY_TUESDAY = 'Tuesday';
    public const WORK_PATTERN_DAY_WEDNESDAY = 'Wednesday';
    public const WORK_PATTERN_DAY_THURSDAY = 'Thursday';
    public const WORK_PATTERN_DAY_FRIDAY = 'Friday';
    public const WORK_PATTERN_DAY_SATURDAY = 'Saturday';
    public const WORK_PATTERN_DAY_SUNDAY = 'Sunday';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getWorkPatternDayAllowableValues()
    {
        return [
            self::WORK_PATTERN_DAY_MONDAY,
            self::WORK_PATTERN_DAY_TUESDAY,
            self::WORK_PATTERN_DAY_WEDNESDAY,
            self::WORK_PATTERN_DAY_THURSDAY,
            self::WORK_PATTERN_DAY_FRIDAY,
            self::WORK_PATTERN_DAY_SATURDAY,
            self::WORK_PATTERN_DAY_SUNDAY,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('week_number', $data ?? [], null);
        $this->setIfExists('work_pattern_day', $data ?? [], null);
        $this->setIfExists('total_working_days', $data ?? [], null);
        $this->setIfExists('total_working_mins', $data ?? [], null);
        $this->setIfExists('shift_start_time', $data ?? [], null);
        $this->setIfExists('shift_end_time', $data ?? [], null);
        $this->setIfExists('break_time', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getWorkPatternDayAllowableValues();
        if (!is_null($this->container['work_pattern_day']) && !in_array($this->container['work_pattern_day'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'work_pattern_day', must be one of '%s'",
                $this->container['work_pattern_day'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets week_number
     *
     * @return int|null
     */
    public function getWeekNumber()
    {
        return $this->container['week_number'];
    }

    /**
     * Sets week_number
     *
     * @param int|null $week_number Week number value
     *
     * @return self
     */
    public function setWeekNumber($week_number)
    {
        if (is_null($week_number)) {
            throw new \InvalidArgumentException('non-nullable week_number cannot be null');
        }
        $this->container['week_number'] = $week_number;

        return $this;
    }

    /**
     * Gets work_pattern_day
     *
     * @return string|null
     */
    public function getWorkPatternDay()
    {
        return $this->container['work_pattern_day'];
    }

    /**
     * Sets work_pattern_day
     *
     * @param string|null $work_pattern_day Week detail contains array For work pattren
     *
     * @return self
     */
    public function setWorkPatternDay($work_pattern_day)
    {
        if (is_null($work_pattern_day)) {
            throw new \InvalidArgumentException('non-nullable work_pattern_day cannot be null');
        }
        $allowedValues = $this->getWorkPatternDayAllowableValues();
        if (!in_array($work_pattern_day, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'work_pattern_day', must be one of '%s'",
                    $work_pattern_day,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['work_pattern_day'] = $work_pattern_day;

        return $this;
    }

    /**
     * Gets total_working_days
     *
     * @return int|null
     */
    public function getTotalWorkingDays()
    {
        return $this->container['total_working_days'];
    }

    /**
     * Sets total_working_days
     *
     * @param int|null $total_working_days Total working days value
     *
     * @return self
     */
    public function setTotalWorkingDays($total_working_days)
    {
        if (is_null($total_working_days)) {
            throw new \InvalidArgumentException('non-nullable total_working_days cannot be null');
        }
        $this->container['total_working_days'] = $total_working_days;

        return $this;
    }

    /**
     * Gets total_working_mins
     *
     * @return int|null
     */
    public function getTotalWorkingMins()
    {
        return $this->container['total_working_mins'];
    }

    /**
     * Sets total_working_mins
     *
     * @param int|null $total_working_mins Total working days value
     *
     * @return self
     */
    public function setTotalWorkingMins($total_working_mins)
    {
        if (is_null($total_working_mins)) {
            throw new \InvalidArgumentException('non-nullable total_working_mins cannot be null');
        }
        $this->container['total_working_mins'] = $total_working_mins;

        return $this;
    }

    /**
     * Gets shift_start_time
     *
     * @return string|null
     */
    public function getShiftStartTime()
    {
        return $this->container['shift_start_time'];
    }

    /**
     * Sets shift_start_time
     *
     * @param string|null $shift_start_time Shift start time value
     *
     * @return self
     */
    public function setShiftStartTime($shift_start_time)
    {
        if (is_null($shift_start_time)) {
            throw new \InvalidArgumentException('non-nullable shift_start_time cannot be null');
        }
        $this->container['shift_start_time'] = $shift_start_time;

        return $this;
    }

    /**
     * Gets shift_end_time
     *
     * @return string|null
     */
    public function getShiftEndTime()
    {
        return $this->container['shift_end_time'];
    }

    /**
     * Sets shift_end_time
     *
     * @param string|null $shift_end_time Shift end time value
     *
     * @return self
     */
    public function setShiftEndTime($shift_end_time)
    {
        if (is_null($shift_end_time)) {
            throw new \InvalidArgumentException('non-nullable shift_end_time cannot be null');
        }
        $this->container['shift_end_time'] = $shift_end_time;

        return $this;
    }

    /**
     * Gets break_time
     *
     * @return string|null
     */
    public function getBreakTime()
    {
        return $this->container['break_time'];
    }

    /**
     * Sets break_time
     *
     * @param string|null $break_time break time value
     *
     * @return self
     */
    public function setBreakTime($break_time)
    {
        if (is_null($break_time)) {
            throw new \InvalidArgumentException('non-nullable break_time cannot be null');
        }
        $this->container['break_time'] = $break_time;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}



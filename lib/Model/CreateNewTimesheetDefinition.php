<?php
/**
 * CreateNewTimesheetDefinition
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * PeopleHR API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.1
 * Contact: customerservices@peoplehr.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.10.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * CreateNewTimesheetDefinition Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class CreateNewTimesheetDefinition implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'CreateNewTimesheetDefinition';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'api_key' => 'string',
        'action' => 'string',
        'employee_id' => 'string',
        'timesheet_date' => '\DateTime',
        'time_in1' => 'string',
        'time_out1' => 'string',
        'time_in2' => 'string',
        'time_out2' => 'string',
        'time_in3' => 'string',
        'time_out3' => 'string',
        'time_in4' => 'string',
        'time_out4' => 'string',
        'time_in5' => 'string',
        'time_out5' => 'string',
        'time_in6' => 'string',
        'time_out6' => 'string',
        'time_in7' => 'string',
        'time_out7' => 'string',
        'time_in8' => 'string',
        'time_out8' => 'string',
        'time_in9' => 'string',
        'time_out9' => 'string',
        'time_in10' => 'string',
        'time_out10' => 'string',
        'time_in11' => 'string',
        'time_out11' => 'string',
        'time_in12' => 'string',
        'time_out12' => 'string',
        'time_in13' => 'string',
        'time_out13' => 'string',
        'time_in14' => 'string',
        'time_out14' => 'string',
        'time_in15' => 'string',
        'time_out15' => 'string',
        'comments' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'api_key' => null,
        'action' => null,
        'employee_id' => null,
        'timesheet_date' => 'date',
        'time_in1' => 'timespan',
        'time_out1' => 'timespan',
        'time_in2' => 'timespan',
        'time_out2' => 'timespan',
        'time_in3' => 'timespan',
        'time_out3' => 'timespan',
        'time_in4' => 'timespan',
        'time_out4' => 'timespan',
        'time_in5' => 'timespan',
        'time_out5' => 'timespan',
        'time_in6' => 'timespan',
        'time_out6' => 'timespan',
        'time_in7' => 'timespan',
        'time_out7' => 'timespan',
        'time_in8' => 'timespan',
        'time_out8' => 'timespan',
        'time_in9' => 'timespan',
        'time_out9' => 'timespan',
        'time_in10' => 'timespan',
        'time_out10' => 'timespan',
        'time_in11' => 'timespan',
        'time_out11' => 'timespan',
        'time_in12' => 'timespan',
        'time_out12' => 'timespan',
        'time_in13' => 'timespan',
        'time_out13' => 'timespan',
        'time_in14' => 'timespan',
        'time_out14' => 'timespan',
        'time_in15' => 'timespan',
        'time_out15' => 'timespan',
        'comments' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'api_key' => false,
        'action' => false,
        'employee_id' => false,
        'timesheet_date' => false,
        'time_in1' => false,
        'time_out1' => false,
        'time_in2' => false,
        'time_out2' => false,
        'time_in3' => false,
        'time_out3' => false,
        'time_in4' => false,
        'time_out4' => false,
        'time_in5' => false,
        'time_out5' => false,
        'time_in6' => false,
        'time_out6' => false,
        'time_in7' => false,
        'time_out7' => false,
        'time_in8' => false,
        'time_out8' => false,
        'time_in9' => false,
        'time_out9' => false,
        'time_in10' => false,
        'time_out10' => false,
        'time_in11' => false,
        'time_out11' => false,
        'time_in12' => false,
        'time_out12' => false,
        'time_in13' => false,
        'time_out13' => false,
        'time_in14' => false,
        'time_out14' => false,
        'time_in15' => false,
        'time_out15' => false,
        'comments' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'api_key' => 'APIKey',
        'action' => 'Action',
        'employee_id' => 'EmployeeId',
        'timesheet_date' => 'TimesheetDate',
        'time_in1' => 'TimeIn1',
        'time_out1' => 'TimeOut1',
        'time_in2' => 'TimeIn2',
        'time_out2' => 'TimeOut2',
        'time_in3' => 'TimeIn3',
        'time_out3' => 'TimeOut3',
        'time_in4' => 'TimeIn4',
        'time_out4' => 'TimeOut4',
        'time_in5' => 'TimeIn5',
        'time_out5' => 'TimeOut5',
        'time_in6' => 'TimeIn6',
        'time_out6' => 'TimeOut6',
        'time_in7' => 'TimeIn7',
        'time_out7' => 'TimeOut7',
        'time_in8' => 'TimeIn8',
        'time_out8' => 'TimeOut8',
        'time_in9' => 'TimeIn9',
        'time_out9' => 'TimeOut9',
        'time_in10' => 'TimeIn10',
        'time_out10' => 'TimeOut10',
        'time_in11' => 'TimeIn11',
        'time_out11' => 'TimeOut11',
        'time_in12' => 'TimeIn12',
        'time_out12' => 'TimeOut12',
        'time_in13' => 'TimeIn13',
        'time_out13' => 'TimeOut13',
        'time_in14' => 'TimeIn14',
        'time_out14' => 'TimeOut14',
        'time_in15' => 'TimeIn15',
        'time_out15' => 'TimeOut15',
        'comments' => 'Comments'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'api_key' => 'setApiKey',
        'action' => 'setAction',
        'employee_id' => 'setEmployeeId',
        'timesheet_date' => 'setTimesheetDate',
        'time_in1' => 'setTimeIn1',
        'time_out1' => 'setTimeOut1',
        'time_in2' => 'setTimeIn2',
        'time_out2' => 'setTimeOut2',
        'time_in3' => 'setTimeIn3',
        'time_out3' => 'setTimeOut3',
        'time_in4' => 'setTimeIn4',
        'time_out4' => 'setTimeOut4',
        'time_in5' => 'setTimeIn5',
        'time_out5' => 'setTimeOut5',
        'time_in6' => 'setTimeIn6',
        'time_out6' => 'setTimeOut6',
        'time_in7' => 'setTimeIn7',
        'time_out7' => 'setTimeOut7',
        'time_in8' => 'setTimeIn8',
        'time_out8' => 'setTimeOut8',
        'time_in9' => 'setTimeIn9',
        'time_out9' => 'setTimeOut9',
        'time_in10' => 'setTimeIn10',
        'time_out10' => 'setTimeOut10',
        'time_in11' => 'setTimeIn11',
        'time_out11' => 'setTimeOut11',
        'time_in12' => 'setTimeIn12',
        'time_out12' => 'setTimeOut12',
        'time_in13' => 'setTimeIn13',
        'time_out13' => 'setTimeOut13',
        'time_in14' => 'setTimeIn14',
        'time_out14' => 'setTimeOut14',
        'time_in15' => 'setTimeIn15',
        'time_out15' => 'setTimeOut15',
        'comments' => 'setComments'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'api_key' => 'getApiKey',
        'action' => 'getAction',
        'employee_id' => 'getEmployeeId',
        'timesheet_date' => 'getTimesheetDate',
        'time_in1' => 'getTimeIn1',
        'time_out1' => 'getTimeOut1',
        'time_in2' => 'getTimeIn2',
        'time_out2' => 'getTimeOut2',
        'time_in3' => 'getTimeIn3',
        'time_out3' => 'getTimeOut3',
        'time_in4' => 'getTimeIn4',
        'time_out4' => 'getTimeOut4',
        'time_in5' => 'getTimeIn5',
        'time_out5' => 'getTimeOut5',
        'time_in6' => 'getTimeIn6',
        'time_out6' => 'getTimeOut6',
        'time_in7' => 'getTimeIn7',
        'time_out7' => 'getTimeOut7',
        'time_in8' => 'getTimeIn8',
        'time_out8' => 'getTimeOut8',
        'time_in9' => 'getTimeIn9',
        'time_out9' => 'getTimeOut9',
        'time_in10' => 'getTimeIn10',
        'time_out10' => 'getTimeOut10',
        'time_in11' => 'getTimeIn11',
        'time_out11' => 'getTimeOut11',
        'time_in12' => 'getTimeIn12',
        'time_out12' => 'getTimeOut12',
        'time_in13' => 'getTimeIn13',
        'time_out13' => 'getTimeOut13',
        'time_in14' => 'getTimeIn14',
        'time_out14' => 'getTimeOut14',
        'time_in15' => 'getTimeIn15',
        'time_out15' => 'getTimeOut15',
        'comments' => 'getComments'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('api_key', $data ?? [], null);
        $this->setIfExists('action', $data ?? [], null);
        $this->setIfExists('employee_id', $data ?? [], null);
        $this->setIfExists('timesheet_date', $data ?? [], null);
        $this->setIfExists('time_in1', $data ?? [], null);
        $this->setIfExists('time_out1', $data ?? [], null);
        $this->setIfExists('time_in2', $data ?? [], null);
        $this->setIfExists('time_out2', $data ?? [], null);
        $this->setIfExists('time_in3', $data ?? [], null);
        $this->setIfExists('time_out3', $data ?? [], null);
        $this->setIfExists('time_in4', $data ?? [], null);
        $this->setIfExists('time_out4', $data ?? [], null);
        $this->setIfExists('time_in5', $data ?? [], null);
        $this->setIfExists('time_out5', $data ?? [], null);
        $this->setIfExists('time_in6', $data ?? [], null);
        $this->setIfExists('time_out6', $data ?? [], null);
        $this->setIfExists('time_in7', $data ?? [], null);
        $this->setIfExists('time_out7', $data ?? [], null);
        $this->setIfExists('time_in8', $data ?? [], null);
        $this->setIfExists('time_out8', $data ?? [], null);
        $this->setIfExists('time_in9', $data ?? [], null);
        $this->setIfExists('time_out9', $data ?? [], null);
        $this->setIfExists('time_in10', $data ?? [], null);
        $this->setIfExists('time_out10', $data ?? [], null);
        $this->setIfExists('time_in11', $data ?? [], null);
        $this->setIfExists('time_out11', $data ?? [], null);
        $this->setIfExists('time_in12', $data ?? [], null);
        $this->setIfExists('time_out12', $data ?? [], null);
        $this->setIfExists('time_in13', $data ?? [], null);
        $this->setIfExists('time_out13', $data ?? [], null);
        $this->setIfExists('time_in14', $data ?? [], null);
        $this->setIfExists('time_out14', $data ?? [], null);
        $this->setIfExists('time_in15', $data ?? [], null);
        $this->setIfExists('time_out15', $data ?? [], null);
        $this->setIfExists('comments', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['api_key'] === null) {
            $invalidProperties[] = "'api_key' can't be null";
        }
        if ((mb_strlen($this->container['api_key']) > 50)) {
            $invalidProperties[] = "invalid value for 'api_key', the character length must be smaller than or equal to 50.";
        }

        if ($this->container['action'] === null) {
            $invalidProperties[] = "'action' can't be null";
        }
        if ($this->container['employee_id'] === null) {
            $invalidProperties[] = "'employee_id' can't be null";
        }
        if ((mb_strlen($this->container['employee_id']) > 15)) {
            $invalidProperties[] = "invalid value for 'employee_id', the character length must be smaller than or equal to 15.";
        }

        if ($this->container['timesheet_date'] === null) {
            $invalidProperties[] = "'timesheet_date' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets api_key
     *
     * @return string
     */
    public function getApiKey()
    {
        return $this->container['api_key'];
    }

    /**
     * Sets api_key
     *
     * @param string $api_key APIKey for employee timesheet api to create employee's new timesheet
     *
     * @return self
     */
    public function setApiKey($api_key)
    {
        if (is_null($api_key)) {
            throw new \InvalidArgumentException('non-nullable api_key cannot be null');
        }
        if ((mb_strlen($api_key) > 50)) {
            throw new \InvalidArgumentException('invalid length for $api_key when calling CreateNewTimesheetDefinition., must be smaller than or equal to 50.');
        }

        $this->container['api_key'] = $api_key;

        return $this;
    }

    /**
     * Gets action
     *
     * @return string
     */
    public function getAction()
    {
        return $this->container['action'];
    }

    /**
     * Sets action
     *
     * @param string $action Action name = CreateNewTimesheet
     *
     * @return self
     */
    public function setAction($action)
    {
        if (is_null($action)) {
            throw new \InvalidArgumentException('non-nullable action cannot be null');
        }
        $this->container['action'] = $action;

        return $this;
    }

    /**
     * Gets employee_id
     *
     * @return string
     */
    public function getEmployeeId()
    {
        return $this->container['employee_id'];
    }

    /**
     * Sets employee_id
     *
     * @param string $employee_id Employee id to create new employee timesheet
     *
     * @return self
     */
    public function setEmployeeId($employee_id)
    {
        if (is_null($employee_id)) {
            throw new \InvalidArgumentException('non-nullable employee_id cannot be null');
        }
        if ((mb_strlen($employee_id) > 15)) {
            throw new \InvalidArgumentException('invalid length for $employee_id when calling CreateNewTimesheetDefinition., must be smaller than or equal to 15.');
        }

        $this->container['employee_id'] = $employee_id;

        return $this;
    }

    /**
     * Gets timesheet_date
     *
     * @return \DateTime
     */
    public function getTimesheetDate()
    {
        return $this->container['timesheet_date'];
    }

    /**
     * Sets timesheet_date
     *
     * @param \DateTime $timesheet_date Employee Timesheet created date
     *
     * @return self
     */
    public function setTimesheetDate($timesheet_date)
    {
        if (is_null($timesheet_date)) {
            throw new \InvalidArgumentException('non-nullable timesheet_date cannot be null');
        }
        $this->container['timesheet_date'] = $timesheet_date;

        return $this;
    }

    /**
     * Gets time_in1
     *
     * @return string|null
     */
    public function getTimeIn1()
    {
        return $this->container['time_in1'];
    }

    /**
     * Sets time_in1
     *
     * @param string|null $time_in1 TimeIn1 value for create new timesheet
     *
     * @return self
     */
    public function setTimeIn1($time_in1)
    {
        if (is_null($time_in1)) {
            throw new \InvalidArgumentException('non-nullable time_in1 cannot be null');
        }
        $this->container['time_in1'] = $time_in1;

        return $this;
    }

    /**
     * Gets time_out1
     *
     * @return string|null
     */
    public function getTimeOut1()
    {
        return $this->container['time_out1'];
    }

    /**
     * Sets time_out1
     *
     * @param string|null $time_out1 TimeOut1 value for create new timesheet
     *
     * @return self
     */
    public function setTimeOut1($time_out1)
    {
        if (is_null($time_out1)) {
            throw new \InvalidArgumentException('non-nullable time_out1 cannot be null');
        }
        $this->container['time_out1'] = $time_out1;

        return $this;
    }

    /**
     * Gets time_in2
     *
     * @return string|null
     */
    public function getTimeIn2()
    {
        return $this->container['time_in2'];
    }

    /**
     * Sets time_in2
     *
     * @param string|null $time_in2 TimeIn2 value for create new timesheet
     *
     * @return self
     */
    public function setTimeIn2($time_in2)
    {
        if (is_null($time_in2)) {
            throw new \InvalidArgumentException('non-nullable time_in2 cannot be null');
        }
        $this->container['time_in2'] = $time_in2;

        return $this;
    }

    /**
     * Gets time_out2
     *
     * @return string|null
     */
    public function getTimeOut2()
    {
        return $this->container['time_out2'];
    }

    /**
     * Sets time_out2
     *
     * @param string|null $time_out2 TimeOut2 value for create new timesheet
     *
     * @return self
     */
    public function setTimeOut2($time_out2)
    {
        if (is_null($time_out2)) {
            throw new \InvalidArgumentException('non-nullable time_out2 cannot be null');
        }
        $this->container['time_out2'] = $time_out2;

        return $this;
    }

    /**
     * Gets time_in3
     *
     * @return string|null
     */
    public function getTimeIn3()
    {
        return $this->container['time_in3'];
    }

    /**
     * Sets time_in3
     *
     * @param string|null $time_in3 TimeIn3 value for create new timesheet
     *
     * @return self
     */
    public function setTimeIn3($time_in3)
    {
        if (is_null($time_in3)) {
            throw new \InvalidArgumentException('non-nullable time_in3 cannot be null');
        }
        $this->container['time_in3'] = $time_in3;

        return $this;
    }

    /**
     * Gets time_out3
     *
     * @return string|null
     */
    public function getTimeOut3()
    {
        return $this->container['time_out3'];
    }

    /**
     * Sets time_out3
     *
     * @param string|null $time_out3 TimeOut3 value for create new timesheet
     *
     * @return self
     */
    public function setTimeOut3($time_out3)
    {
        if (is_null($time_out3)) {
            throw new \InvalidArgumentException('non-nullable time_out3 cannot be null');
        }
        $this->container['time_out3'] = $time_out3;

        return $this;
    }

    /**
     * Gets time_in4
     *
     * @return string|null
     */
    public function getTimeIn4()
    {
        return $this->container['time_in4'];
    }

    /**
     * Sets time_in4
     *
     * @param string|null $time_in4 TimeIn4 value for create new timesheet
     *
     * @return self
     */
    public function setTimeIn4($time_in4)
    {
        if (is_null($time_in4)) {
            throw new \InvalidArgumentException('non-nullable time_in4 cannot be null');
        }
        $this->container['time_in4'] = $time_in4;

        return $this;
    }

    /**
     * Gets time_out4
     *
     * @return string|null
     */
    public function getTimeOut4()
    {
        return $this->container['time_out4'];
    }

    /**
     * Sets time_out4
     *
     * @param string|null $time_out4 TimeOut4 value for create new timesheet
     *
     * @return self
     */
    public function setTimeOut4($time_out4)
    {
        if (is_null($time_out4)) {
            throw new \InvalidArgumentException('non-nullable time_out4 cannot be null');
        }
        $this->container['time_out4'] = $time_out4;

        return $this;
    }

    /**
     * Gets time_in5
     *
     * @return string|null
     */
    public function getTimeIn5()
    {
        return $this->container['time_in5'];
    }

    /**
     * Sets time_in5
     *
     * @param string|null $time_in5 TimeIn5 value for create new timesheet
     *
     * @return self
     */
    public function setTimeIn5($time_in5)
    {
        if (is_null($time_in5)) {
            throw new \InvalidArgumentException('non-nullable time_in5 cannot be null');
        }
        $this->container['time_in5'] = $time_in5;

        return $this;
    }

    /**
     * Gets time_out5
     *
     * @return string|null
     */
    public function getTimeOut5()
    {
        return $this->container['time_out5'];
    }

    /**
     * Sets time_out5
     *
     * @param string|null $time_out5 TimeOut5 value for create new timesheet
     *
     * @return self
     */
    public function setTimeOut5($time_out5)
    {
        if (is_null($time_out5)) {
            throw new \InvalidArgumentException('non-nullable time_out5 cannot be null');
        }
        $this->container['time_out5'] = $time_out5;

        return $this;
    }

    /**
     * Gets time_in6
     *
     * @return string|null
     */
    public function getTimeIn6()
    {
        return $this->container['time_in6'];
    }

    /**
     * Sets time_in6
     *
     * @param string|null $time_in6 TimeIn6 value for create new timesheet
     *
     * @return self
     */
    public function setTimeIn6($time_in6)
    {
        if (is_null($time_in6)) {
            throw new \InvalidArgumentException('non-nullable time_in6 cannot be null');
        }
        $this->container['time_in6'] = $time_in6;

        return $this;
    }

    /**
     * Gets time_out6
     *
     * @return string|null
     */
    public function getTimeOut6()
    {
        return $this->container['time_out6'];
    }

    /**
     * Sets time_out6
     *
     * @param string|null $time_out6 TimeOut6 value for create new timesheet
     *
     * @return self
     */
    public function setTimeOut6($time_out6)
    {
        if (is_null($time_out6)) {
            throw new \InvalidArgumentException('non-nullable time_out6 cannot be null');
        }
        $this->container['time_out6'] = $time_out6;

        return $this;
    }

    /**
     * Gets time_in7
     *
     * @return string|null
     */
    public function getTimeIn7()
    {
        return $this->container['time_in7'];
    }

    /**
     * Sets time_in7
     *
     * @param string|null $time_in7 TimeIn7 value for create new timesheet
     *
     * @return self
     */
    public function setTimeIn7($time_in7)
    {
        if (is_null($time_in7)) {
            throw new \InvalidArgumentException('non-nullable time_in7 cannot be null');
        }
        $this->container['time_in7'] = $time_in7;

        return $this;
    }

    /**
     * Gets time_out7
     *
     * @return string|null
     */
    public function getTimeOut7()
    {
        return $this->container['time_out7'];
    }

    /**
     * Sets time_out7
     *
     * @param string|null $time_out7 TimeOut7 value for create new timesheet
     *
     * @return self
     */
    public function setTimeOut7($time_out7)
    {
        if (is_null($time_out7)) {
            throw new \InvalidArgumentException('non-nullable time_out7 cannot be null');
        }
        $this->container['time_out7'] = $time_out7;

        return $this;
    }

    /**
     * Gets time_in8
     *
     * @return string|null
     */
    public function getTimeIn8()
    {
        return $this->container['time_in8'];
    }

    /**
     * Sets time_in8
     *
     * @param string|null $time_in8 TimeIn8 value for create new timesheet
     *
     * @return self
     */
    public function setTimeIn8($time_in8)
    {
        if (is_null($time_in8)) {
            throw new \InvalidArgumentException('non-nullable time_in8 cannot be null');
        }
        $this->container['time_in8'] = $time_in8;

        return $this;
    }

    /**
     * Gets time_out8
     *
     * @return string|null
     */
    public function getTimeOut8()
    {
        return $this->container['time_out8'];
    }

    /**
     * Sets time_out8
     *
     * @param string|null $time_out8 TimeOut8 value for create new timesheet
     *
     * @return self
     */
    public function setTimeOut8($time_out8)
    {
        if (is_null($time_out8)) {
            throw new \InvalidArgumentException('non-nullable time_out8 cannot be null');
        }
        $this->container['time_out8'] = $time_out8;

        return $this;
    }

    /**
     * Gets time_in9
     *
     * @return string|null
     */
    public function getTimeIn9()
    {
        return $this->container['time_in9'];
    }

    /**
     * Sets time_in9
     *
     * @param string|null $time_in9 TimeIn9 value for create new timesheet
     *
     * @return self
     */
    public function setTimeIn9($time_in9)
    {
        if (is_null($time_in9)) {
            throw new \InvalidArgumentException('non-nullable time_in9 cannot be null');
        }
        $this->container['time_in9'] = $time_in9;

        return $this;
    }

    /**
     * Gets time_out9
     *
     * @return string|null
     */
    public function getTimeOut9()
    {
        return $this->container['time_out9'];
    }

    /**
     * Sets time_out9
     *
     * @param string|null $time_out9 TimeOut9 value for create new timesheet
     *
     * @return self
     */
    public function setTimeOut9($time_out9)
    {
        if (is_null($time_out9)) {
            throw new \InvalidArgumentException('non-nullable time_out9 cannot be null');
        }
        $this->container['time_out9'] = $time_out9;

        return $this;
    }

    /**
     * Gets time_in10
     *
     * @return string|null
     */
    public function getTimeIn10()
    {
        return $this->container['time_in10'];
    }

    /**
     * Sets time_in10
     *
     * @param string|null $time_in10 TimeIn10 value for create new timesheet
     *
     * @return self
     */
    public function setTimeIn10($time_in10)
    {
        if (is_null($time_in10)) {
            throw new \InvalidArgumentException('non-nullable time_in10 cannot be null');
        }
        $this->container['time_in10'] = $time_in10;

        return $this;
    }

    /**
     * Gets time_out10
     *
     * @return string|null
     */
    public function getTimeOut10()
    {
        return $this->container['time_out10'];
    }

    /**
     * Sets time_out10
     *
     * @param string|null $time_out10 TimeOut10 value for create new timesheet
     *
     * @return self
     */
    public function setTimeOut10($time_out10)
    {
        if (is_null($time_out10)) {
            throw new \InvalidArgumentException('non-nullable time_out10 cannot be null');
        }
        $this->container['time_out10'] = $time_out10;

        return $this;
    }

    /**
     * Gets time_in11
     *
     * @return string|null
     */
    public function getTimeIn11()
    {
        return $this->container['time_in11'];
    }

    /**
     * Sets time_in11
     *
     * @param string|null $time_in11 TimeIn11 value for create new timesheet
     *
     * @return self
     */
    public function setTimeIn11($time_in11)
    {
        if (is_null($time_in11)) {
            throw new \InvalidArgumentException('non-nullable time_in11 cannot be null');
        }
        $this->container['time_in11'] = $time_in11;

        return $this;
    }

    /**
     * Gets time_out11
     *
     * @return string|null
     */
    public function getTimeOut11()
    {
        return $this->container['time_out11'];
    }

    /**
     * Sets time_out11
     *
     * @param string|null $time_out11 TimeOut11 value for create new timesheet
     *
     * @return self
     */
    public function setTimeOut11($time_out11)
    {
        if (is_null($time_out11)) {
            throw new \InvalidArgumentException('non-nullable time_out11 cannot be null');
        }
        $this->container['time_out11'] = $time_out11;

        return $this;
    }

    /**
     * Gets time_in12
     *
     * @return string|null
     */
    public function getTimeIn12()
    {
        return $this->container['time_in12'];
    }

    /**
     * Sets time_in12
     *
     * @param string|null $time_in12 TimeIn12 value for create new timesheet
     *
     * @return self
     */
    public function setTimeIn12($time_in12)
    {
        if (is_null($time_in12)) {
            throw new \InvalidArgumentException('non-nullable time_in12 cannot be null');
        }
        $this->container['time_in12'] = $time_in12;

        return $this;
    }

    /**
     * Gets time_out12
     *
     * @return string|null
     */
    public function getTimeOut12()
    {
        return $this->container['time_out12'];
    }

    /**
     * Sets time_out12
     *
     * @param string|null $time_out12 TimeOut12 value for create new timesheet
     *
     * @return self
     */
    public function setTimeOut12($time_out12)
    {
        if (is_null($time_out12)) {
            throw new \InvalidArgumentException('non-nullable time_out12 cannot be null');
        }
        $this->container['time_out12'] = $time_out12;

        return $this;
    }

    /**
     * Gets time_in13
     *
     * @return string|null
     */
    public function getTimeIn13()
    {
        return $this->container['time_in13'];
    }

    /**
     * Sets time_in13
     *
     * @param string|null $time_in13 TimeIn13 value for create new timesheet
     *
     * @return self
     */
    public function setTimeIn13($time_in13)
    {
        if (is_null($time_in13)) {
            throw new \InvalidArgumentException('non-nullable time_in13 cannot be null');
        }
        $this->container['time_in13'] = $time_in13;

        return $this;
    }

    /**
     * Gets time_out13
     *
     * @return string|null
     */
    public function getTimeOut13()
    {
        return $this->container['time_out13'];
    }

    /**
     * Sets time_out13
     *
     * @param string|null $time_out13 TimeOut13 value for create new timesheet
     *
     * @return self
     */
    public function setTimeOut13($time_out13)
    {
        if (is_null($time_out13)) {
            throw new \InvalidArgumentException('non-nullable time_out13 cannot be null');
        }
        $this->container['time_out13'] = $time_out13;

        return $this;
    }

    /**
     * Gets time_in14
     *
     * @return string|null
     */
    public function getTimeIn14()
    {
        return $this->container['time_in14'];
    }

    /**
     * Sets time_in14
     *
     * @param string|null $time_in14 TimeIn14 value for create new timesheet
     *
     * @return self
     */
    public function setTimeIn14($time_in14)
    {
        if (is_null($time_in14)) {
            throw new \InvalidArgumentException('non-nullable time_in14 cannot be null');
        }
        $this->container['time_in14'] = $time_in14;

        return $this;
    }

    /**
     * Gets time_out14
     *
     * @return string|null
     */
    public function getTimeOut14()
    {
        return $this->container['time_out14'];
    }

    /**
     * Sets time_out14
     *
     * @param string|null $time_out14 TimeOut14 value for create new timesheet
     *
     * @return self
     */
    public function setTimeOut14($time_out14)
    {
        if (is_null($time_out14)) {
            throw new \InvalidArgumentException('non-nullable time_out14 cannot be null');
        }
        $this->container['time_out14'] = $time_out14;

        return $this;
    }

    /**
     * Gets time_in15
     *
     * @return string|null
     */
    public function getTimeIn15()
    {
        return $this->container['time_in15'];
    }

    /**
     * Sets time_in15
     *
     * @param string|null $time_in15 TimeIn15 value for create new timesheet
     *
     * @return self
     */
    public function setTimeIn15($time_in15)
    {
        if (is_null($time_in15)) {
            throw new \InvalidArgumentException('non-nullable time_in15 cannot be null');
        }
        $this->container['time_in15'] = $time_in15;

        return $this;
    }

    /**
     * Gets time_out15
     *
     * @return string|null
     */
    public function getTimeOut15()
    {
        return $this->container['time_out15'];
    }

    /**
     * Sets time_out15
     *
     * @param string|null $time_out15 TimeOut15 value for create new timesheet
     *
     * @return self
     */
    public function setTimeOut15($time_out15)
    {
        if (is_null($time_out15)) {
            throw new \InvalidArgumentException('non-nullable time_out15 cannot be null');
        }
        $this->container['time_out15'] = $time_out15;

        return $this;
    }

    /**
     * Gets comments
     *
     * @return string|null
     */
    public function getComments()
    {
        return $this->container['comments'];
    }

    /**
     * Sets comments
     *
     * @param string|null $comments Comments value for create new timesheet
     *
     * @return self
     */
    public function setComments($comments)
    {
        if (is_null($comments)) {
            throw new \InvalidArgumentException('non-nullable comments cannot be null');
        }
        $this->container['comments'] = $comments;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}



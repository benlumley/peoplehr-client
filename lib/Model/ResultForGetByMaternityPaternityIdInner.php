<?php
/**
 * ResultForGetByMaternityPaternityIdInner
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  PeopleHR
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * PeopleHR API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.1
 * Contact: customerservices@peoplehr.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.10.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace PeopleHR\Model;

use \ArrayAccess;
use \PeopleHR\ObjectSerializer;

/**
 * ResultForGetByMaternityPaternityIdInner Class Doc Comment
 *
 * @category Class
 * @package  PeopleHR
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ResultForGetByMaternityPaternityIdInner implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ResultForGetByMaternityPaternityId_inner';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'maternity_paternity_txn_id' => 'int',
        'expected_date' => '\DateTime',
        'due_week_start_date' => '\DateTime',
        'due_week_end_date' => '\DateTime',
        'earliest_start_date' => '\DateTime',
        'continous_weeks_service' => 'float',
        'ordinary_leave_start_date' => '\DateTime',
        'ordinary_leave_end_date' => '\DateTime',
        'additional_leave_start_date' => '\DateTime',
        'additional_leave_end_date' => '\DateTime',
        'actual_start_date' => '\DateTime',
        'actual_end_date' => '\DateTime',
        'comments' => '\PeopleHR\Model\CommentssArrayForGetDetailInner[]',
        'files' => '\PeopleHR\Model\FilesArrayForMaternityPaternityInner[]',
        'reference_id' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'maternity_paternity_txn_id' => null,
        'expected_date' => 'date',
        'due_week_start_date' => 'date',
        'due_week_end_date' => 'date',
        'earliest_start_date' => 'date',
        'continous_weeks_service' => 'decimal',
        'ordinary_leave_start_date' => 'date',
        'ordinary_leave_end_date' => 'date',
        'additional_leave_start_date' => 'date',
        'additional_leave_end_date' => 'date',
        'actual_start_date' => 'date',
        'actual_end_date' => 'date',
        'comments' => null,
        'files' => null,
        'reference_id' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'maternity_paternity_txn_id' => false,
        'expected_date' => false,
        'due_week_start_date' => false,
        'due_week_end_date' => false,
        'earliest_start_date' => false,
        'continous_weeks_service' => false,
        'ordinary_leave_start_date' => false,
        'ordinary_leave_end_date' => false,
        'additional_leave_start_date' => false,
        'additional_leave_end_date' => false,
        'actual_start_date' => false,
        'actual_end_date' => false,
        'comments' => false,
        'files' => false,
        'reference_id' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'maternity_paternity_txn_id' => 'MaternityPaternityTxnId',
        'expected_date' => 'ExpectedDate',
        'due_week_start_date' => 'DueWeekStartDate',
        'due_week_end_date' => 'DueWeekEndDate',
        'earliest_start_date' => 'EarliestStartDate',
        'continous_weeks_service' => 'ContinousWeeksService',
        'ordinary_leave_start_date' => 'OrdinaryLeaveStartDate',
        'ordinary_leave_end_date' => 'OrdinaryLeaveEndDate',
        'additional_leave_start_date' => 'AdditionalLeaveStartDate',
        'additional_leave_end_date' => 'AdditionalLeaveEndDate',
        'actual_start_date' => 'ActualStartDate',
        'actual_end_date' => 'ActualEndDate',
        'comments' => 'Comments',
        'files' => 'Files',
        'reference_id' => 'ReferenceId'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'maternity_paternity_txn_id' => 'setMaternityPaternityTxnId',
        'expected_date' => 'setExpectedDate',
        'due_week_start_date' => 'setDueWeekStartDate',
        'due_week_end_date' => 'setDueWeekEndDate',
        'earliest_start_date' => 'setEarliestStartDate',
        'continous_weeks_service' => 'setContinousWeeksService',
        'ordinary_leave_start_date' => 'setOrdinaryLeaveStartDate',
        'ordinary_leave_end_date' => 'setOrdinaryLeaveEndDate',
        'additional_leave_start_date' => 'setAdditionalLeaveStartDate',
        'additional_leave_end_date' => 'setAdditionalLeaveEndDate',
        'actual_start_date' => 'setActualStartDate',
        'actual_end_date' => 'setActualEndDate',
        'comments' => 'setComments',
        'files' => 'setFiles',
        'reference_id' => 'setReferenceId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'maternity_paternity_txn_id' => 'getMaternityPaternityTxnId',
        'expected_date' => 'getExpectedDate',
        'due_week_start_date' => 'getDueWeekStartDate',
        'due_week_end_date' => 'getDueWeekEndDate',
        'earliest_start_date' => 'getEarliestStartDate',
        'continous_weeks_service' => 'getContinousWeeksService',
        'ordinary_leave_start_date' => 'getOrdinaryLeaveStartDate',
        'ordinary_leave_end_date' => 'getOrdinaryLeaveEndDate',
        'additional_leave_start_date' => 'getAdditionalLeaveStartDate',
        'additional_leave_end_date' => 'getAdditionalLeaveEndDate',
        'actual_start_date' => 'getActualStartDate',
        'actual_end_date' => 'getActualEndDate',
        'comments' => 'getComments',
        'files' => 'getFiles',
        'reference_id' => 'getReferenceId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('maternity_paternity_txn_id', $data ?? [], null);
        $this->setIfExists('expected_date', $data ?? [], null);
        $this->setIfExists('due_week_start_date', $data ?? [], null);
        $this->setIfExists('due_week_end_date', $data ?? [], null);
        $this->setIfExists('earliest_start_date', $data ?? [], null);
        $this->setIfExists('continous_weeks_service', $data ?? [], null);
        $this->setIfExists('ordinary_leave_start_date', $data ?? [], null);
        $this->setIfExists('ordinary_leave_end_date', $data ?? [], null);
        $this->setIfExists('additional_leave_start_date', $data ?? [], null);
        $this->setIfExists('additional_leave_end_date', $data ?? [], null);
        $this->setIfExists('actual_start_date', $data ?? [], null);
        $this->setIfExists('actual_end_date', $data ?? [], null);
        $this->setIfExists('comments', $data ?? [], null);
        $this->setIfExists('files', $data ?? [], null);
        $this->setIfExists('reference_id', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets maternity_paternity_txn_id
     *
     * @return int|null
     */
    public function getMaternityPaternityTxnId()
    {
        return $this->container['maternity_paternity_txn_id'];
    }

    /**
     * Sets maternity_paternity_txn_id
     *
     * @param int|null $maternity_paternity_txn_id CPDId Value
     *
     * @return self
     */
    public function setMaternityPaternityTxnId($maternity_paternity_txn_id)
    {
        if (is_null($maternity_paternity_txn_id)) {
            throw new \InvalidArgumentException('non-nullable maternity_paternity_txn_id cannot be null');
        }
        $this->container['maternity_paternity_txn_id'] = $maternity_paternity_txn_id;

        return $this;
    }

    /**
     * Gets expected_date
     *
     * @return \DateTime|null
     */
    public function getExpectedDate()
    {
        return $this->container['expected_date'];
    }

    /**
     * Sets expected_date
     *
     * @param \DateTime|null $expected_date ExpectedDate value
     *
     * @return self
     */
    public function setExpectedDate($expected_date)
    {
        if (is_null($expected_date)) {
            throw new \InvalidArgumentException('non-nullable expected_date cannot be null');
        }
        $this->container['expected_date'] = $expected_date;

        return $this;
    }

    /**
     * Gets due_week_start_date
     *
     * @return \DateTime|null
     */
    public function getDueWeekStartDate()
    {
        return $this->container['due_week_start_date'];
    }

    /**
     * Sets due_week_start_date
     *
     * @param \DateTime|null $due_week_start_date DueWeekStartDate value
     *
     * @return self
     */
    public function setDueWeekStartDate($due_week_start_date)
    {
        if (is_null($due_week_start_date)) {
            throw new \InvalidArgumentException('non-nullable due_week_start_date cannot be null');
        }
        $this->container['due_week_start_date'] = $due_week_start_date;

        return $this;
    }

    /**
     * Gets due_week_end_date
     *
     * @return \DateTime|null
     */
    public function getDueWeekEndDate()
    {
        return $this->container['due_week_end_date'];
    }

    /**
     * Sets due_week_end_date
     *
     * @param \DateTime|null $due_week_end_date DueWeekEndDate value
     *
     * @return self
     */
    public function setDueWeekEndDate($due_week_end_date)
    {
        if (is_null($due_week_end_date)) {
            throw new \InvalidArgumentException('non-nullable due_week_end_date cannot be null');
        }
        $this->container['due_week_end_date'] = $due_week_end_date;

        return $this;
    }

    /**
     * Gets earliest_start_date
     *
     * @return \DateTime|null
     */
    public function getEarliestStartDate()
    {
        return $this->container['earliest_start_date'];
    }

    /**
     * Sets earliest_start_date
     *
     * @param \DateTime|null $earliest_start_date EarliestStartDate value
     *
     * @return self
     */
    public function setEarliestStartDate($earliest_start_date)
    {
        if (is_null($earliest_start_date)) {
            throw new \InvalidArgumentException('non-nullable earliest_start_date cannot be null');
        }
        $this->container['earliest_start_date'] = $earliest_start_date;

        return $this;
    }

    /**
     * Gets continous_weeks_service
     *
     * @return float|null
     */
    public function getContinousWeeksService()
    {
        return $this->container['continous_weeks_service'];
    }

    /**
     * Sets continous_weeks_service
     *
     * @param float|null $continous_weeks_service ContinousWeeksService value
     *
     * @return self
     */
    public function setContinousWeeksService($continous_weeks_service)
    {
        if (is_null($continous_weeks_service)) {
            throw new \InvalidArgumentException('non-nullable continous_weeks_service cannot be null');
        }
        $this->container['continous_weeks_service'] = $continous_weeks_service;

        return $this;
    }

    /**
     * Gets ordinary_leave_start_date
     *
     * @return \DateTime|null
     */
    public function getOrdinaryLeaveStartDate()
    {
        return $this->container['ordinary_leave_start_date'];
    }

    /**
     * Sets ordinary_leave_start_date
     *
     * @param \DateTime|null $ordinary_leave_start_date OrdinaryLeaveStartDate value
     *
     * @return self
     */
    public function setOrdinaryLeaveStartDate($ordinary_leave_start_date)
    {
        if (is_null($ordinary_leave_start_date)) {
            throw new \InvalidArgumentException('non-nullable ordinary_leave_start_date cannot be null');
        }
        $this->container['ordinary_leave_start_date'] = $ordinary_leave_start_date;

        return $this;
    }

    /**
     * Gets ordinary_leave_end_date
     *
     * @return \DateTime|null
     */
    public function getOrdinaryLeaveEndDate()
    {
        return $this->container['ordinary_leave_end_date'];
    }

    /**
     * Sets ordinary_leave_end_date
     *
     * @param \DateTime|null $ordinary_leave_end_date OrdinaryLeaveEndDate value
     *
     * @return self
     */
    public function setOrdinaryLeaveEndDate($ordinary_leave_end_date)
    {
        if (is_null($ordinary_leave_end_date)) {
            throw new \InvalidArgumentException('non-nullable ordinary_leave_end_date cannot be null');
        }
        $this->container['ordinary_leave_end_date'] = $ordinary_leave_end_date;

        return $this;
    }

    /**
     * Gets additional_leave_start_date
     *
     * @return \DateTime|null
     */
    public function getAdditionalLeaveStartDate()
    {
        return $this->container['additional_leave_start_date'];
    }

    /**
     * Sets additional_leave_start_date
     *
     * @param \DateTime|null $additional_leave_start_date AdditionalLeaveStartDate value
     *
     * @return self
     */
    public function setAdditionalLeaveStartDate($additional_leave_start_date)
    {
        if (is_null($additional_leave_start_date)) {
            throw new \InvalidArgumentException('non-nullable additional_leave_start_date cannot be null');
        }
        $this->container['additional_leave_start_date'] = $additional_leave_start_date;

        return $this;
    }

    /**
     * Gets additional_leave_end_date
     *
     * @return \DateTime|null
     */
    public function getAdditionalLeaveEndDate()
    {
        return $this->container['additional_leave_end_date'];
    }

    /**
     * Sets additional_leave_end_date
     *
     * @param \DateTime|null $additional_leave_end_date AdditionalLeaveEndDate value
     *
     * @return self
     */
    public function setAdditionalLeaveEndDate($additional_leave_end_date)
    {
        if (is_null($additional_leave_end_date)) {
            throw new \InvalidArgumentException('non-nullable additional_leave_end_date cannot be null');
        }
        $this->container['additional_leave_end_date'] = $additional_leave_end_date;

        return $this;
    }

    /**
     * Gets actual_start_date
     *
     * @return \DateTime|null
     */
    public function getActualStartDate()
    {
        return $this->container['actual_start_date'];
    }

    /**
     * Sets actual_start_date
     *
     * @param \DateTime|null $actual_start_date ActualStartDate value
     *
     * @return self
     */
    public function setActualStartDate($actual_start_date)
    {
        if (is_null($actual_start_date)) {
            throw new \InvalidArgumentException('non-nullable actual_start_date cannot be null');
        }
        $this->container['actual_start_date'] = $actual_start_date;

        return $this;
    }

    /**
     * Gets actual_end_date
     *
     * @return \DateTime|null
     */
    public function getActualEndDate()
    {
        return $this->container['actual_end_date'];
    }

    /**
     * Sets actual_end_date
     *
     * @param \DateTime|null $actual_end_date ActualEndDate value
     *
     * @return self
     */
    public function setActualEndDate($actual_end_date)
    {
        if (is_null($actual_end_date)) {
            throw new \InvalidArgumentException('non-nullable actual_end_date cannot be null');
        }
        $this->container['actual_end_date'] = $actual_end_date;

        return $this;
    }

    /**
     * Gets comments
     *
     * @return \PeopleHR\Model\CommentssArrayForGetDetailInner[]|null
     */
    public function getComments()
    {
        return $this->container['comments'];
    }

    /**
     * Sets comments
     *
     * @param \PeopleHR\Model\CommentssArrayForGetDetailInner[]|null $comments Comments for get details
     *
     * @return self
     */
    public function setComments($comments)
    {
        if (is_null($comments)) {
            throw new \InvalidArgumentException('non-nullable comments cannot be null');
        }
        $this->container['comments'] = $comments;

        return $this;
    }

    /**
     * Gets files
     *
     * @return \PeopleHR\Model\FilesArrayForMaternityPaternityInner[]|null
     */
    public function getFiles()
    {
        return $this->container['files'];
    }

    /**
     * Sets files
     *
     * @param \PeopleHR\Model\FilesArrayForMaternityPaternityInner[]|null $files Files for get details
     *
     * @return self
     */
    public function setFiles($files)
    {
        if (is_null($files)) {
            throw new \InvalidArgumentException('non-nullable files cannot be null');
        }
        $this->container['files'] = $files;

        return $this;
    }

    /**
     * Gets reference_id
     *
     * @return string|null
     */
    public function getReferenceId()
    {
        return $this->container['reference_id'];
    }

    /**
     * Sets reference_id
     *
     * @param string|null $reference_id ReferenceId value
     *
     * @return self
     */
    public function setReferenceId($reference_id)
    {
        if (is_null($reference_id)) {
            throw new \InvalidArgumentException('non-nullable reference_id cannot be null');
        }
        $this->container['reference_id'] = $reference_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}



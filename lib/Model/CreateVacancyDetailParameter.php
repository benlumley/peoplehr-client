<?php
/**
 * CreateVacancyDetailParameter
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * PeopleHR API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.1
 * Contact: customerservices@peoplehr.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.10.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * CreateVacancyDetailParameter Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class CreateVacancyDetailParameter implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'CreateVacancyDetailParameter';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'api_key' => 'string',
        'action' => 'string',
        'vacancy_name' => 'string',
        'vacancy_description' => 'string',
        'company' => 'string',
        'location' => 'string',
        'department' => 'string',
        'closing_date' => '\DateTime',
        'reference' => 'string',
        'comment' => 'string',
        'salary_range' => 'string',
        'job_description' => 'string',
        'is_cover_letter_mandatory' => 'bool',
        'is_resume_mandatory' => 'bool',
        'is_hide_salary' => 'bool',
        'vacancy_type' => '\OpenAPI\Client\Model\VacancyType',
        'job_title' => 'string',
        'city' => 'string',
        'country' => 'string',
        'experience' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'api_key' => null,
        'action' => null,
        'vacancy_name' => null,
        'vacancy_description' => null,
        'company' => null,
        'location' => null,
        'department' => null,
        'closing_date' => 'date',
        'reference' => null,
        'comment' => null,
        'salary_range' => null,
        'job_description' => null,
        'is_cover_letter_mandatory' => null,
        'is_resume_mandatory' => null,
        'is_hide_salary' => null,
        'vacancy_type' => null,
        'job_title' => null,
        'city' => null,
        'country' => null,
        'experience' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'api_key' => false,
        'action' => false,
        'vacancy_name' => false,
        'vacancy_description' => false,
        'company' => false,
        'location' => false,
        'department' => false,
        'closing_date' => false,
        'reference' => false,
        'comment' => false,
        'salary_range' => false,
        'job_description' => false,
        'is_cover_letter_mandatory' => false,
        'is_resume_mandatory' => false,
        'is_hide_salary' => false,
        'vacancy_type' => false,
        'job_title' => false,
        'city' => false,
        'country' => false,
        'experience' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'api_key' => 'APIKey',
        'action' => 'Action',
        'vacancy_name' => 'VacancyName',
        'vacancy_description' => 'VacancyDescription',
        'company' => 'Company',
        'location' => 'Location',
        'department' => 'Department',
        'closing_date' => 'ClosingDate',
        'reference' => 'Reference',
        'comment' => 'Comment',
        'salary_range' => 'SalaryRange',
        'job_description' => 'JobDescription',
        'is_cover_letter_mandatory' => 'IsCoverLetterMandatory',
        'is_resume_mandatory' => 'IsResumeMandatory',
        'is_hide_salary' => 'IsHideSalary',
        'vacancy_type' => 'VacancyType',
        'job_title' => 'JobTitle',
        'city' => 'City',
        'country' => 'Country',
        'experience' => 'Experience'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'api_key' => 'setApiKey',
        'action' => 'setAction',
        'vacancy_name' => 'setVacancyName',
        'vacancy_description' => 'setVacancyDescription',
        'company' => 'setCompany',
        'location' => 'setLocation',
        'department' => 'setDepartment',
        'closing_date' => 'setClosingDate',
        'reference' => 'setReference',
        'comment' => 'setComment',
        'salary_range' => 'setSalaryRange',
        'job_description' => 'setJobDescription',
        'is_cover_letter_mandatory' => 'setIsCoverLetterMandatory',
        'is_resume_mandatory' => 'setIsResumeMandatory',
        'is_hide_salary' => 'setIsHideSalary',
        'vacancy_type' => 'setVacancyType',
        'job_title' => 'setJobTitle',
        'city' => 'setCity',
        'country' => 'setCountry',
        'experience' => 'setExperience'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'api_key' => 'getApiKey',
        'action' => 'getAction',
        'vacancy_name' => 'getVacancyName',
        'vacancy_description' => 'getVacancyDescription',
        'company' => 'getCompany',
        'location' => 'getLocation',
        'department' => 'getDepartment',
        'closing_date' => 'getClosingDate',
        'reference' => 'getReference',
        'comment' => 'getComment',
        'salary_range' => 'getSalaryRange',
        'job_description' => 'getJobDescription',
        'is_cover_letter_mandatory' => 'getIsCoverLetterMandatory',
        'is_resume_mandatory' => 'getIsResumeMandatory',
        'is_hide_salary' => 'getIsHideSalary',
        'vacancy_type' => 'getVacancyType',
        'job_title' => 'getJobTitle',
        'city' => 'getCity',
        'country' => 'getCountry',
        'experience' => 'getExperience'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('api_key', $data ?? [], null);
        $this->setIfExists('action', $data ?? [], null);
        $this->setIfExists('vacancy_name', $data ?? [], null);
        $this->setIfExists('vacancy_description', $data ?? [], null);
        $this->setIfExists('company', $data ?? [], null);
        $this->setIfExists('location', $data ?? [], null);
        $this->setIfExists('department', $data ?? [], null);
        $this->setIfExists('closing_date', $data ?? [], null);
        $this->setIfExists('reference', $data ?? [], null);
        $this->setIfExists('comment', $data ?? [], null);
        $this->setIfExists('salary_range', $data ?? [], null);
        $this->setIfExists('job_description', $data ?? [], null);
        $this->setIfExists('is_cover_letter_mandatory', $data ?? [], null);
        $this->setIfExists('is_resume_mandatory', $data ?? [], null);
        $this->setIfExists('is_hide_salary', $data ?? [], null);
        $this->setIfExists('vacancy_type', $data ?? [], null);
        $this->setIfExists('job_title', $data ?? [], null);
        $this->setIfExists('city', $data ?? [], null);
        $this->setIfExists('country', $data ?? [], null);
        $this->setIfExists('experience', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['api_key'] === null) {
            $invalidProperties[] = "'api_key' can't be null";
        }
        if ((mb_strlen($this->container['api_key']) > 50)) {
            $invalidProperties[] = "invalid value for 'api_key', the character length must be smaller than or equal to 50.";
        }

        if ($this->container['action'] === null) {
            $invalidProperties[] = "'action' can't be null";
        }
        if ($this->container['vacancy_name'] === null) {
            $invalidProperties[] = "'vacancy_name' can't be null";
        }
        if ($this->container['vacancy_description'] === null) {
            $invalidProperties[] = "'vacancy_description' can't be null";
        }
        if (!is_null($this->container['company']) && (mb_strlen($this->container['company']) > 100)) {
            $invalidProperties[] = "invalid value for 'company', the character length must be smaller than or equal to 100.";
        }

        if ($this->container['reference'] === null) {
            $invalidProperties[] = "'reference' can't be null";
        }
        if (!is_null($this->container['comment']) && (mb_strlen($this->container['comment']) > 1024)) {
            $invalidProperties[] = "invalid value for 'comment', the character length must be smaller than or equal to 1024.";
        }

        if ($this->container['is_cover_letter_mandatory'] === null) {
            $invalidProperties[] = "'is_cover_letter_mandatory' can't be null";
        }
        if ($this->container['is_resume_mandatory'] === null) {
            $invalidProperties[] = "'is_resume_mandatory' can't be null";
        }
        if ($this->container['is_hide_salary'] === null) {
            $invalidProperties[] = "'is_hide_salary' can't be null";
        }
        if ($this->container['vacancy_type'] === null) {
            $invalidProperties[] = "'vacancy_type' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets api_key
     *
     * @return string
     */
    public function getApiKey()
    {
        return $this->container['api_key'];
    }

    /**
     * Sets api_key
     *
     * @param string $api_key APIKey for vacancy api to create new vacancy
     *
     * @return self
     */
    public function setApiKey($api_key)
    {
        if (is_null($api_key)) {
            throw new \InvalidArgumentException('non-nullable api_key cannot be null');
        }
        if ((mb_strlen($api_key) > 50)) {
            throw new \InvalidArgumentException('invalid length for $api_key when calling CreateVacancyDetailParameter., must be smaller than or equal to 50.');
        }

        $this->container['api_key'] = $api_key;

        return $this;
    }

    /**
     * Gets action
     *
     * @return string
     */
    public function getAction()
    {
        return $this->container['action'];
    }

    /**
     * Sets action
     *
     * @param string $action Action name = CreateNewVacancy
     *
     * @return self
     */
    public function setAction($action)
    {
        if (is_null($action)) {
            throw new \InvalidArgumentException('non-nullable action cannot be null');
        }
        $this->container['action'] = $action;

        return $this;
    }

    /**
     * Gets vacancy_name
     *
     * @return string
     */
    public function getVacancyName()
    {
        return $this->container['vacancy_name'];
    }

    /**
     * Sets vacancy_name
     *
     * @param string $vacancy_name Vacancy name for create new vacancy
     *
     * @return self
     */
    public function setVacancyName($vacancy_name)
    {
        if (is_null($vacancy_name)) {
            throw new \InvalidArgumentException('non-nullable vacancy_name cannot be null');
        }
        $this->container['vacancy_name'] = $vacancy_name;

        return $this;
    }

    /**
     * Gets vacancy_description
     *
     * @return string
     */
    public function getVacancyDescription()
    {
        return $this->container['vacancy_description'];
    }

    /**
     * Sets vacancy_description
     *
     * @param string $vacancy_description Vacancy description for create new vacancy
     *
     * @return self
     */
    public function setVacancyDescription($vacancy_description)
    {
        if (is_null($vacancy_description)) {
            throw new \InvalidArgumentException('non-nullable vacancy_description cannot be null');
        }
        $this->container['vacancy_description'] = $vacancy_description;

        return $this;
    }

    /**
     * Gets company
     *
     * @return string|null
     */
    public function getCompany()
    {
        return $this->container['company'];
    }

    /**
     * Sets company
     *
     * @param string|null $company Company name for create new vacancy
     *
     * @return self
     */
    public function setCompany($company)
    {
        if (is_null($company)) {
            throw new \InvalidArgumentException('non-nullable company cannot be null');
        }
        if ((mb_strlen($company) > 100)) {
            throw new \InvalidArgumentException('invalid length for $company when calling CreateVacancyDetailParameter., must be smaller than or equal to 100.');
        }

        $this->container['company'] = $company;

        return $this;
    }

    /**
     * Gets location
     *
     * @return string|null
     */
    public function getLocation()
    {
        return $this->container['location'];
    }

    /**
     * Sets location
     *
     * @param string|null $location Location for create new vacancy
     *
     * @return self
     */
    public function setLocation($location)
    {
        if (is_null($location)) {
            throw new \InvalidArgumentException('non-nullable location cannot be null');
        }
        $this->container['location'] = $location;

        return $this;
    }

    /**
     * Gets department
     *
     * @return string|null
     */
    public function getDepartment()
    {
        return $this->container['department'];
    }

    /**
     * Sets department
     *
     * @param string|null $department Department for create new vacancy
     *
     * @return self
     */
    public function setDepartment($department)
    {
        if (is_null($department)) {
            throw new \InvalidArgumentException('non-nullable department cannot be null');
        }
        $this->container['department'] = $department;

        return $this;
    }

    /**
     * Gets closing_date
     *
     * @return \DateTime|null
     */
    public function getClosingDate()
    {
        return $this->container['closing_date'];
    }

    /**
     * Sets closing_date
     *
     * @param \DateTime|null $closing_date Closing date for create new vacancy
     *
     * @return self
     */
    public function setClosingDate($closing_date)
    {
        if (is_null($closing_date)) {
            throw new \InvalidArgumentException('non-nullable closing_date cannot be null');
        }
        $this->container['closing_date'] = $closing_date;

        return $this;
    }

    /**
     * Gets reference
     *
     * @return string
     */
    public function getReference()
    {
        return $this->container['reference'];
    }

    /**
     * Sets reference
     *
     * @param string $reference Reference for create new vacancy
     *
     * @return self
     */
    public function setReference($reference)
    {
        if (is_null($reference)) {
            throw new \InvalidArgumentException('non-nullable reference cannot be null');
        }
        $this->container['reference'] = $reference;

        return $this;
    }

    /**
     * Gets comment
     *
     * @return string|null
     */
    public function getComment()
    {
        return $this->container['comment'];
    }

    /**
     * Sets comment
     *
     * @param string|null $comment Comment for create new vacancy
     *
     * @return self
     */
    public function setComment($comment)
    {
        if (is_null($comment)) {
            throw new \InvalidArgumentException('non-nullable comment cannot be null');
        }
        if ((mb_strlen($comment) > 1024)) {
            throw new \InvalidArgumentException('invalid length for $comment when calling CreateVacancyDetailParameter., must be smaller than or equal to 1024.');
        }

        $this->container['comment'] = $comment;

        return $this;
    }

    /**
     * Gets salary_range
     *
     * @return string|null
     */
    public function getSalaryRange()
    {
        return $this->container['salary_range'];
    }

    /**
     * Sets salary_range
     *
     * @param string|null $salary_range Salary range for create new vacancy
     *
     * @return self
     */
    public function setSalaryRange($salary_range)
    {
        if (is_null($salary_range)) {
            throw new \InvalidArgumentException('non-nullable salary_range cannot be null');
        }
        $this->container['salary_range'] = $salary_range;

        return $this;
    }

    /**
     * Gets job_description
     *
     * @return string|null
     */
    public function getJobDescription()
    {
        return $this->container['job_description'];
    }

    /**
     * Sets job_description
     *
     * @param string|null $job_description Job description for create new vacancy
     *
     * @return self
     */
    public function setJobDescription($job_description)
    {
        if (is_null($job_description)) {
            throw new \InvalidArgumentException('non-nullable job_description cannot be null');
        }
        $this->container['job_description'] = $job_description;

        return $this;
    }

    /**
     * Gets is_cover_letter_mandatory
     *
     * @return bool
     */
    public function getIsCoverLetterMandatory()
    {
        return $this->container['is_cover_letter_mandatory'];
    }

    /**
     * Sets is_cover_letter_mandatory
     *
     * @param bool $is_cover_letter_mandatory Is cover letter mandatory for create new vacancy
     *
     * @return self
     */
    public function setIsCoverLetterMandatory($is_cover_letter_mandatory)
    {
        if (is_null($is_cover_letter_mandatory)) {
            throw new \InvalidArgumentException('non-nullable is_cover_letter_mandatory cannot be null');
        }
        $this->container['is_cover_letter_mandatory'] = $is_cover_letter_mandatory;

        return $this;
    }

    /**
     * Gets is_resume_mandatory
     *
     * @return bool
     */
    public function getIsResumeMandatory()
    {
        return $this->container['is_resume_mandatory'];
    }

    /**
     * Sets is_resume_mandatory
     *
     * @param bool $is_resume_mandatory Is resume mandatory for create new vacancy
     *
     * @return self
     */
    public function setIsResumeMandatory($is_resume_mandatory)
    {
        if (is_null($is_resume_mandatory)) {
            throw new \InvalidArgumentException('non-nullable is_resume_mandatory cannot be null');
        }
        $this->container['is_resume_mandatory'] = $is_resume_mandatory;

        return $this;
    }

    /**
     * Gets is_hide_salary
     *
     * @return bool
     */
    public function getIsHideSalary()
    {
        return $this->container['is_hide_salary'];
    }

    /**
     * Sets is_hide_salary
     *
     * @param bool $is_hide_salary Is hide salary for create new vacancy
     *
     * @return self
     */
    public function setIsHideSalary($is_hide_salary)
    {
        if (is_null($is_hide_salary)) {
            throw new \InvalidArgumentException('non-nullable is_hide_salary cannot be null');
        }
        $this->container['is_hide_salary'] = $is_hide_salary;

        return $this;
    }

    /**
     * Gets vacancy_type
     *
     * @return \OpenAPI\Client\Model\VacancyType
     */
    public function getVacancyType()
    {
        return $this->container['vacancy_type'];
    }

    /**
     * Sets vacancy_type
     *
     * @param \OpenAPI\Client\Model\VacancyType $vacancy_type Vacancy type for create new vacancy
     *
     * @return self
     */
    public function setVacancyType($vacancy_type)
    {
        if (is_null($vacancy_type)) {
            throw new \InvalidArgumentException('non-nullable vacancy_type cannot be null');
        }
        $this->container['vacancy_type'] = $vacancy_type;

        return $this;
    }

    /**
     * Gets job_title
     *
     * @return string|null
     */
    public function getJobTitle()
    {
        return $this->container['job_title'];
    }

    /**
     * Sets job_title
     *
     * @param string|null $job_title Job title for create new vacancy
     *
     * @return self
     */
    public function setJobTitle($job_title)
    {
        if (is_null($job_title)) {
            throw new \InvalidArgumentException('non-nullable job_title cannot be null');
        }
        $this->container['job_title'] = $job_title;

        return $this;
    }

    /**
     * Gets city
     *
     * @return string|null
     */
    public function getCity()
    {
        return $this->container['city'];
    }

    /**
     * Sets city
     *
     * @param string|null $city City for create new vacancy
     *
     * @return self
     */
    public function setCity($city)
    {
        if (is_null($city)) {
            throw new \InvalidArgumentException('non-nullable city cannot be null');
        }
        $this->container['city'] = $city;

        return $this;
    }

    /**
     * Gets country
     *
     * @return string|null
     */
    public function getCountry()
    {
        return $this->container['country'];
    }

    /**
     * Sets country
     *
     * @param string|null $country Country value
     *
     * @return self
     */
    public function setCountry($country)
    {
        if (is_null($country)) {
            throw new \InvalidArgumentException('non-nullable country cannot be null');
        }
        $this->container['country'] = $country;

        return $this;
    }

    /**
     * Gets experience
     *
     * @return string|null
     */
    public function getExperience()
    {
        return $this->container['experience'];
    }

    /**
     * Sets experience
     *
     * @param string|null $experience Experience
     *
     * @return self
     */
    public function setExperience($experience)
    {
        if (is_null($experience)) {
            throw new \InvalidArgumentException('non-nullable experience cannot be null');
        }
        $this->container['experience'] = $experience;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}



<?php
/**
 * UpdateTrainingDetailParameter
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  PeopleHR
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * PeopleHR API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.1
 * Contact: customerservices@peoplehr.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.10.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace PeopleHR\Model;

use \ArrayAccess;
use \PeopleHR\ObjectSerializer;

/**
 * UpdateTrainingDetailParameter Class Doc Comment
 *
 * @category Class
 * @package  PeopleHR
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class UpdateTrainingDetailParameter implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'UpdateTrainingDetailParameter';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'api_key' => 'string',
        'action' => 'string',
        'employee_id' => 'string',
        'training_type' => 'string',
        'description' => 'string',
        'importance' => 'int',
        'status' => 'int',
        'in_progress' => 'string',
        'training_date' => '\DateTime',
        'trainind_end_date' => '\DateTime',
        'training_expiry_date' => '\DateTime',
        'cost' => 'float',
        'provider' => 'string',
        'notes' => 'string',
        'custom_columns' => '\PeopleHR\Model\CustomColumnsForEmployeeTrainingInner[]',
        'add_files' => '\PeopleHR\Model\AddFilesForEmployeeTrainingInner[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'api_key' => null,
        'action' => null,
        'employee_id' => null,
        'training_type' => null,
        'description' => null,
        'importance' => null,
        'status' => null,
        'in_progress' => null,
        'training_date' => 'date',
        'trainind_end_date' => 'date',
        'training_expiry_date' => 'date',
        'cost' => 'decimal',
        'provider' => null,
        'notes' => null,
        'custom_columns' => null,
        'add_files' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'api_key' => false,
        'action' => false,
        'employee_id' => false,
        'training_type' => false,
        'description' => false,
        'importance' => false,
        'status' => false,
        'in_progress' => false,
        'training_date' => false,
        'trainind_end_date' => false,
        'training_expiry_date' => false,
        'cost' => false,
        'provider' => false,
        'notes' => false,
        'custom_columns' => false,
        'add_files' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'api_key' => 'APIKey',
        'action' => 'Action',
        'employee_id' => 'EmployeeId',
        'training_type' => 'TrainingType',
        'description' => 'Description',
        'importance' => 'Importance',
        'status' => 'Status',
        'in_progress' => 'InProgress',
        'training_date' => 'TrainingDate',
        'trainind_end_date' => 'TrainindEndDate',
        'training_expiry_date' => 'TrainingExpiryDate',
        'cost' => 'Cost',
        'provider' => 'Provider',
        'notes' => 'Notes',
        'custom_columns' => 'CustomColumns',
        'add_files' => 'AddFiles'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'api_key' => 'setApiKey',
        'action' => 'setAction',
        'employee_id' => 'setEmployeeId',
        'training_type' => 'setTrainingType',
        'description' => 'setDescription',
        'importance' => 'setImportance',
        'status' => 'setStatus',
        'in_progress' => 'setInProgress',
        'training_date' => 'setTrainingDate',
        'trainind_end_date' => 'setTrainindEndDate',
        'training_expiry_date' => 'setTrainingExpiryDate',
        'cost' => 'setCost',
        'provider' => 'setProvider',
        'notes' => 'setNotes',
        'custom_columns' => 'setCustomColumns',
        'add_files' => 'setAddFiles'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'api_key' => 'getApiKey',
        'action' => 'getAction',
        'employee_id' => 'getEmployeeId',
        'training_type' => 'getTrainingType',
        'description' => 'getDescription',
        'importance' => 'getImportance',
        'status' => 'getStatus',
        'in_progress' => 'getInProgress',
        'training_date' => 'getTrainingDate',
        'trainind_end_date' => 'getTrainindEndDate',
        'training_expiry_date' => 'getTrainingExpiryDate',
        'cost' => 'getCost',
        'provider' => 'getProvider',
        'notes' => 'getNotes',
        'custom_columns' => 'getCustomColumns',
        'add_files' => 'getAddFiles'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('api_key', $data ?? [], null);
        $this->setIfExists('action', $data ?? [], null);
        $this->setIfExists('employee_id', $data ?? [], null);
        $this->setIfExists('training_type', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('importance', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('in_progress', $data ?? [], null);
        $this->setIfExists('training_date', $data ?? [], null);
        $this->setIfExists('trainind_end_date', $data ?? [], null);
        $this->setIfExists('training_expiry_date', $data ?? [], null);
        $this->setIfExists('cost', $data ?? [], null);
        $this->setIfExists('provider', $data ?? [], null);
        $this->setIfExists('notes', $data ?? [], null);
        $this->setIfExists('custom_columns', $data ?? [], null);
        $this->setIfExists('add_files', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['api_key'] === null) {
            $invalidProperties[] = "'api_key' can't be null";
        }
        if ((mb_strlen($this->container['api_key']) > 50)) {
            $invalidProperties[] = "invalid value for 'api_key', the character length must be smaller than or equal to 50.";
        }

        if ($this->container['action'] === null) {
            $invalidProperties[] = "'action' can't be null";
        }
        if ($this->container['employee_id'] === null) {
            $invalidProperties[] = "'employee_id' can't be null";
        }
        if ((mb_strlen($this->container['employee_id']) > 15)) {
            $invalidProperties[] = "invalid value for 'employee_id', the character length must be smaller than or equal to 15.";
        }

        if ($this->container['training_type'] === null) {
            $invalidProperties[] = "'training_type' can't be null";
        }
        if ($this->container['description'] === null) {
            $invalidProperties[] = "'description' can't be null";
        }
        if ($this->container['importance'] === null) {
            $invalidProperties[] = "'importance' can't be null";
        }
        if ($this->container['status'] === null) {
            $invalidProperties[] = "'status' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets api_key
     *
     * @return string
     */
    public function getApiKey()
    {
        return $this->container['api_key'];
    }

    /**
     * Sets api_key
     *
     * @param string $api_key APIKey for update training detail
     *
     * @return self
     */
    public function setApiKey($api_key)
    {
        if (is_null($api_key)) {
            throw new \InvalidArgumentException('non-nullable api_key cannot be null');
        }
        if ((mb_strlen($api_key) > 50)) {
            throw new \InvalidArgumentException('invalid length for $api_key when calling UpdateTrainingDetailParameter., must be smaller than or equal to 50.');
        }

        $this->container['api_key'] = $api_key;

        return $this;
    }

    /**
     * Gets action
     *
     * @return string
     */
    public function getAction()
    {
        return $this->container['action'];
    }

    /**
     * Sets action
     *
     * @param string $action Action name = updatetrainingdetail
     *
     * @return self
     */
    public function setAction($action)
    {
        if (is_null($action)) {
            throw new \InvalidArgumentException('non-nullable action cannot be null');
        }
        $this->container['action'] = $action;

        return $this;
    }

    /**
     * Gets employee_id
     *
     * @return string
     */
    public function getEmployeeId()
    {
        return $this->container['employee_id'];
    }

    /**
     * Sets employee_id
     *
     * @param string $employee_id Employee id for update training detail
     *
     * @return self
     */
    public function setEmployeeId($employee_id)
    {
        if (is_null($employee_id)) {
            throw new \InvalidArgumentException('non-nullable employee_id cannot be null');
        }
        if ((mb_strlen($employee_id) > 15)) {
            throw new \InvalidArgumentException('invalid length for $employee_id when calling UpdateTrainingDetailParameter., must be smaller than or equal to 15.');
        }

        $this->container['employee_id'] = $employee_id;

        return $this;
    }

    /**
     * Gets training_type
     *
     * @return string
     */
    public function getTrainingType()
    {
        return $this->container['training_type'];
    }

    /**
     * Sets training_type
     *
     * @param string $training_type Training type for update training detail
     *
     * @return self
     */
    public function setTrainingType($training_type)
    {
        if (is_null($training_type)) {
            throw new \InvalidArgumentException('non-nullable training_type cannot be null');
        }
        $this->container['training_type'] = $training_type;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description Description for update training detail
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            throw new \InvalidArgumentException('non-nullable description cannot be null');
        }
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets importance
     *
     * @return int
     */
    public function getImportance()
    {
        return $this->container['importance'];
    }

    /**
     * Sets importance
     *
     * @param int $importance Importance for update training detail
     *
     * @return self
     */
    public function setImportance($importance)
    {
        if (is_null($importance)) {
            throw new \InvalidArgumentException('non-nullable importance cannot be null');
        }
        $this->container['importance'] = $importance;

        return $this;
    }

    /**
     * Gets status
     *
     * @return int
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param int $status Status for update training detail
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets in_progress
     *
     * @return string|null
     */
    public function getInProgress()
    {
        return $this->container['in_progress'];
    }

    /**
     * Sets in_progress
     *
     * @param string|null $in_progress InProgress for update training detail
     *
     * @return self
     */
    public function setInProgress($in_progress)
    {
        if (is_null($in_progress)) {
            throw new \InvalidArgumentException('non-nullable in_progress cannot be null');
        }
        $this->container['in_progress'] = $in_progress;

        return $this;
    }

    /**
     * Gets training_date
     *
     * @return \DateTime|null
     */
    public function getTrainingDate()
    {
        return $this->container['training_date'];
    }

    /**
     * Sets training_date
     *
     * @param \DateTime|null $training_date Training date for update training detail
     *
     * @return self
     */
    public function setTrainingDate($training_date)
    {
        if (is_null($training_date)) {
            throw new \InvalidArgumentException('non-nullable training_date cannot be null');
        }
        $this->container['training_date'] = $training_date;

        return $this;
    }

    /**
     * Gets trainind_end_date
     *
     * @return \DateTime|null
     */
    public function getTrainindEndDate()
    {
        return $this->container['trainind_end_date'];
    }

    /**
     * Sets trainind_end_date
     *
     * @param \DateTime|null $trainind_end_date Training end date for update training detail
     *
     * @return self
     */
    public function setTrainindEndDate($trainind_end_date)
    {
        if (is_null($trainind_end_date)) {
            throw new \InvalidArgumentException('non-nullable trainind_end_date cannot be null');
        }
        $this->container['trainind_end_date'] = $trainind_end_date;

        return $this;
    }

    /**
     * Gets training_expiry_date
     *
     * @return \DateTime|null
     */
    public function getTrainingExpiryDate()
    {
        return $this->container['training_expiry_date'];
    }

    /**
     * Sets training_expiry_date
     *
     * @param \DateTime|null $training_expiry_date Training expiry date for update training detail
     *
     * @return self
     */
    public function setTrainingExpiryDate($training_expiry_date)
    {
        if (is_null($training_expiry_date)) {
            throw new \InvalidArgumentException('non-nullable training_expiry_date cannot be null');
        }
        $this->container['training_expiry_date'] = $training_expiry_date;

        return $this;
    }

    /**
     * Gets cost
     *
     * @return float|null
     */
    public function getCost()
    {
        return $this->container['cost'];
    }

    /**
     * Sets cost
     *
     * @param float|null $cost Cost for update training detail
     *
     * @return self
     */
    public function setCost($cost)
    {
        if (is_null($cost)) {
            throw new \InvalidArgumentException('non-nullable cost cannot be null');
        }
        $this->container['cost'] = $cost;

        return $this;
    }

    /**
     * Gets provider
     *
     * @return string|null
     */
    public function getProvider()
    {
        return $this->container['provider'];
    }

    /**
     * Sets provider
     *
     * @param string|null $provider Provider for update training detail
     *
     * @return self
     */
    public function setProvider($provider)
    {
        if (is_null($provider)) {
            throw new \InvalidArgumentException('non-nullable provider cannot be null');
        }
        $this->container['provider'] = $provider;

        return $this;
    }

    /**
     * Gets notes
     *
     * @return string|null
     */
    public function getNotes()
    {
        return $this->container['notes'];
    }

    /**
     * Sets notes
     *
     * @param string|null $notes Notes for update training detail
     *
     * @return self
     */
    public function setNotes($notes)
    {
        if (is_null($notes)) {
            throw new \InvalidArgumentException('non-nullable notes cannot be null');
        }
        $this->container['notes'] = $notes;

        return $this;
    }

    /**
     * Gets custom_columns
     *
     * @return \PeopleHR\Model\CustomColumnsForEmployeeTrainingInner[]|null
     */
    public function getCustomColumns()
    {
        return $this->container['custom_columns'];
    }

    /**
     * Sets custom_columns
     *
     * @param \PeopleHR\Model\CustomColumnsForEmployeeTrainingInner[]|null $custom_columns Custom columns for update training detail
     *
     * @return self
     */
    public function setCustomColumns($custom_columns)
    {
        if (is_null($custom_columns)) {
            throw new \InvalidArgumentException('non-nullable custom_columns cannot be null');
        }
        $this->container['custom_columns'] = $custom_columns;

        return $this;
    }

    /**
     * Gets add_files
     *
     * @return \PeopleHR\Model\AddFilesForEmployeeTrainingInner[]|null
     */
    public function getAddFiles()
    {
        return $this->container['add_files'];
    }

    /**
     * Sets add_files
     *
     * @param \PeopleHR\Model\AddFilesForEmployeeTrainingInner[]|null $add_files Add files for update training detail
     *
     * @return self
     */
    public function setAddFiles($add_files)
    {
        if (is_null($add_files)) {
            throw new \InvalidArgumentException('non-nullable add_files cannot be null');
        }
        $this->container['add_files'] = $add_files;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}



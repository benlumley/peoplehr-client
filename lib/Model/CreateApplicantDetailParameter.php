<?php
/**
 * CreateApplicantDetailParameter
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  PeopleHR
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * PeopleHR API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.1
 * Contact: customerservices@peoplehr.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.10.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace PeopleHR\Model;

use \ArrayAccess;
use \PeopleHR\ObjectSerializer;

/**
 * CreateApplicantDetailParameter Class Doc Comment
 *
 * @category Class
 * @package  PeopleHR
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class CreateApplicantDetailParameter implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'CreateApplicantDetailParameter';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'api_key' => 'string',
        'action' => 'string',
        'vacancy_reference' => 'string',
        'first_name' => 'string',
        'last_name' => 'string',
        'email' => 'string',
        'gender' => '\PeopleHR\Model\Gender',
        'date_of_birth' => '\DateTime',
        'post_code' => 'string',
        'address' => 'string',
        'phone_number' => 'string',
        'other_contact_details' => 'string',
        'source' => 'string',
        'additional_questions' => '\PeopleHR\Model\AdditionalQuestionsForCreatenewApplicantArrayInner[]',
        'internal_questions' => '\PeopleHR\Model\AdditionalQuestionsForCreatenewApplicantArrayInner[]',
        'documents' => '\PeopleHR\Model\DocumentsForCreateNewApplicantArrayInner[]',
        'skills' => 'string',
        'recruitment_cost' => 'int',
        'date_last_contacted' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'api_key' => null,
        'action' => null,
        'vacancy_reference' => null,
        'first_name' => null,
        'last_name' => null,
        'email' => 'email',
        'gender' => null,
        'date_of_birth' => 'date',
        'post_code' => null,
        'address' => null,
        'phone_number' => null,
        'other_contact_details' => null,
        'source' => null,
        'additional_questions' => null,
        'internal_questions' => null,
        'documents' => null,
        'skills' => null,
        'recruitment_cost' => null,
        'date_last_contacted' => 'date'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'api_key' => false,
        'action' => false,
        'vacancy_reference' => false,
        'first_name' => false,
        'last_name' => false,
        'email' => false,
        'gender' => false,
        'date_of_birth' => false,
        'post_code' => false,
        'address' => false,
        'phone_number' => false,
        'other_contact_details' => false,
        'source' => false,
        'additional_questions' => false,
        'internal_questions' => false,
        'documents' => false,
        'skills' => false,
        'recruitment_cost' => false,
        'date_last_contacted' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'api_key' => 'APIKey',
        'action' => 'Action',
        'vacancy_reference' => 'VacancyReference',
        'first_name' => 'FirstName',
        'last_name' => 'LastName',
        'email' => 'Email',
        'gender' => 'Gender',
        'date_of_birth' => 'DateOfBirth',
        'post_code' => 'PostCode',
        'address' => 'Address',
        'phone_number' => 'PhoneNumber',
        'other_contact_details' => 'OtherContactDetails',
        'source' => 'Source',
        'additional_questions' => 'AdditionalQuestions',
        'internal_questions' => 'InternalQuestions',
        'documents' => 'Documents',
        'skills' => 'Skills',
        'recruitment_cost' => 'RecruitmentCost',
        'date_last_contacted' => 'DateLastContacted'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'api_key' => 'setApiKey',
        'action' => 'setAction',
        'vacancy_reference' => 'setVacancyReference',
        'first_name' => 'setFirstName',
        'last_name' => 'setLastName',
        'email' => 'setEmail',
        'gender' => 'setGender',
        'date_of_birth' => 'setDateOfBirth',
        'post_code' => 'setPostCode',
        'address' => 'setAddress',
        'phone_number' => 'setPhoneNumber',
        'other_contact_details' => 'setOtherContactDetails',
        'source' => 'setSource',
        'additional_questions' => 'setAdditionalQuestions',
        'internal_questions' => 'setInternalQuestions',
        'documents' => 'setDocuments',
        'skills' => 'setSkills',
        'recruitment_cost' => 'setRecruitmentCost',
        'date_last_contacted' => 'setDateLastContacted'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'api_key' => 'getApiKey',
        'action' => 'getAction',
        'vacancy_reference' => 'getVacancyReference',
        'first_name' => 'getFirstName',
        'last_name' => 'getLastName',
        'email' => 'getEmail',
        'gender' => 'getGender',
        'date_of_birth' => 'getDateOfBirth',
        'post_code' => 'getPostCode',
        'address' => 'getAddress',
        'phone_number' => 'getPhoneNumber',
        'other_contact_details' => 'getOtherContactDetails',
        'source' => 'getSource',
        'additional_questions' => 'getAdditionalQuestions',
        'internal_questions' => 'getInternalQuestions',
        'documents' => 'getDocuments',
        'skills' => 'getSkills',
        'recruitment_cost' => 'getRecruitmentCost',
        'date_last_contacted' => 'getDateLastContacted'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('api_key', $data ?? [], null);
        $this->setIfExists('action', $data ?? [], null);
        $this->setIfExists('vacancy_reference', $data ?? [], null);
        $this->setIfExists('first_name', $data ?? [], null);
        $this->setIfExists('last_name', $data ?? [], null);
        $this->setIfExists('email', $data ?? [], null);
        $this->setIfExists('gender', $data ?? [], null);
        $this->setIfExists('date_of_birth', $data ?? [], null);
        $this->setIfExists('post_code', $data ?? [], null);
        $this->setIfExists('address', $data ?? [], null);
        $this->setIfExists('phone_number', $data ?? [], null);
        $this->setIfExists('other_contact_details', $data ?? [], null);
        $this->setIfExists('source', $data ?? [], null);
        $this->setIfExists('additional_questions', $data ?? [], null);
        $this->setIfExists('internal_questions', $data ?? [], null);
        $this->setIfExists('documents', $data ?? [], null);
        $this->setIfExists('skills', $data ?? [], null);
        $this->setIfExists('recruitment_cost', $data ?? [], null);
        $this->setIfExists('date_last_contacted', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['api_key'] === null) {
            $invalidProperties[] = "'api_key' can't be null";
        }
        if ((mb_strlen($this->container['api_key']) > 50)) {
            $invalidProperties[] = "invalid value for 'api_key', the character length must be smaller than or equal to 50.";
        }

        if ($this->container['action'] === null) {
            $invalidProperties[] = "'action' can't be null";
        }
        if ($this->container['first_name'] === null) {
            $invalidProperties[] = "'first_name' can't be null";
        }
        if ((mb_strlen($this->container['first_name']) > 50)) {
            $invalidProperties[] = "invalid value for 'first_name', the character length must be smaller than or equal to 50.";
        }

        if ($this->container['last_name'] === null) {
            $invalidProperties[] = "'last_name' can't be null";
        }
        if ((mb_strlen($this->container['last_name']) > 50)) {
            $invalidProperties[] = "invalid value for 'last_name', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['email']) && (mb_strlen($this->container['email']) > 254)) {
            $invalidProperties[] = "invalid value for 'email', the character length must be smaller than or equal to 254.";
        }

        if (!is_null($this->container['post_code']) && (mb_strlen($this->container['post_code']) > 20)) {
            $invalidProperties[] = "invalid value for 'post_code', the character length must be smaller than or equal to 20.";
        }

        if ($this->container['documents'] === null) {
            $invalidProperties[] = "'documents' can't be null";
        }
        if ($this->container['skills'] === null) {
            $invalidProperties[] = "'skills' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets api_key
     *
     * @return string
     */
    public function getApiKey()
    {
        return $this->container['api_key'];
    }

    /**
     * Sets api_key
     *
     * @param string $api_key APIKey for applicant api to Create new applicant
     *
     * @return self
     */
    public function setApiKey($api_key)
    {
        if (is_null($api_key)) {
            throw new \InvalidArgumentException('non-nullable api_key cannot be null');
        }
        if ((mb_strlen($api_key) > 50)) {
            throw new \InvalidArgumentException('invalid length for $api_key when calling CreateApplicantDetailParameter., must be smaller than or equal to 50.');
        }

        $this->container['api_key'] = $api_key;

        return $this;
    }

    /**
     * Gets action
     *
     * @return string
     */
    public function getAction()
    {
        return $this->container['action'];
    }

    /**
     * Sets action
     *
     * @param string $action Action name = CreateNewApplicant
     *
     * @return self
     */
    public function setAction($action)
    {
        if (is_null($action)) {
            throw new \InvalidArgumentException('non-nullable action cannot be null');
        }
        $this->container['action'] = $action;

        return $this;
    }

    /**
     * Gets vacancy_reference
     *
     * @return string|null
     */
    public function getVacancyReference()
    {
        return $this->container['vacancy_reference'];
    }

    /**
     * Sets vacancy_reference
     *
     * @param string|null $vacancy_reference Vacancy reference for create new applicant
     *
     * @return self
     */
    public function setVacancyReference($vacancy_reference)
    {
        if (is_null($vacancy_reference)) {
            throw new \InvalidArgumentException('non-nullable vacancy_reference cannot be null');
        }
        $this->container['vacancy_reference'] = $vacancy_reference;

        return $this;
    }

    /**
     * Gets first_name
     *
     * @return string
     */
    public function getFirstName()
    {
        return $this->container['first_name'];
    }

    /**
     * Sets first_name
     *
     * @param string $first_name First name for create new applicant
     *
     * @return self
     */
    public function setFirstName($first_name)
    {
        if (is_null($first_name)) {
            throw new \InvalidArgumentException('non-nullable first_name cannot be null');
        }
        if ((mb_strlen($first_name) > 50)) {
            throw new \InvalidArgumentException('invalid length for $first_name when calling CreateApplicantDetailParameter., must be smaller than or equal to 50.');
        }

        $this->container['first_name'] = $first_name;

        return $this;
    }

    /**
     * Gets last_name
     *
     * @return string
     */
    public function getLastName()
    {
        return $this->container['last_name'];
    }

    /**
     * Sets last_name
     *
     * @param string $last_name Last name for create new applicant
     *
     * @return self
     */
    public function setLastName($last_name)
    {
        if (is_null($last_name)) {
            throw new \InvalidArgumentException('non-nullable last_name cannot be null');
        }
        if ((mb_strlen($last_name) > 50)) {
            throw new \InvalidArgumentException('invalid length for $last_name when calling CreateApplicantDetailParameter., must be smaller than or equal to 50.');
        }

        $this->container['last_name'] = $last_name;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string|null
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string|null $email Email for create new applicant
     *
     * @return self
     */
    public function setEmail($email)
    {
        if (is_null($email)) {
            throw new \InvalidArgumentException('non-nullable email cannot be null');
        }
        if ((mb_strlen($email) > 254)) {
            throw new \InvalidArgumentException('invalid length for $email when calling CreateApplicantDetailParameter., must be smaller than or equal to 254.');
        }

        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets gender
     *
     * @return \PeopleHR\Model\Gender|null
     */
    public function getGender()
    {
        return $this->container['gender'];
    }

    /**
     * Sets gender
     *
     * @param \PeopleHR\Model\Gender|null $gender Gender for create new applicant
     *
     * @return self
     */
    public function setGender($gender)
    {
        if (is_null($gender)) {
            throw new \InvalidArgumentException('non-nullable gender cannot be null');
        }
        $this->container['gender'] = $gender;

        return $this;
    }

    /**
     * Gets date_of_birth
     *
     * @return \DateTime|null
     */
    public function getDateOfBirth()
    {
        return $this->container['date_of_birth'];
    }

    /**
     * Sets date_of_birth
     *
     * @param \DateTime|null $date_of_birth Date of birth for create new applicant
     *
     * @return self
     */
    public function setDateOfBirth($date_of_birth)
    {
        if (is_null($date_of_birth)) {
            throw new \InvalidArgumentException('non-nullable date_of_birth cannot be null');
        }
        $this->container['date_of_birth'] = $date_of_birth;

        return $this;
    }

    /**
     * Gets post_code
     *
     * @return string|null
     */
    public function getPostCode()
    {
        return $this->container['post_code'];
    }

    /**
     * Sets post_code
     *
     * @param string|null $post_code Post code for create new applicant
     *
     * @return self
     */
    public function setPostCode($post_code)
    {
        if (is_null($post_code)) {
            throw new \InvalidArgumentException('non-nullable post_code cannot be null');
        }
        if ((mb_strlen($post_code) > 20)) {
            throw new \InvalidArgumentException('invalid length for $post_code when calling CreateApplicantDetailParameter., must be smaller than or equal to 20.');
        }

        $this->container['post_code'] = $post_code;

        return $this;
    }

    /**
     * Gets address
     *
     * @return string|null
     */
    public function getAddress()
    {
        return $this->container['address'];
    }

    /**
     * Sets address
     *
     * @param string|null $address Address for create new applicant
     *
     * @return self
     */
    public function setAddress($address)
    {
        if (is_null($address)) {
            throw new \InvalidArgumentException('non-nullable address cannot be null');
        }
        $this->container['address'] = $address;

        return $this;
    }

    /**
     * Gets phone_number
     *
     * @return string|null
     */
    public function getPhoneNumber()
    {
        return $this->container['phone_number'];
    }

    /**
     * Sets phone_number
     *
     * @param string|null $phone_number PhoneNumber for create new applicant
     *
     * @return self
     */
    public function setPhoneNumber($phone_number)
    {
        if (is_null($phone_number)) {
            throw new \InvalidArgumentException('non-nullable phone_number cannot be null');
        }
        $this->container['phone_number'] = $phone_number;

        return $this;
    }

    /**
     * Gets other_contact_details
     *
     * @return string|null
     */
    public function getOtherContactDetails()
    {
        return $this->container['other_contact_details'];
    }

    /**
     * Sets other_contact_details
     *
     * @param string|null $other_contact_details Other contact details for create new applicant
     *
     * @return self
     */
    public function setOtherContactDetails($other_contact_details)
    {
        if (is_null($other_contact_details)) {
            throw new \InvalidArgumentException('non-nullable other_contact_details cannot be null');
        }
        $this->container['other_contact_details'] = $other_contact_details;

        return $this;
    }

    /**
     * Gets source
     *
     * @return string|null
     */
    public function getSource()
    {
        return $this->container['source'];
    }

    /**
     * Sets source
     *
     * @param string|null $source Source for create new applicant
     *
     * @return self
     */
    public function setSource($source)
    {
        if (is_null($source)) {
            throw new \InvalidArgumentException('non-nullable source cannot be null');
        }
        $this->container['source'] = $source;

        return $this;
    }

    /**
     * Gets additional_questions
     *
     * @return \PeopleHR\Model\AdditionalQuestionsForCreatenewApplicantArrayInner[]|null
     */
    public function getAdditionalQuestions()
    {
        return $this->container['additional_questions'];
    }

    /**
     * Sets additional_questions
     *
     * @param \PeopleHR\Model\AdditionalQuestionsForCreatenewApplicantArrayInner[]|null $additional_questions Source for create new applicant
     *
     * @return self
     */
    public function setAdditionalQuestions($additional_questions)
    {
        if (is_null($additional_questions)) {
            throw new \InvalidArgumentException('non-nullable additional_questions cannot be null');
        }
        $this->container['additional_questions'] = $additional_questions;

        return $this;
    }

    /**
     * Gets internal_questions
     *
     * @return \PeopleHR\Model\AdditionalQuestionsForCreatenewApplicantArrayInner[]|null
     */
    public function getInternalQuestions()
    {
        return $this->container['internal_questions'];
    }

    /**
     * Sets internal_questions
     *
     * @param \PeopleHR\Model\AdditionalQuestionsForCreatenewApplicantArrayInner[]|null $internal_questions Internal questions for create new applicant
     *
     * @return self
     */
    public function setInternalQuestions($internal_questions)
    {
        if (is_null($internal_questions)) {
            throw new \InvalidArgumentException('non-nullable internal_questions cannot be null');
        }
        $this->container['internal_questions'] = $internal_questions;

        return $this;
    }

    /**
     * Gets documents
     *
     * @return \PeopleHR\Model\DocumentsForCreateNewApplicantArrayInner[]
     */
    public function getDocuments()
    {
        return $this->container['documents'];
    }

    /**
     * Sets documents
     *
     * @param \PeopleHR\Model\DocumentsForCreateNewApplicantArrayInner[] $documents Documents for create new applicant
     *
     * @return self
     */
    public function setDocuments($documents)
    {
        if (is_null($documents)) {
            throw new \InvalidArgumentException('non-nullable documents cannot be null');
        }
        $this->container['documents'] = $documents;

        return $this;
    }

    /**
     * Gets skills
     *
     * @return string
     */
    public function getSkills()
    {
        return $this->container['skills'];
    }

    /**
     * Sets skills
     *
     * @param string $skills Skills for create new applicant
     *
     * @return self
     */
    public function setSkills($skills)
    {
        if (is_null($skills)) {
            throw new \InvalidArgumentException('non-nullable skills cannot be null');
        }
        $this->container['skills'] = $skills;

        return $this;
    }

    /**
     * Gets recruitment_cost
     *
     * @return int|null
     */
    public function getRecruitmentCost()
    {
        return $this->container['recruitment_cost'];
    }

    /**
     * Sets recruitment_cost
     *
     * @param int|null $recruitment_cost Recruitment cost for create new applicant
     *
     * @return self
     */
    public function setRecruitmentCost($recruitment_cost)
    {
        if (is_null($recruitment_cost)) {
            throw new \InvalidArgumentException('non-nullable recruitment_cost cannot be null');
        }
        $this->container['recruitment_cost'] = $recruitment_cost;

        return $this;
    }

    /**
     * Gets date_last_contacted
     *
     * @return \DateTime|null
     */
    public function getDateLastContacted()
    {
        return $this->container['date_last_contacted'];
    }

    /**
     * Sets date_last_contacted
     *
     * @param \DateTime|null $date_last_contacted Date last contacted for create new applicant
     *
     * @return self
     */
    public function setDateLastContacted($date_last_contacted)
    {
        if (is_null($date_last_contacted)) {
            throw new \InvalidArgumentException('non-nullable date_last_contacted cannot be null');
        }
        $this->container['date_last_contacted'] = $date_last_contacted;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}



{
   "swagger": "2.0",
  "info": {
    "version": "3.1",
    "title": "PeopleHR API",
    "contact": {
      "name": "PeopleWeb API Support",
      "url": "https://www.peoplehr.com/",
      "email": "customerservices@peoplehr.com"
    },
    "license": {
      "name": "PeopleWeb",
      "url": "https://www.peoplehr.com/terms.html"
    },
    "termsOfService": "https://www.peoplehr.com/terms.html/",
    "x-logo": {
      "url": "../../peoplelogo.png",
      "backgroundColor": "#34495e"
    },
    "description": ""
  },
  "host": "api.peoplehr.net",
  "basePath": "/v3.1",
  "schemes": [
    "https"
  ],
  "x-servers": [
    {
      "url": "https://api.peoplehr.net/",
      "description": "Live Server"
    }

  ],
  "produces": [
    "application/json"
  ],
  "consumes": [
    "application/json"
  ],
  "tags": [
    {
      "name": "Employee",
      "description": ""
    },
	{
      "name": "Employee Salary",
      "description": "Employee Salary Details\n"
    },
	{
      "name": "Employee Holiday",
      "description": "Employee Holiday Details\n"
    },
	{
      "name": "Employee Absence",
      "description": "Employee Absence Details\n"
    },
	{
      "name": "Employee Document",
      "description": "Employee Document Details\n"
    },
	{
      "name": "Employee Timesheet",
      "description": "Employee Timesheet Details\n"
    },
	{
      "name": "Employee Project Timesheet",
      "description": "The API calls to add, update and delete Project, Task and Task detail will allow you to maintain your lists using the API, the calls will not however allow you to build the hierarchy relationship between which users can see which Projects and the relationship between Projects, Tasks and Task Detail - this must be done using the UX within the settings option within People\n"
    },
	{
      "name": "Employee Appraisal",
      "description": "Employee Appraisal Details\n"
    },
	{
      "name": "Employee Benefit",
      "description": "Employee Benefit Details\n"
    },
	{
      "name": "Employee CPD",
      "description": "Employee CPD\n"
    },
	{
      "name": "Employee Driving",
      "description": "Employee Driving Details\n"
    },
	{
      "name": "Employee Qualification",
      "description": "AddNewQualification\n"
    },
	{
      "name": "Employee Training",
      "description": "Add Training Detail\n"
    },
	{
      "name": "Employee Vehicle",
      "description": "Employee Vehicle Details\n"
    },
	{
      "name": "Employee Custom Screen",
      "description": "Employee Custom Screen Details\n"
    },
	{
      "name": "Holiday Entitlement",
      "description": "Holiday Entitlement Details\n"
    },
	{
      "name": "History",
      "description": "History Details\n"
    },
	{
      "name": "Query",
      "description": "Query Details\n"
    },
	{
      "name": "Email Transaction",
      "description": "Email Transaction Details\n"
    },
	{
      "name": "Right To Work",
      "description": "Right To Work Details\n"
    },
	{
      "name": "Background Check",
      "description": "Background Check Details\n"
    },
	{
      "name": "Other Event",
      "description": "Other Event Details\n"
    },
	{
      "name": "Vacancy",
      "description": ""
    },
	{
      "name": "Applicant",
      "description": ""
    },
	{
      "name": "WorkPattern",
      "description": "WorkPattern Details\n"
    },
	{
      "name": "Employeee Late",
      "description": "Employeee Late Details\n"
    },
	{
      "name": "Maternity Paternity ",
      "description": " Maternity Paternity Details\n"
    }

  ],
    "securityDefinitions": {

  },

  "security": [
    {
      "ApiKey": []
    }
  ],
  "responses": {
    "AccessForbidden": {
      "description": "Access forbidden, invalid API-KEY was used",
      "schema": {
        "$ref": "#/definitions/Error"
      }
    },
    "NotFound": {
      "description": "Resource was not found",
      "schema": {
        "$ref": "#/definitions/Error"
      }
    },
    "Conflict": {
      "description": "Conflict",
      "schema": {
        "$ref": "#/definitions/Error"
      }
    },
    "InvalidDataError": {
      "description": "Invalid data was sent",
      "schema": {
        "$ref": "#/definitions/InvalidError"
      }
	},

	"SuccessMessageForUpdateEmployeeIdApi": {
      "description": "Check description for error code",
      "schema": {
        "$ref": "#/definitions/ErrorForUpdateEmployeeId"
      }
    },
	"SuccessMessageForMarkAsLeaverByIdApi": {
      "description": "Check description for error code",
      "schema": {
        "$ref": "#/definitions/ErrorForMarkAsLeaverById"
      }
    },
	"SuccessMessageForAddEmployeeImageByIdApi": {
      "description": "Check description for error code",
      "schema": {
        "$ref": "#/definitions/ErrorForAddEmployeeImageById"
      }
    },
	"SuccessMessageForGetAllEmployeeDetailApi": {
      "description": "Check description for error code",
      "schema": {
        "$ref": "#/definitions/ErrorForGetAllEmployeeDetail"
      }
    },
	"SuccessMessageForGetEmployeeDetailByIdApi": {
      "description": "Check description for error code",
      "schema": {
        "$ref": "#/definitions/ErrorForGetEmployeeDetailById"
      }
    },
	"SuccessMessageForCreateNewEmployeeApi": {
      "description": "Check description for error code",
      "schema": {
        "$ref": "#/definitions/ErrorForCreateNewEmployeeDetail"
      }
    },
	"SuccessMessageForUpdateEmployeeDetailApi": {
      "description": "Check description for error code",
      "schema": {
        "$ref": "#/definitions/ErrorForUpdateEmployeeDetail"
      }
    },

	"SuccessMessageForAddNewHolidayApi": {
      "description": "Check description for error code",
      "schema": {
        "$ref": "#/definitions/ErrorForAddNewHoliday"
      }
    },
	"SuccessMessageForUpdateHolidayApi": {
      "description": "Check description for error code",
      "schema": {
        "$ref": "#/definitions/ErrorForUpdateHoliday"
      }
    },
	"SuccessMessageForGetHolidayDetailApi": {
      "description": "Check description for error code",
      "schema": {
        "$ref": "#/definitions/ErrorForGetHolidayDetail"
      }
    },
	"SuccessMessageForDeleteHoliday": {
      "description": "Check description for error code",
      "schema": {
        "$ref": "#/definitions/ErrorForDeleteHolidy"
      }
    },

	 "SuccessMessageForGetAbsenceDetailApi": {
      "description": "Check description for error code",
      "schema": {
        "$ref": "#/definitions/ErrorForGetAbsenceDetail"
      }
    },
	"SuccessMessageForDeleteAbsenceEmployeeApi":{
	  "description": "Check description for error code",
      "schema": {
        "$ref": "#/definitions/ErrorForEmployeeAbsenceDelete"
      }
	},
	"SuccessMessageForAddEmployeeAbsence":{
	"description": "Check description for error code",
      "schema": {
        "$ref": "#/definitions/ErrorForAddEmployeeAbsence"
      }
	},
	"SuccessMessageForUpdateAbsenceDetail":{
	  "description": "Check description for error code",
      "schema": {
                  "$ref": "#/definitions/ErrorForUpdateAbsenceDetails"
                }
	},

	"SuccessMessageForGetSalaryDetailApi": {
      "description": "Check description for error code",
      "schema": {
        "$ref": "#/definitions/ErrorForGetSalaryDetail"
      }
    },
	"SuccessMessageForCreateNewSalaryApi": {
      "description": "Check description for error code",
      "schema": {
        "$ref": "#/definitions/ErrorForCreateNewSalary1"
      }
    },
	"SuccessMessageForDeleteSalaryApi": {
      "description": "Check description for error code",
      "schema": {
        "$ref": "#/definitions/ErrorForDeleteSalary"
      }
    },

	"SuccessMessageForUploadEmployeeDocument": {
      "description": "Check description for error code",
      "schema": {
        "$ref": "#/definitions/ErrorForUploadEmployeeDocument"
      }
    },
	"SuccessMessageForGetAllDocument":{
	  "description": "Check description for error code",
      "schema": {
        "$ref": "#/definitions/ErrorForGetAllDocument"
      }
	},
   "SuccessMessageForGetDocumentById":{
	"description": "Check description for error code",
      "schema": {
        "$ref": "#/definitions/ErrorForGetDocumentById"
      }
	},

   "SuccessMessageForCreateNewEmployeeTimesheetApi": {
      "description": "Check description for error code",
      "schema": {
        "$ref": "#/definitions/ErrorForCreateNewEmployeeTimesheetDetail"
      }
    },
	 "SuccessMessageForUpdateEmployeeTimesheetApi": {
      "description": "Check description for error code",
      "schema": {
        "$ref": "#/definitions/ErrorForUpdateEmployeeTimesheetDetail"
      }
    },
	"SuccessMessageForDeleteEmployeeTimesheet": {
      "description": "Check description for error code",
      "schema": {
        "$ref": "#/definitions/ErrorForDeleteEmployeeTimesheetDetail"
      }
    },
	"SuccessMessageForGetTimesheetDetail": {
      "description": "Check description for error code",
      "schema": {
        "$ref": "#/definitions/ErrorForGetTimesheetDetail"
      }
    },

	"SuccessMessageForGetBenefitByEmployeeId": {
        "description": "Check description for error code",
        "schema": {
          "$ref": "#/definitions/ErrorForGetBenefitByEmployeeId"
        }
    },
	"SuccessMessageForGetByBenefitIdApi":{
	   "description": "Check description for error code",
       "schema": {
         "$ref": "#/definitions/ErrorForGetByBenefitIdApi"
        }
	},
	"SuccessMessageForAddNewBenefitApi":{
	   "description": "Check description for error code",
       "schema": {
          "$ref": "#/definitions/ErrorForAddNewBenefitApi"
        }
	},
	"SuccessMessageForUpdateBenefitApi":{
	  "description": "Check description for error code",
      "schema": {
		  "$ref": "#/definitions/ErrorForUpdateBenefitApi"
		}
	},
   "SuccessMessageForDeleteBenefitApi":{
	  "description": "Check description for error code",
      "schema": {
           "$ref": "#/definitions/ErrorForDeleteBenefit"
        }
	},
	"SuccessMessageForGetCustomScreenDetailApi": {
      "description": "Check description for error code",
      "schema": {
        "$ref": "#/definitions/ErrorForGetCustomScreenDetail"
      }
    },
	"SuccessMessageForGetCustomScreenByEmployeeIdApi": {
      "description": "Check description for error code",
      "schema": {
        "$ref": "#/definitions/ErrorForGetCustomScreenByEmployeeId"
      }
    },
	"SuccessMessageForGetByCustomScreenTransactionIdApi": {
      "description": "Check description for error code",
      "schema": {
        "$ref": "#/definitions/ErrorForGetByCustomScreenTransactionId"
      }
    },
	"SuccessMessageForAddNewCustomScreenTransactionApi": {
      "description": "Check description for error code",
      "schema": {
        "$ref": "#/definitions/ErrorForAddNewCustomScreenTransaction"
      }
    },
	"SuccessMessageForUpdateCustomScreenTransactionApi": {
      "description": "Check description for error code",
      "schema": {
        "$ref": "#/definitions/ErrorForUpdateCustomScreenTransaction"
      }
    },
	"SuccessMessageForDeleteCustomScreenTransactionApi": {
      "description": "Check description for error code",
      "schema": {
        "$ref": "#/definitions/ErrorForDeleteCustomScreenTransaction"
      }
    },
	"SuccessMessageForGetHolidayEntitlementApi": {
      "description": "Check description for error code",
      "schema": {
        "$ref": "#/definitions/ErrorForGetHolidayEntitlement"
      }
    },
	"SuccessMessageForGetQueryResultByQueryNameApi": {
      "description": "Check description for error code",
      "schema": {
        "$ref": "#/definitions/ErrorForGetQueryResultByQueryName"
      }
    },
	"SuccessMessageForGetQueryResultApi": {
      "description": "Check description for error code",
      "schema": {
        "$ref": "#/definitions/ErrorForGetQueryResult"
      }
    },
	"SuccessMessageForGetHistoryByEmployeeIdAndFieldNameApi": {
      "description": "Check description for error code",
      "schema": {
        "$ref": "#/definitions/ErrorForGetHistoryByEmployeeIdAndFieldName"
      }
    },
	"SuccessMessageForUpdateNextYearHolidayEntitlementApi": {
      "description": "Check description for error code",
      "schema": {
        "$ref": "#/definitions/ErrorForUpdateNextYearHolidayEntitlement"
      }
    },
	"SuccessMessageForUpdateHolidayEntitlementApi": {
      "description": "Check description for error code",
      "schema": {
        "$ref": "#/definitions/ErrorForUpdateHolidayEntitlement"
      }
    },
	"SuccessMessageForGetNextYearHolidayEntitlementApi": {
      "description": "Check description for error code",
      "schema": {
        "$ref": "#/definitions/ErrorForGetNextYearHolidayEntitlement"
      }
    },
    "SuccessMessageForCreateNewVacancy": {
      "description": "Check description for error code",
      "schema": {
        "$ref": "#/definitions/ErrorForCreateNewVacancy"
      }
    },
	"SuccessMessageForGetVacancyByReference": {
      "description": "Check description for error code",
      "schema": {
        "$ref": "#/definitions/ErrorForGetVacancy"
      }
    },
	"SuccessMessageForGetAllVacancyByReference": {
      "description": "Check description for error code",
      "schema": {
        "$ref": "#/definitions/ErrorForGetAllVacancy"
      }
    },

   "SuccessMessageForEmailInboxApi": {
      "description": "Check description for error code",
      "schema": {
        "$ref": "#/definitions/ErrorForEmailInbox"
      }
    },
	"SuccessMessageForaddrighttoworkdetailApi": {
      "description": "Check description for error code",
      "schema": {
        "$ref": "#/definitions/ErrorForaddrighttoworkdetail"
      }
    },

	"SuccessMessageForgetrighttoworkdetailApi": {
      "description": "Check description for error code",
      "schema": {
        "$ref": "#/definitions/ErrorForgetrighttoworkdetail"
      }
    },
	"SuccessMessageForupdaterighttoworkdetailApi": {
      "description": "Check description for error code",
      "schema": {
        "$ref": "#/definitions/ErrorForupdaterighttoworkdetail"
      }
    },
	"SuccessMessageFordeleterighttoworkdetailApi": {
      "description": "Check description for error code",
      "schema": {
        "$ref": "#/definitions/ErrorFordeleterighttoworkdetail"
      }
    },
	"SuccessMessageForGetBackgroundCheckDetailByEmployeeIdApi": {
      "description": "Check description for error code",
      "schema": {
        "$ref": "#/definitions/ErrorForGetBackgroundCheckDetailByEmployeeId"
      }
    },
	"SuccessMessageForAddBackgroundCheckDetailApi": {
      "description": "Check description for error code",
      "schema": {
        "$ref": "#/definitions/ErrorForAddBackgroundCheckDetail"
      }
    },
	"SuccessMessageForUpdateBackgroundCheckDetailApi": {
      "description": "Check description for error code",
      "schema": {
        "$ref": "#/definitions/ErrorForUpdateBackgroundCheckDetail"
      }
    },
	"SuccessMessageForDeleteBackgroundCheckDetailApi": {
      "description": "Check description for error code",
      "schema": {
        "$ref": "#/definitions/ErrorForDeleteBackgroundCheckDetail"
      }
    },
	"SuccessMessageForgetothereventdetailApi": {
      "description": "Check description for error code",
      "schema": {
        "$ref": "#/definitions/ErrorForgetothereventdetail"
      }
    },
	"SuccessMessageForgetotherevententitlementApi": {
      "description": "Check description for error code",
      "schema": {
        "$ref": "#/definitions/ErrorForgetotherevententitlement"
      }
    },
	"SuccessMessageForDeleteOtherEventApi": {
      "description": "Check description for error code",
      "schema": {
        "$ref": "#/definitions/ErrorForDeleteOtherEvent"
      }
    },
	"SuccessMessageForaddothereventleaveApi": {
      "description": "Check description for error code",
      "schema": {
        "$ref": "#/definitions/ErrorForaddothereventleave"
      }
    },
	"SuccessMessageForupdateothereventleaveApi": {
      "description": "Check description for error code",
      "schema": {
        "$ref": "#/definitions/ErrorForupdateothereventleave"
      }
    },
	"SuccessMessageForaddotherevententitlementApi": {
      "description": "Check description for error code",
      "schema": {
        "$ref": "#/definitions/ErrorForaddotherevententitlement"
      }
    },

	"SuccessMessageForCreateNewApplicant": {
      "description": "Check description for error code",
      "schema": {
        "$ref": "#/definitions/ErrorForCreateNewApplicant"
      }
    },
	"SuccessMessageForCheckDuplicateApplicant": {
      "description": "Check description for error code",
      "schema": {
        "$ref": "#/definitions/ErrorForCheckDuplicateApplicant"
      }
    },

	"SuccessMessageFordeletelate": {
      "description": "Check description for error code",
      "schema": {
        "$ref": "#/definitions/ErrorFordeletelate"
      }
    },
	"SuccessMessageForGetLateByEmployeeId": {
      "description": "Check description for error code",
      "schema": {
        "$ref": "#/definitions/ErrorForGetLateByEmployeeId"
      }
    },
	"SuccessMessageForAddNewLate": {
      "description": "Check description for error code",
      "schema": {
        "$ref": "#/definitions/ErrorForAddNewLate"
      }
    },
	"SuccessMessageForUpdateLate": {
      "description": "Check description for error code",
      "schema": {
        "$ref": "#/definitions/ErrorForUpadteLate"
      }
    },

	"SuccessMessageForWorkPattern": {
      "description": "Check description for error code",
      "schema": {
        "$ref": "#/definitions/ErrorForWorkPattern"
      }
    },
	"SuccessMessageForuploadapplicantdocument": {
      "description": "Check description for error code",
      "schema": {
        "$ref": "#/definitions/ErrorForuploadapplicantdocument"
      }
    },

   "SuccessMessageForEmployeeAppraisalGetEmployeeById": {
      "description": "Check description for error code",
      "schema": {
        "$ref": "#/definitions/ErrorForEmployeeAppraisalGetEmployeeById"
      }
    },
	"SuccessMessageForGetByAppraisalId":{
	  "description": "Check description for error code",
      "schema": {
        "$ref": "#/definitions/ErrorForGetByAppraisalId"
      }
	},
	"SuccessMessageForAddNewAppraisal":{
	"description": "Check description for error code",
      "schema": {
        "$ref": "#/definitions/ErrorForAddNewAppraisal"
      }
	},
	"SuccessMessageForUpdateAppraisal":{
	  "description": "Check description for error code",
      "schema": {
                  "$ref": "#/definitions/ErrorForUpdateAppraisal"
                 }
	 },
	"SuccessMessageForDeleteAppraisal":{
	  "description": "Check description for error code",
      "schema": {
                  "$ref": "#/definitions/ErrorForDeleteAppraisal"
                 }
	},

	 "SuccessMessageForAddNewDrivingLicenseApi": {
      "description": "Check description for error code",
      "schema": {
		"$ref": "#/definitions/ErrorForAddNewDrivingLicense"
      }
    },

	 "SuccessMessageForUpdateDrivingLicenseApi": {
      "description": "Check description for error code",
      "schema": {
		"$ref": "#/definitions/ErrorForUpdateDrivingLicense"
      }
    },
	"SuccessMessageForGetDrivingLicenseByEmployeeIdApi": {
      "description": "Check description for error code",
      "schema": {
		"$ref": "#/definitions/ErrorForGetDrivingLicenseByEmployeeId"
      }
    },

	"SuccessMessageForGetDrivingLicenseByDrivingIdApi": {
      "description": "Check description for error code",
      "schema": {
		"$ref": "#/definitions/ErrorForGetDrivingLicenseByDrivingId"
      }
    },
	 "SuccessMessageForDeleteDrivingLicenseApi": {
      "description": "Check description for error code",
      "schema": {
        "$ref": "#/definitions/ErrorForDeleteDrivingLicense"
      }
    },

	"SuccessMessageForGetQualificationByEmployeeIdApi": {
      "description": "Check description for error code",
      "schema": {
		"$ref": "#/definitions/ErrorForGetQualificationByEmployeeId"
      }
    },
	"SuccessMessageForGetQualificationByQualificationIdApi": {
      "description": "Check description for error code",
      "schema": {
	    "$ref": "#/definitions/ErrorForGetQualificationByQualificationId"
      }
    },
	"SuccessMessageForAddNewQualificationApi": {
      "description": "Check description for error code",
      "schema": {
        "$ref": "#/definitions/ErrorForAddNewQualification"
      }
    },
	"SuccessMessageForUpdateQualificationApi": {
      "description": "Check description for error code",
      "schema": {
        "$ref": "#/definitions/ErrorForUpdateQualification"
      }
    },
	"SuccessMessageForDeleteQualificationApi": {
      "description": "Check description for error code",
      "schema": {
		"$ref": "#/definitions/ErrorForDeleteQualification"
      }
    },
	"SuccessMessageForGetTrainingDetailApi": {
      "description": "Check description for error code",
      "schema": {
        "$ref": "#/definitions/ErrorForGetTrainingDetail"
      }
    },

	"SuccessMessageForAddTrainingDetailApi": {
      "description": "Check description for error code",
      "schema": {
        "$ref": "#/definitions/ErrorForAddTrainingDetail"
      }
    },
	"SuccessMessageForUpdateTrainingDetailApi": {
      "description": "Check description for error code",
      "schema": {
		"$ref": "#/definitions/ErrorForUpdateTrainingDetail"
      }
    },

	"SuccessMessageForDeleteTrainingDetailApi": {
      "description": "Check description for error code",
      "schema": {
		"$ref": "#/definitions/ErrorFordeletetrainingdetail"
      }
    },

	"SuccessMessageForAddNewVehicleDetail": {
      "description": "Check description for error code",
      "schema": {
        "$ref": "#/definitions/ErrorForAddNewVehicleDetail"
      }
    },
	"SuccessMessageForUpdateVehicleDetail": {
      "description": "Check description for error code",
      "schema": {
        "$ref": "#/definitions/ErrorForUpdateVehicleDetail"
      }
    },
	"SuccessMessageForDeleteVehicleDetail": {
      "description": "Check description for error code",
      "schema": {
        "$ref": "#/definitions/ErrorForDeleteVehicleDetail"
      }
    },
	"SuccessMessageForGetVehicleDetailByVehicleId": {
      "description": "Check description for error code",
      "schema": {
        "$ref": "#/definitions/ErrorForGetVehicleDetailByVehicleId"
      }
    },
	"SuccessMessageForGetVehicleDetailByEmployeeId": {
      "description": "Check description for error code",
      "schema": {
        "$ref": "#/definitions/ErrorForGetVehicleDetailByEmployeeId"
      }
    },
	"SuccessMessageForGetByMaternityPaternityId": {
      "description": "Check description for error code",
      "schema": {
        "$ref": "#/definitions/ErrorForGetByMaternityPaternityId"
      }
    },

	"SuccessMessageForGetMaternityPaternityByEmployeeId": {
      "description": "Check description for error code",
      "schema": {
        "$ref": "#/definitions/ErrorForGetByMaternityPaternityByEmpId"
      }
    },

	"SuccessMessageForAddNewMaternityPaternityApi":{
	"description": "Check description for error code",
      "schema": {
        "$ref": "#/definitions/ErrorForAddNewMaternityPaternityApi"
      }
	},

	"SuccessMessageForUpdateMatenityPaternityApi":{
	  "description": "Check description for error code",
      "schema": {
                  "$ref": "#/definitions/ErrorForUpdateMaternityPaternityApi"
                 }
	},
	"SuccessMessageForDeleteMaternityPaternityApi":{
	  "description": "Check description for error code",
      "schema": {
                  "$ref": "#/definitions/ErrorForDeleteMaternityPaternity"
                 }
	},
	"SuccessMessageForGetProjectTimesheetDetailApi": {
      "description": "Check description for error code",
      "schema": {
        "$ref": "#/definitions/ErrorForGetProjectTimesheetDetail"
      }
    },

	"SuccessMessageForGetProjectTimesheetByTransactionId": {
      "description": "Check description for error code",
      "schema": {
        "$ref": "#/definitions/ErrorForGetProjectTimesheetByTransactionId"
      }
    },

	"SuccessMessageForCreateProjectTimesheet": {
      "description": "Check description for error code",
      "schema": {
        "$ref": "#/definitions/ErrorForCreateProjectTimesheet"
      }
    },
	"SuccessMessageForUpdateProjectTimesheet": {
      "description": "Check description for error code",
      "schema": {
        "$ref": "#/definitions/ErrorForUpdateProjectTimesheet"
      }
    },

	"SuccessMessageForDeleteProjectTimesheet": {
      "description": "Check description for error code",
      "schema": {
        "$ref": "#/definitions/ErrorForDeleteProjectTimesheet"
      }
    },

	"SuccessMessageForGetAllTimesheetProjectApi": {
      "description": "Check description for error code",
      "schema": {
        "$ref": "#/definitions/ErrorForGetAllTimesheetProject"
      }
    },

	"SuccessMessageForAddNewProject": {
      "description": "Check description for error code",
      "schema": {
        "$ref": "#/definitions/ErrorForAddNewProject"
      }
    },

	"SuccessMessageForEditProject": {
      "description": "Check description for error code",
      "schema": {
        "$ref": "#/definitions/ErrorForEditProject"
      }
    },

	"SuccessMessageForGetAllProjectTask": {
      "description": "Check description for error code",
      "schema": {
        "$ref": "#/definitions/ErrorForGetAllProjectTask"
      }
    },

	"SuccessMessageForAddNewProjectTask": {
      "description": "Check description for error code",
      "schema": {
        "$ref": "#/definitions/ErrorForAddNewProjectTask"
      }
    },

	"SuccessMessageForEditProjectTask": {
      "description": "Check description for error code",
      "schema": {
        "$ref": "#/definitions/ErrorForEditProjectTask"
      }
    },
	"SuccessMessageForGetAllProjectTaskDetail": {
      "description": "Check description for error code",
      "schema": {
        "$ref": "#/definitions/ErrorForGetAllProjectTaskDetail"
      }
    },
   "SuccessMessageForAddNewProjectTaskDetail": {
      "description": "Check description for error code",
      "schema": {
        "$ref": "#/definitions/ErrorForAddNewProjectTaskDetail"
      }
    },
	"SuccessMessageForEditProjectTaskDetail": {
      "description": "Check description for error code",
      "schema": {
        "$ref": "#/definitions/ErrorForEditProjectTaskDetail"
      }
    },

	"SuccessMessageForGetCPDByEmployeeId": {
      "description": "Check description for error code",
      "schema": {
        "$ref": "#/definitions/ErrorForGetCPDByEmployeeId"
      }
    },

	"SuccessMessageForGetByCPDId": {
      "description": "Check description for error code",
      "schema": {
        "$ref": "#/definitions/ErrorForGetByCPDId"
      }
    },

	"SuccessMessageForAddNewCPD": {
      "description": "Check description for error code",
      "schema": {
        "$ref": "#/definitions/ErrorForAddNewCPD"
      }
    },

	"SuccessMessageForUpdateCPD": {
      "description": "Check description for error code",
      "schema": {
        "$ref": "#/definitions/ErrorForUpdateCPD"
      }
    },

	"SuccessMessageForDeleteCPD": {
      "description": "Check description for error code",
      "schema": {
        "$ref": "#/definitions/ErrorForDeleteCPD"
      }
    },

	"NO_API_KEY": {
      "description": "API key is missing",
       "schema": {
        "$ref": "#/definitions/Error"
      }
	},
	 "INVALID_API_KEY": {
      "description": "Invalid API Key",
       "schema": {
        "$ref": "#/definitions/Error"
      }
	},
	 "NO_ACTION": {
      "description": "Action is missing",
       "schema": {
        "$ref": "#/definitions/Error"
      }
	},
	"INVALID_ACTION": {
      "description": "Invalid Action",
       "schema": {
        "$ref": "#/definitions/Error"
      }
	},
	"NO_JSON_DATA": {
      "description": "No json data found",
       "schema": {
        "$ref": "#/definitions/Error"
      }
	},
	"NO_FORM_DATA": {
      "description": "Either empty or no Form Data",
       "schema": {
        "$ref": "#/definitions/Error"
      }
	},
	"INVALID_JSON_DATA": {
      "description": "Invalid json data",
       "schema": {
        "$ref": "#/definitions/Error"
      }
	},
	"NO_RECORD_FOUND": {
      "description": "No records found",
       "schema": {
        "$ref": "#/definitions/Error"
      }
	},
	"NO_SIGNATURE": {
      "description": "No Signature",
       "schema": {
        "$ref": "#/definitions/Error"
      }
	},
	"INVALID_SIGNATURE": {
      "description": "Unauthorized access",
       "schema": {
        "$ref": "#/definitions/Error"
      }
	},
	"INVALID_MOBILE_LOGIN_TOKEN": {
      "description": "Invalid mobile login token",
       "schema": {
        "$ref": "#/definitions/Error"
      }
	},
	"ACCESS_DENIED": {
      "description": "Access Denied",
       "schema": {
        "$ref": "#/definitions/Error"
      }
	},
	 "APIKeyDoesNotExistError": {
      "description": "API Key does not exists",
      "schema": {
        "$ref": "#/definitions/Error"
      }
	  },
	   "OldEIdAndNewEIdShouldNotSameError": {
      "description": "OldEmployeeId and NewEmployeeId should not be same",
      "schema": {
        "$ref": "#/definitions/Error"
      }
	  },
	  "OldEmployeeIdNotExistsError": {
      "description": "OldEmployeeId does not exists",
      "schema": {
        "$ref": "#/definitions/Error"
      }
	  }

  },

   "parameters": {

    "APIKey": {
      "name": "APIKey",
      "in": "path",
      "description": "API Key",
      "type": "string",
	  "required": true
    },

	 "Action": {
      "name": "Action",
      "in": "path",
      "description": "UpdateEmployeeId",
      "type": "string",
	  "required": true
    },
    "ReasonForChange": {
      "name": "ReasonForChange",
      "in": "path",
      "description": "Reason for change employee id",
      "type": "string",
	  "required": true
    },
	 "OldEmployeeId": {
      "name": "OldEmployeeId",
      "in": "path",
      "description": "Old employee id",
      "type": "string",
	  "required": true
    },
	 "NewEmployeeId": {
      "name": "NewEmployeeId",
      "in": "path",
      "description": "New employee id",
      "type": "string",
	  "required": true
    },

    "EmailAddress": {
      "name": "EmailAddress",
      "in": "path",
      "description": "Email address of user",
	  "format": "email",
      "type": "string",
	  "required": true
    },

	"Password": {
      "name": "Password",
      "in": "path",
      "description": "Password of user",
      "type": "string",
	  "required": true
    },

   "resourceId": {
      "name": "id",
      "in": "path",
      "description": "The resource identifier string",
      "type": "string",
      "required": true
    },

    "hash": {
      "name": "hash",
      "in": "path",
      "description": "The token identifier string",
      "type": "string",
      "required": true
    },
    "mediaType": {
      "name": "Accept",
      "in": "header",
      "type": "string",
      "enum": [
        "application/json"
      ],
      "default": "application/json",
      "description": "The response media type"
    }
  },

   "paths": {

   	 "/Employee  -  CheckAuthentication":
	  {
	     "post": {
        "tags": [
          "Employee"
        ],
        "summary": "Check Authentication",
        "description": "This API is used to check authentication for given user\n",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CheckAuthentication2"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "check description for error code",

			  "schema": {
              "$ref": "#/definitions/CheckAuthenticationResult"
            }
          }

        }
      }


	  },

     "/Employee  -  UpdateEmployeeId":
	  {
	   "post": {
        "tags": [
          "Employee"
        ],
        "summary": "Update Employee Id",
        "description": "This API is used to update employee id details\n",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateEmployeeId2"
            }
          }
        ],
        "responses": {
          "200": {

			 "$ref": "#/responses/SuccessMessageForUpdateEmployeeIdApi"
          }

        }
      }

	  },

	 "/Employee  -  GetAllEmployeeDetail":
	  {
	   "post": {
        "tags": [
          "Employee"
        ],
        "summary": "Get All Employee Detail",
        "description": "This API is used to get employee detail list. Please note the History fields have been deprecated and will not return any data. To retrieve History data the individual employee record needs to be retrieved using the GetEmployeeDetail method call, this will return the History data.\n",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetAllEmployeeDetailParameter"
            }
          }
        ],
        "responses": {
          "200": {

			 "$ref": "#/responses/SuccessMessageForGetAllEmployeeDetailApi"
          }

        }
      }


	  },

	  "/Employee  -  GetEmployeeDetailById":
	  {
	   "post": {
        "tags": [
          "Employee"
        ],
        "summary": "Get Employee Detail By Id",
        "description": "This API is used to get employee detail by id\n",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetEmployeeDetailByIdParameter"
            }
          }
        ],
        "responses": {
          "200": {

			 "$ref": "#/responses/SuccessMessageForGetEmployeeDetailByIdApi"
          }

        }
      }},

	 "/Employee  -  CreateNewEmployee":
	  {
	   "post": {
        "tags": [
          "Employee"
        ],
        "summary": "Create New Employee",
        "description": "This API is used to create new employee\n",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateEmployeeDetailParameter"
            }
          }
        ],
        "responses": {
          "200": {

			 "$ref": "#/responses/SuccessMessageForCreateNewEmployeeApi"
          }

        }
      }},

	 "/Employee  -  UpdateEmployeeDetail":
	  {
	   "post": {
        "tags": [
          "Employee"
        ],
        "summary": "Update Employee Details",
        "description": "This API is used to update employee details\n",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateEmployeeDetail3"
            }
          }
        ],
        "responses": {
          "200": {

			 "$ref": "#/responses/SuccessMessageForUpdateEmployeeDetailApi"
          }

        }
      }},

	  "/Employee  -  MarkAsLeaverById" :{

	    "post": {
        "tags": [
          "Employee"
        ],
        "summary": "Mark As Leaver By Id",
        "description": "This API is used to update/mark employee leaver status by id\n",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MarkAsLeaverById2"
            }
          }
        ],
        "responses": {
          "200": {

			 "$ref": "#/responses/SuccessMessageForMarkAsLeaverByIdApi"
          }

        }
      }



	  },

	 "/Employee  -  AddEmployeeImage" :{

	    "post": {
        "tags": [
          "Employee"
        ],
        "summary": "Add Employee Image By Id",
        "description": "This API is used to add employee image by id\n",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AddEmployeeImageById2"
            }
          }
        ],
        "responses": {
          "200": {

			 "$ref": "#/responses/SuccessMessageForAddEmployeeImageByIdApi"
          }

        }
      }


	  },

     "/EmployeeSalary  -  GetSalaryDetail":
	  {
	   "post": {
        "tags": [
          "Employee Salary"
        ],
        "summary": "Get Salary Detail",
        "description": "This API is used to Get employee salary details\n",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetSalaryDetail2"
            }
          }
        ],
        "responses": {
          "200": {
			       "$ref": "#/responses/SuccessMessageForGetSalaryDetailApi"
                 }
        }
      }
	 },
	 "/EmployeeSalary  -  CreateNewSalary":
       {
	      "post": {
          "tags": [
                    "Employee Salary"
                   ],
          "summary": "Create New Salary",
          "description": "This API is used to Create New Salary for given user\n",
          "parameters": [
           {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateNewSalaryParameter"
            }
          }
        ],
        "responses": {
          "200": {

                  "$ref": "#/responses/SuccessMessageForCreateNewSalaryApi"
              }
        }
      }

      },
	 "/EmployeeSalary  -  DeleteSalary":
		{
		"post": {
        "tags": [
          "Employee Salary"
         ],
        "summary": "Delete Salary",
        "description": "This API is used to delete Salary details\n",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DeleteSalaryParameter"
            }
          }
        ],
        "responses": {
          "200": {

			   "$ref": "#/responses/SuccessMessageForDeleteSalaryApi"
          }
        }
      }

	  },

	 "/Employee Holiday  -  AddNewHoliday":
	  {
	    "post": {
			"tags": [
			  "Employee Holiday"
			],
			"summary": "Add New Holiday",
			"description": "This API is used to add new holiday\n",
			"parameters": [
			  {
				"name": "body",
				"in": "body",
				"required": true,
				"schema": {
				  "$ref": "#/definitions/AddNewHolidayParameter"
				}
			  }
			 ],
			"responses": {
			  "200": {

				 "$ref": "#/responses/SuccessMessageForAddNewHolidayApi"
			  }

			}
        }

	  },

	 "/Employee Holiday  -  UpdateHoliday":
	  {
	    "post": {
			"tags": [
			  "Employee Holiday"
			],
			"summary": "Update Holiday",
			"description": "This API is used to update holiday detail\n",
			"parameters": [
			  {
				"name": "body",
				"in": "body",
				"required": true,
				"schema": {
				  "$ref": "#/definitions/UpdateHolidayParameter"
				}
			  }
			 ],
			"responses": {
			  "200": {

				 "$ref": "#/responses/SuccessMessageForUpdateHolidayApi"
			  }

			}
        }


	  },

	  "/Employee Holiday  -  GetHolidayDetail":
	  {
	    "post": {
			"tags": [
			  "Employee Holiday"
			],
			"summary": "Get Holiday Detail",
			"description": "This API is used to get holiday detail list\n",
			"parameters": [
			  {
				"name": "body",
				"in": "body",
				"required": true,
				"schema": {
				  "$ref": "#/definitions/GetHolidayDetailParameter"
				}
			  }
			 ],
			"responses": {
			  "200": {

				 "$ref": "#/responses/SuccessMessageForGetHolidayDetailApi"
			  }

			}
        }


	  },

	 "/Employee Holiday  -  DeleteHoliday":
	  {
	   "post": {
        "tags": [
          "Employee Holiday"
        ],
        "summary": "Delete holiday",
        "description": "This API is used to delete holiday detail\n\n",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DeleteHolidayParameter"
            }
          }
        ],
        "responses": {
          "200": {

			 "$ref": "#/responses/SuccessMessageForDeleteHoliday"
          }

        }
      }

	  },

	 "/EmployeeAbsence  -  GetAbsenceDetail":
	  {
	    "post": {
        "tags": [
          "Employee Absence"
        ],
        "summary": "Get Absence Detail",
        "description": "This API is used to employee absence details\n",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetAbsenceDetailParameter"
            }
          }
        ],
        "responses": {
          "200": {

			 "$ref": "#/responses/SuccessMessageForGetAbsenceDetailApi"
          }
        }
       }},

    "/EmployeeAbsence  -  DeleteAbsence":
	  {
       "post": {
        "tags": [
          "Employee Absence"
        ],
        "summary": "Delete Absence",
        "description": "This API is used to delete absence  for given user\n",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DeleteAbsenceOfEmployeeParameter"
            }
          }
        ],
		"responses": {
          "200": {

			 "$ref": "#/responses/SuccessMessageForDeleteAbsenceEmployeeApi"
          }

        }
      }
	 },
   "/EmployeeAbsence  -  AddAbsence":
	  {
    	"post": {
        "tags": [
          "Employee Absence"
        ],
        "summary": "Add Absence",
        "description": "This API is used to add absence for given user\n",
            "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AddAbsenceOfEmployeeParameter"
            }
          }
        ],
		"responses": {
          "200": {
			 "$ref": "#/responses/SuccessMessageForAddEmployeeAbsence"
          }
        }
      }
    },

	"/EmployeeAbsence  -  UpdateAbsence":
	  {
	    "post": {
        "tags": [
          "Employee Absence"
        ],
        "summary": "Update Absence ",
        "description": "This API is used to update absence  for given user\n",
            "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateAbsenceDetailParameter"
            }
          }
        ],
		"responses": {
          "200": {
			       "$ref": "#/responses/SuccessMessageForUpdateAbsenceDetail"
                 }
        }
      }
    },

	 "/EmployeeDocument  -  UploadEmployeeDocument":
	  {
	   "post": {
        "tags": [
          "Employee Document"
        ],
        "summary": "Upload Employee Document",
        "description": "This API is used to Upload Employee Document details\n",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UploadEmployeeDocumentParameter"
            }
          }
        ],
        "responses": {
          "200": {
			 "$ref": "#/responses/SuccessMessageForUploadEmployeeDocument"
          }
        }
      }
	 },

	  "/EmployeeDocument  -  GetAllDocument":
	   {
	    "post": {
        "tags": [
          "Employee Document"
        ],
        "summary": "Get All Document",
        "description": "This API is used to GEt All Document Detail\n",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetAllDocumentParameter"
            }
          }
        ],
		"responses": {
          "200": {
			 "$ref": "#/responses/SuccessMessageForGetAllDocument"
          }
        }
      }
   },

	 "/EmployeeDocument  -  GetDocumentById":
      {
	   "post": {
          "tags": [
          "Employee Document"
        ],
        "summary": "Get Document By Id",
        "description": "This API is used to get Document By Id for given user\n",
            "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetDocumentByIDParameter"
            }
          }
        ],
		"responses": {
          "200": {
			 "$ref": "#/responses/SuccessMessageForGetDocumentById"
          }
        }
      }

	 },

	 "/Employee Timesheet  -  GetTimesheetDetail":
	  {
	   "post": {
        "tags": [
          "Employee Timesheet"
        ],
        "summary": "Get Employee Timesheet Detail List",
        "description": "This API is used to get employee timesheet detail list\n",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetTimesheetdefinition"
            }
          }
        ],
        "responses": {
          "200": {

			 "$ref": "#/responses/SuccessMessageForGetTimesheetDetail"
          }

        }
      }


	  },

	 "/Employee Timesheet  -  CreateNewTimesheet":
	  {
	    "post": {
        "tags": [
          "Employee Timesheet"
        ],
        "summary": "Create New Timesheet",
        "description": "This API is used to create new employee Timesheet\n",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateNewTimesheetDefinition"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "check description for error code",
			"$ref": "#/responses/SuccessMessageForCreateNewEmployeeTimesheetApi"


          }

        }
      }

	  },

	 "/Employee Timesheet  -  UpdateTimesheet":
	  {
	   "post": {
        "tags": [
          "Employee Timesheet"
        ],
        "summary": "Update Employee Timesheet",
        "description": "This API is used to update employee timesheet details\n",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateTimesheetDefinition"
            }
          }
        ],
        "responses": {
          "200": {

			 "$ref": "#/responses/SuccessMessageForUpdateEmployeeTimesheetApi"
          }

        }
      }

	  },

	  "/Employee Timesheet  -  DeleteTimesheet":
	  {
	    "post": {
        "tags": [
          "Employee Timesheet"
        ],
        "summary": "Delete Timesheet",
        "description": "This API is used to delete employee Timesheet\n",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DeleteTimesheetdefinition"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "check description for error code",
			"$ref": "#/responses/SuccessMessageForDeleteEmployeeTimesheet"


          }

        }
      }

	  },

	  "/Employee Project Timesheet  -  GetProjectTimesheetDetail":
	  {
	     "post": {
        "tags": [
          "Employee Project Timesheet"
        ],
        "summary": "Get Project Time sheet Detail",
        "description": "This API is used to get project time sheet detail for given user\n",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetProjectTimesheetDetail"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "check description for error code",

              "$ref": "#/responses/SuccessMessageForGetProjectTimesheetDetailApi"

          }

        }
      }

	 },

	"/Employee Project Timesheet  -  GetProjectTimesheetByTransactionId":
	  {
	     "post": {
        "tags": [
          "Employee Project Timesheet"
        ],
        "summary": "Get Project Timesheet By TransactionId",
        "description": "This API is used to get project timesheet by transactionid for given user\n",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetProjectTimesheetByTransactionId"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "check description for error code",

              "$ref": "#/responses/SuccessMessageForGetProjectTimesheetByTransactionId"

          }

        }
      }

	 },

	 "/Employee Project Timesheet  -  CreateProjectTimesheet":
	  {
	     "post": {
        "tags": [
          "Employee Project Timesheet"
        ],
        "summary": "Create project timesheet",
        "description": "This API is used to create project timesheet for given user\n",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateProjectTimesheetParameter"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "check description for error code",

              "$ref": "#/responses/SuccessMessageForCreateProjectTimesheet"

          }

        }
      }

	 },
	 "/Employee Project Timesheet  -  UpdateProjectTimesheet":
	  {
	     "post": {
        "tags": [
          "Employee Project Timesheet"
        ],
        "summary": "Update project timesheet",
        "description": "This API is used to update project timesheet for given user\n",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateProjectTimesheetParameter"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "check description for error code",

              "$ref": "#/responses/SuccessMessageForUpdateProjectTimesheet"

          }

        }
      }

	 },

	 "/Employee Project Timesheet  -  DeleteProjectTimesheet":
	  {
	    "post": {
        "tags": [
          "Employee Project Timesheet"
        ],
        "summary": "Delete project timesheet",
        "description": "This API is used to delete project timesheet for given user\n",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DeleteProjectTimesheetParameter"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "check description for error code",

              "$ref": "#/responses/SuccessMessageForDeleteProjectTimesheet"

          }

        }
      }

	 },

	  "/Employee Project Timesheet  -  GetAllTimesheetProject":
	  {
	    "post": {
        "tags": [
          "Employee Project Timesheet"
        ],
        "summary": "Get All Timesheet Project",
        "description": "This API is used to get all timesheet project detail\n",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetAllTimesheetProjectParameter"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "check description for error code",

              "$ref": "#/responses/SuccessMessageForGetAllTimesheetProjectApi"

          }

        }
      }

	 },

	 "/Employee Project Timesheet  -  AddNewProject":
	  {
	   "post":
	   {
        "tags": [
          "Employee Project Timesheet"
        ],
        "summary": "Add New Project",
        "description": "This API is used to add new project details\n",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AddNewProjectParameter"
            }
          }
        ],
		"responses": {
          "200": {
			 "$ref": "#/responses/SuccessMessageForAddNewProject"
          }
        }
      }
    },

	  "/Employee Project Timesheet  -  EditProject":
	  {
	   "post": {
        "tags": [
          "Employee Project Timesheet"
        ],
        "summary": "Edit Project",
        "description": "This API is used to edit project details\n",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/EditProjectParameter"
            }
          }
        ],
		"responses": {
          "200": {
			 "$ref": "#/responses/SuccessMessageForEditProject"
          }
        }
      }
    },

	  "/Employee Project Timesheet  -  GetAllProjectTask":
	  {
	     "post": {
        "tags": [
          "Employee Project Timesheet"
        ],
        "summary": "Get All Project Task",
        "description": "This API is used to get all project task detail\n",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetAllProjectTaskParameter"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "check description for error code",

              "$ref": "#/responses/SuccessMessageForGetAllProjectTask"

          }

        }
      }

	 },

	 "/Employee Project Timesheet  -  AddNewProjectTask":
	  {
	     "post": {
        "tags": [
          "Employee Project Timesheet"
        ],
        "summary": "Add New Project Task",
        "description": "This API is used to add new project task detail\n",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AddNewProjectTaskParameter"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "check description for error code",

              "$ref": "#/responses/SuccessMessageForAddNewProjectTask"

          }

        }
      }

	 },

	 "/Employee Project Timesheet  -  EditProjectTask":
	  {
	    "post": {
        "tags": [
          "Employee Project Timesheet"
        ],
        "summary": "Edit Project Task",
        "description": "This API is used to edit project task detail\n",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/EditProjectTaskParameter"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "check description for error code",

              "$ref": "#/responses/SuccessMessageForEditProjectTask"

          }

        }
      }

	 },

	"/Employee Project Timesheet  -  GetAllProjectTaskDetail":
	  {
	    "post": {
        "tags": [
          "Employee Project Timesheet"
        ],
        "summary": "Get All Project Task Detail",
        "description": "This API is used to get all project task detail\n",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetAllProjectTaskDetailParameter"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "check description for error code",

              "$ref": "#/responses/SuccessMessageForGetAllProjectTaskDetail"

          }

        }
      }

	 },

	"/Employee Project Timesheet  -  AddNewProjectTaskDetail":
	{
	    "post": {
        "tags": [
          "Employee Project Timesheet"
        ],
        "summary": "Add New Project Task Detail",
        "description": "This API is used to add new project task detail\n",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AddNewProjectTaskDetailParameter"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "check description for error code",

              "$ref": "#/responses/SuccessMessageForAddNewProjectTaskDetail"

          }

        }
      }},
   "/Employee Project Timesheet  -  EditProjectTaskDetail":
	{
	    "post": {
        "tags": [
          "Employee Project Timesheet"
        ],
        "summary": "Edit Project Task Detail",
        "description": "This API is used to edit project task detail\n",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/EditProjectTaskDetailParameter"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "check description for error code",

              "$ref": "#/responses/SuccessMessageForEditProjectTaskDetail"

          }

        }
      }},


	  "/EmployeeAppraisal  -  GetByEmployeeId":
	  {
	   "post": {
        "tags": [
          "Employee Appraisal"
        ],
        "summary": " Get By Employee Id ",
        "description": "This API is used to Get By Employee Id Appraisal details\n",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetByEmployeeIdForEmployeeAppraisal"
            }
          }
        ],
        "responses": {
          "200": {
			 "$ref": "#/responses/SuccessMessageForEmployeeAppraisalGetEmployeeById"
          }
        }
       }
	  },
	  "/EmployeeAppraisal  -  GetByAppraisalId":
	  {
	   "post": {
        "tags": [
          "Employee Appraisal"
        ],
        "summary": "Get By Appraisal Id",
        "description": "This API is used to Get By Appraisal Id  details\n",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetByAppraisalIdForEmployeeAppraisal"
            }
          }
        ],
        "responses": {
          "200": {
			 "$ref": "#/responses/SuccessMessageForGetByAppraisalId"
          }
        }
       }
	  },
	  "/EmployeeAppraisal  -  AddNewAppraisal":
	  {
	     "post": {
        "tags": [
          "Employee Appraisal"
        ],
        "summary": "Add New Appraisal",
        "description": "This API is used to add new appraisal for given user\n",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AddNewAppraisalParameter"
            }
          }
        ],
		"responses": {
          "200": {

			 "$ref": "#/responses/SuccessMessageForAddNewAppraisal"
          }

        }
      }  },
	  "/EmployeeAppraisal  -  UpdateAppraisal":
	  {
	   "post": {
        "tags": [
          "Employee Appraisal"
        ],
        "summary": "Update Appraisal",
        "description": "This API is used to Update Appraisal for given user\n",
            "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateAppraisalParameter"
            }
          }
        ],
		"responses": {
          "200": {

			 "$ref": "#/responses/SuccessMessageForUpdateAppraisal"
          }
        }
      }
    },

  "/EmployeeAppraisal  -  DeleteAppraisal":
	  {
	   "post": {
        "tags": [
          "Employee Appraisal"
        ],
        "summary": "Delete Appraisal ",
        "description": "This API is used to Delete Appraisal for given user\n",
            "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DeleteAppraisalParameter"
            }
          }
        ],
		"responses": {
          "200": {
			       "$ref": "#/responses/SuccessMessageForDeleteAppraisal"
                 }
        }
      }
    },

	 "/EmployeeBenefit  -  GetBenefitByEmployeeId":
	  {
	   "post": {
        "tags": [
          "Employee Benefit"
        ],
        "summary": "Get Benefit By EmployeeId Id ",
        "description": "This API is used to get by employee id details\n",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetBenefitByEmployeeIdParameter"
            }
          }
        ],
        "responses": {
          "200": {
			 "$ref": "#/responses/SuccessMessageForGetBenefitByEmployeeId"
          }
        }
       }},
   "/EmployeeBenefit  -  GetBenefitByBenefitId":
	  {
	     "post": {
         "tags": [
          "Employee Benefit"
        ],
        "summary": "Get By Benefit Id",
        "description": "This API is used to get by  benefit id details\n",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetByBenefitIdParameter"
            }
          }
        ],
		"responses": {
          "200": {
			 "$ref": "#/responses/SuccessMessageForGetByBenefitIdApi"
          }
        }
      }
	  },
	"/EmployeeBenefit  -  AddNewBenefit":
	  {
	   "post": {
        "tags": [
          "Employee Benefit"
        ],
        "summary": "Add New Benefit",
        "description": "This API is used to Add new benefit details\n",
            "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AddNewBenefitParameter"
            }
          }
        ],
		"responses": {
          "200": {
			 "$ref": "#/responses/SuccessMessageForAddNewBenefitApi"
          }
        }
      }
    },
   "/EmployeeBenefit  -  UpdateBenefit":
	  {
	   "post": {
        "tags": [
          "Employee Benefit"
        ],
        "summary": "Update Benefit ",
        "description": "This API is used to Update Benefit Details\n",
            "parameters": [
           {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateBenefitParameter"
            }
          }
        ],
		"responses": {
          "200": {
			 "$ref": "#/responses/SuccessMessageForUpdateBenefitApi"
          }
        }
      }
    },
	"/EmployeeBenefit  -  DeleteBenefit":
	  {
	    "post": {
        "tags": [
          "Employee Benefit"
        ],
        "summary": "Delete Benefit ",
        "description": "This API is used to Delete Benefit Details\n",
            "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DeleteBenefitParameter"
            }
          }
        ],
		"responses": {
          "200": {
			 "$ref": "#/responses/SuccessMessageForDeleteBenefitApi"
          }
        }
      }
    },

	 "/Employee CPD  -  GetCPDByEmployeeId":
	  {
	     "post": {
        "tags": [
          "Employee CPD"
        ],
        "summary": "Get CPD By EmployeeId",
        "description": "This API is used to Get CPD By EmployeeId for given user\n",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetCPDByEmployeeIdParameter"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "check description for error code",

              "$ref": "#/responses/SuccessMessageForGetCPDByEmployeeId"

          }

        }
      }},

	 "/Employee CPD  -  GetByCPDId":
	  {
	     "post": {
        "tags": [
          "Employee CPD"
        ],
        "summary": "Get By CPDId",
        "description": "This API is used to Get By CPDId for given user\n",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetByCPDIdParameter"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "check description for error code",

              "$ref": "#/responses/SuccessMessageForGetByCPDId"

          }

        }
      }},


	  "/Employee CPD  -  AddNewCPD":
	  {
	     "post": {
        "tags": [
          "Employee CPD"
        ],
        "summary": "Add new CPD",
        "description": "This API is used to add new CPD for given user\n",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AddnewCPDParameter"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "check description for error code",

              "$ref": "#/responses/SuccessMessageForAddNewCPD"

          }

        }
      }},

	 "/Employee CPD  -  UpdateCPD":
	  {
	     "post": {
        "tags": [
          "Employee CPD"
        ],
        "summary": "Update CPD",
        "description": "This API is used to update CPD for given user\n",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateCPDParameter"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "check description for error code",

              "$ref": "#/responses/SuccessMessageForUpdateCPD"

          }

        }
      }},

	 "/Employee CPD  -  DeleteCPD":
	  {
	     "post": {
        "tags": [
          "Employee CPD"
        ],
        "summary": "Delete CPD",
        "description": "This API is used to delete CPD for given user\n",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DeleteCPDParameter"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "check description for error code",

              "$ref": "#/responses/SuccessMessageForDeleteCPD"

          }

        }
      }},


	"/Employee Driving  -  GetDrivingLicenseByEmployeeId":
	  {
	   "post": {
        "tags": [
          "Employee Driving"
        ],
        "summary": "Get Driving License By Employee Id",
        "description": "This API is used to get driving license by employeeid\n",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
			  "$ref": "#/definitions/GetDrivingLicenseByEmployeeIdParameter"
            }
          }
        ],
        "responses": {
          "200": {

			 "$ref": "#/responses/SuccessMessageForGetDrivingLicenseByEmployeeIdApi"
          }
        }
      }},

	  "/Employee Driving  -  GetDrivingLicenseByDrivingId":
	  {
	   "post": {
        "tags": [
          "Employee Driving"
        ],
        "summary": "Get Driving License By Driving Id",
        "description": "This API is used to get driving license by drivingId\n",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
			  "$ref": "#/definitions/GetDrivingLicenseByDrivingIdParameter"
            }
          }
        ],
        "responses": {
          "200": {

			 "$ref": "#/responses/SuccessMessageForGetDrivingLicenseByDrivingIdApi"
          }

        }
      }},

	  "/Employee Driving  -  AddNewDrivingLicense":
	  {
	   "post": {
        "tags": [
          "Employee Driving"
        ],
        "summary": "Add New Driving License",
        "description": "This API is used to Add new driving license\n",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
			  "$ref": "#/definitions/AddNewDrivingLicenseParameter"
            }
          }
        ],
        "responses": {
          "200": {

			 "$ref": "#/responses/SuccessMessageForAddNewDrivingLicenseApi"
          }

        }
      }},

	   "/Employee Driving  -  UpdateDrivingLicense":
	  {
	   "post": {
        "tags": [
          "Employee Driving"
        ],
        "summary": "Update Driving License",
        "description": "This API is used to update driving license\n",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
			  "$ref": "#/definitions/UpdateDrivingLicenseParameter"
            }
          }
        ],
        "responses": {
          "200": {

			 "$ref": "#/responses/SuccessMessageForUpdateDrivingLicenseApi"
          }

        }
      }},

	  "/Employee Driving  -  DeleteDrivingLicense":
	  {
	   "post": {
        "tags": [
          "Employee Driving"
        ],
        "summary": "Delete Driving License",
        "description": "This API is used to delete driving license\n",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DeleteDrivingLicenseParameter"
            }
          }
        ],
        "responses": {
          "200": {

			 "$ref": "#/responses/SuccessMessageForDeleteDrivingLicenseApi"
          }

        }
      }},

	  "/Employee Qualification  -  GetQualificationByEmployeeId":
	  {
	   "post": {
        "tags": [
          "Employee Qualification"
        ],
        "summary": "Get Qualification By EmployeeId",
        "description": "This API is used to get qualification by EmployeeId \n",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
			  "$ref": "#/definitions/GetQualificationByEmployeeIdParameter"
            }
          }
        ],
        "responses": {
          "200": {
			 "$ref": "#/responses/SuccessMessageForGetQualificationByEmployeeIdApi"
          }

        }
      }},

	   "/Employee Qualification  -  GetQualificationByQualificationId":
	  {
	   "post": {
        "tags": [
          "Employee Qualification"
        ],
        "summary": "Get Qualification By QualificationId",
        "description": "This API is used to Get qualification by qualification Id \n",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
			  "$ref": "#/definitions/GetQualificationByQualificationIdParameter"
            }
          }
        ],
        "responses": {
          "200": {

			 "$ref": "#/responses/SuccessMessageForGetQualificationByQualificationIdApi"
          }

        }
      }},

	  "/Employee Qualification  -  AddNewQualification" :{

	    "post": {
        "tags": [
          "Employee Qualification"
        ],
        "summary": "Add New Qualification",
        "description": "This API is used to Add new qualification\n",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AddNewQualificationParameter"
            }
          }
        ],
        "responses": {
          "200": {

			 "$ref": "#/responses/SuccessMessageForAddNewQualificationApi"
          }

        }
      }
	  },

	  "/Employee Qualification  -  UpdateQualification" :{

	    "post": {
        "tags": [
          "Employee Qualification"
        ],
        "summary": "Update Qualification",
        "description": "This API is used to Update qualification\n",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
			  "$ref": "#/definitions/UpdateQualificationParameter"
            }
          }
        ],
        "responses": {
          "200": {
			 "$ref": "#/responses/SuccessMessageForUpdateQualificationApi"
          }

        }
      }
	  },

	  "/Employee Qualification  -  DeleteQualification" :
	  {
	    "post": {
        "tags": [
          "Employee Qualification"
        ],
        "summary": "Delete Qualification",
        "description": "This API is used to delete qualification\n",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
			  "$ref": "#/definitions/DeleteQualificationParameter"
            }
          }
        ],
        "responses": {
          "200": {
			 "$ref": "#/responses/SuccessMessageForDeleteQualificationApi"
		  }

        }
      }


	  },

	  "/Employee Training  -  GetTrainingDetail":
	  {
	   "post": {
        "tags": [
          "Employee Training"
        ],
        "summary": "Get Training Detail",
        "description": "This API is used to Get  training detail\n",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
			  "$ref": "#/definitions/GetTrainingDetailParameter"
            }
          }
        ],
        "responses": {
          "200": {

			 "$ref": "#/responses/SuccessMessageForGetTrainingDetailApi"
          }

        }
      }},

	 "/Employee Training  -  addtrainingdetail":
	  {
	   "post": {
        "tags": [
          "Employee Training"
        ],
        "summary": "Add Training Detail",
        "description": "This API is used to Add Training Detail\n",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
			  "$ref": "#/definitions/AddTrainingDetailParameter"
            }
          }
        ],
        "responses": {
          "200": {

			 "$ref": "#/responses/SuccessMessageForAddTrainingDetailApi"
          }

        }
      }},

	 "/Employee Training  -  updatetrainingdetail":
	  {
	   "post": {
        "tags": [
          "Employee Training"
        ],
        "summary": "Update Training Detail",
        "description": "This API is used to update training detail\n",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
			  "$ref": "#/definitions/UpdateTrainingDetailParameter"
            }
          }
        ],
        "responses": {
          "200": {

			 "$ref": "#/responses/SuccessMessageForUpdateTrainingDetailApi"
          }

        }
      }},

	 "/Employee Training  -  deletetrainingdetail" :
	  {
	    "post": {
        "tags": [
          "Employee Training"
        ],
        "summary": "Delete Training Detail",
        "description": "This API is used to delete training detail\n",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
			  "$ref": "#/definitions/DeleteTrainingDetailParameter"
            }
          }
        ],
        "responses": {
          "200": {

			 "$ref": "#/responses/SuccessMessageForDeleteTrainingDetailApi"
          }

        }
      }
	  },

	 "/Employee Vehicle  -  AddNewVehicleDetail":
	  {
	   "post": {
        "tags": [
          "Employee Vehicle"
        ],
        "summary": "Add New Vehicle Detail",
        "description": "This API is used to create employee's new vehicle detail",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AddNewVehicleDetailDefinition"
            }
          }
        ],
        "responses": {
          "200": {

			 "$ref": "#/responses/SuccessMessageForAddNewVehicleDetail"
          }

        }
      }
	  },

	 "/Employee Vehicle  -  UpdateVehicleDetail":
	  {
	   "post": {
        "tags": [
          "Employee Vehicle"
        ],
        "summary": "Update Vehicle Detail",
        "description": "This API is used to update employee's vehicle detail",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateVehicleDetailDefinition"
            }
          }
        ],
        "responses": {
          "200": {

			 "$ref": "#/responses/SuccessMessageForUpdateVehicleDetail"
          }

        }
      }

	  },
	  "/Employee Vehicle  -  DeleteVehicleDetail":
	  {
	   "post": {
        "tags": [
          "Employee Vehicle"
        ],
        "summary": "Delete Vehicle Detail",
        "description": "This API is used to delete employee's vehicle detail",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DeleteVehicleDetailDefinition"
            }
          }
        ],
        "responses": {
          "200": {

			 "$ref": "#/responses/SuccessMessageForDeleteVehicleDetail"
          }

        }
      }

	  },
	  "/Employee Vehicle  -  GetByVehicleDetailId":
	  {
	   "post": {
        "tags": [
          "Employee Vehicle"
        ],
        "summary": "Get By Vehicle Detail Id",
        "description": "This API is used to get employee's vehicle detail by vehicle id",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetVehicleDetailByVehicleIdDefinition"
            }
          }
        ],
        "responses": {
          "200": {

			 "$ref": "#/responses/SuccessMessageForGetVehicleDetailByVehicleId"
          }

        }
      }

	  },

	 "/Employee Vehicle  -  GetVehicleByEmployeeId":
	  {
	   "post": {
        "tags": [
          "Employee Vehicle"
        ],
        "summary": "Get Vehicle By Employee Id",
        "description": "This API is used to get employee's vehicle detail by employee id",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetVehicleDetailByEmployeeIdDefinition"
            }
          }
        ],
        "responses": {
          "200": {

			 "$ref": "#/responses/SuccessMessageForGetVehicleDetailByEmployeeId"
          }

        }
      }

	  },

	"/Employee Custom Screen  -  GetCustomScreenDetail":
	  {
	   "post": {
        "tags": [
          "Employee Custom Screen"
        ],
        "summary": "Get Custom Screen Detail",
        "description": "This API is used to get custom screen details\n",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetCustomScreenDetailParameter"
            }
          }
        ],
        "responses": {
          "200": {

			 "$ref": "#/responses/SuccessMessageForGetCustomScreenDetailApi"
          }

        }
      }

	  },
	  "/Employee Custom Screen  -  GetCustomScreenByEmployeeId":
	  {
	   "post": {
        "tags": [
          "Employee Custom Screen"
        ],
        "summary": "Get Custom Screen By Employee Id",
        "description": "This API is used to get custom screen by employee id detail\n",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetCustomScreenByEmployeeIdParameter"
            }
          }
        ],
        "responses": {
          "200": {

			 "$ref": "#/responses/SuccessMessageForGetCustomScreenByEmployeeIdApi"
          }

        }
      }

	  },
	 "/Employee Custom Screen  -  GetByCustomScreenTransactionId":
	  {
	   "post": {
        "tags": [
          "Employee Custom Screen"
        ],
        "summary": "Get By Custom Screen Transaction Id",
        "description": "This API is used to get by custom screen transaction id detail\n",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetByCustomScreenTransactionIdParameter"
            }
          }
        ],
        "responses": {
          "200": {

			 "$ref": "#/responses/SuccessMessageForGetByCustomScreenTransactionIdApi"
          }

        }
      }

	  },
     "/Employee Custom Screen  -  AddNewCustomScreenTransaction":
	  {
	   "post": {
        "tags": [
          "Employee Custom Screen"
        ],
        "summary": "Add New Custom Screen Transaction",
        "description": "This API is used to add new custom screen transaction details\n",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AddNewCustomScreenTransactionParameter"
            }
          }
        ],
        "responses": {
          "200": {

			 "$ref": "#/responses/SuccessMessageForAddNewCustomScreenTransactionApi"
          }

        }
      }

	  },
	   "/Employee Custom Screen  -  UpdateCustomScreenTransaction":
	  {
	   "post": {
        "tags": [
          "Employee Custom Screen"
        ],
        "summary": "Update Custom Screen Transaction",
        "description": "This API is used to update custom screen transaction details\n",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateCustomScreenTransactionParameter"
            }
          }
        ],
        "responses": {
          "200": {

			 "$ref": "#/responses/SuccessMessageForUpdateCustomScreenTransactionApi"
          }

        }
      }

	  },
	   "/Employee Custom Screen  -  DeleteCustomScreenTransaction":
	  {
	   "post": {
        "tags": [
          "Employee Custom Screen"
        ],
        "summary": "Delete Custom Screen Transaction",
        "description": "This API is used to delete custom screen transaction details\n",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DeleteCustomScreenTransactionParameter"
            }
          }
        ],
        "responses": {
          "200": {

			 "$ref": "#/responses/SuccessMessageForDeleteCustomScreenTransactionApi"
          }

        }
      }

	  },
	  "/Holiday Entitlement  -  GetHolidayEntitlement":
	  {
	   "post": {
        "tags": [
          "Holiday Entitlement"
        ],
        "summary": "Get Holiday Entitlement",
        "description": "This API is used to get holiday entitlement details\n",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetHolidayEntitlementParameter"
            }
          }
        ],
        "responses": {
          "200": {

			 "$ref": "#/responses/SuccessMessageForGetHolidayEntitlementApi"
          }

        }
      }

	  },
	  "/Holiday Entitlement  -  GetNextYearHolidayEntitlement":
	  {
	   "post": {
        "tags": [
          "Holiday Entitlement"
        ],
        "summary": "Get Next Year Holiday Entitlement",
        "description": "This API is used to get next year holiday entitlement details\n",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetNextYearHolidayEntitlementParameter"
            }
          }
        ],
        "responses": {
          "200": {

			 "$ref": "#/responses/SuccessMessageForGetNextYearHolidayEntitlementApi"
          }

        }
      }

	  },
	  "/Holiday Entitlement  -  UpdateHolidayEntitlement":
	  {
	   "post": {
        "tags": [
          "Holiday Entitlement"
        ],
        "summary": "Update Holiday Entitlement",
        "description": "This API is used to update holiday entitlement details\n",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateHolidayEntitlementParameter"
            }
          }
        ],
        "responses": {
          "200": {

			 "$ref": "#/responses/SuccessMessageForUpdateHolidayEntitlementApi"
          }

        }
      }

	  },
	  "/Holiday Entitlement  -  UpdateNextYearHolidayEntitlement":
	  {
	   "post": {
        "tags": [
          "Holiday Entitlement"
        ],
        "summary": "Update Next Year Holiday Entitlement",
        "description": "This API is used to update next year holiday entitlement details\n",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateNextYearHolidayEntitlementParameter"
            }
          }
        ],
        "responses": {
          "200": {

			 "$ref": "#/responses/SuccessMessageForUpdateNextYearHolidayEntitlementApi"
          }

        }
      }

	  },
	  "/History  -  GetHistoryByEmployeeIdAndFieldName":
	  {
	   "post": {
        "tags": [
          "History"
        ],
        "summary": "Get History By EmployeeId And FieldName",
        "description": "This API is used to get history by employeeId and fieldname details\n",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetHistoryByEmployeeIdAndFieldNameParameter"
            }
          }
        ],
        "responses": {
          "200": {

			 "$ref": "#/responses/SuccessMessageForGetHistoryByEmployeeIdAndFieldNameApi"
          }

        }
      }

	  },
	  "/Query  -  GetQueryResult":
	  {
	   "post": {
        "tags": [
          "Query"
        ],
        "summary": "Get Query Result by Query Id",
        "description": "Deprecated.This API is used to get query result by query id details. It has been superseeded by Get Query Result By QueryName which returns date information in a UTC YYYY/MM/DD format\n",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetQueryResultParameter"
            }
          }
        ],
        "responses": {
          "200": {

			 "$ref": "#/responses/SuccessMessageForGetQueryResultApi"
          }

        }
      }

	  },
	  "/Query  -  GetQueryResultByQueryName":
	  {
	   "post": {
        "tags": [
          "Query"
        ],
        "summary": "Get Query Result By QueryName",
        "description": "This API is used to get query result By query name details\n",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetQueryResultByQueryNameParameter"
            }
          }
        ],
        "responses": {
          "200": {

			 "$ref": "#/responses/SuccessMessageForGetQueryResultByQueryNameApi"
          }

        }
      }

	  },
	  "/Email Transaction  -  EmailInbox":
	  {
	   "post": {
        "tags": [
          "Email Transaction"
        ],
        "summary": "Email Inbox",
        "description": "This API is used for Email Inbox\n",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/EmailInboxParameter"
            }
          }
        ],
        "responses": {
          "200": {

			 "$ref": "#/responses/SuccessMessageForEmailInboxApi"
          }

        }
      }


	  },

	 "/Right To Work  -  addrighttoworkdetail":
	  {
	    "post": {
        "tags": [
          "Right To Work"
        ],
        "summary": "Add Right To Work Detail",
        "description": "This API is used to add right to work detail\n",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AddNewRightToWorkDetailParameter"
            }
          }
        ],
        "responses": {
		 "200": {

			 "$ref": "#/responses/SuccessMessageForaddrighttoworkdetailApi"
          }

        }
      }

	  },

	 "/Right To Work  -  getrighttoworkdetail":
	  {
	   "post": {
        "tags": [
          "Right To Work"
        ],
        "summary": "Get Right To Work Detail",
        "description": "This API is used to get right to work detail\n",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetRightToWorkDetailParameter"
            }
          }
        ],
        "responses": {
          "200": {

			 "$ref": "#/responses/SuccessMessageForgetrighttoworkdetailApi"
          }

        }
      }


    },

	 "/Right To Work  -  updaterighttoworkdetail":
	  {
	   "post": {
        "tags": [
          "Right To Work"
        ],
        "summary": "Update Right To Work Detail",
        "description": "This API is used to update right to work details\n",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/updaterighttoworkdetailParameter"
            }
          }
        ],
        "responses": {
          "200": {

			 "$ref": "#/responses/SuccessMessageForupdaterighttoworkdetailApi"
          }

        }
      }


	  },

	"/Right To Work  -  deleterighttoworkdetail":
	  {
	   "post": {
        "tags": [
          "Right To Work"
        ],
        "summary": "Delete Right To Work Detail",
        "description": "This API is used to delete right to work detail\n",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/deleterighttoworkdetailParameter"
            }
          }
        ],
        "responses": {
          "200": {

			 "$ref": "#/responses/SuccessMessageFordeleterighttoworkdetailApi"
          }

        }
      }


	  },

	 "/Background Check  -  GetBackgroundCheckDetailByEmployeeId":
	  {
	   "post": {
        "tags": [
          "Background Check"
        ],
        "summary": "Get Background Check Detail By EmployeeId",
        "description": "This API is used to Get Background Check Detail By EmployeeId\n",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetBackgroundCheckDetailByEmployeeIdParameter"
            }
          }
        ],
        "responses": {
          "200": {

			 "$ref": "#/responses/SuccessMessageForGetBackgroundCheckDetailByEmployeeIdApi"
          }

        }
      }


    },

	 "/Background Check  -  AddBackgroundCheckDetail":
	  {
	    "post": {
        "tags": [
          "Background Check"
        ],
        "summary": "Add Background Check Detail",
        "description": "This API is used to add background check detail\n",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AddBackgroundCheckDetailParameter"
            }
          }
        ],
        "responses": {
		 "200": {

			 "$ref": "#/responses/SuccessMessageForAddBackgroundCheckDetailApi"
          }

        }
      }

	  },

	 "/Background Check  -  UpdateBackgroundCheckDetail":
	  {
	    "post": {
        "tags": [
          "Background Check"
        ],
        "summary": "Update Background Check Detail",
        "description": "This API is used to update background check detail\n",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateBackgroundCheckDetailParameter"
            }
          }
        ],
        "responses": {
		 "200": {

			 "$ref": "#/responses/SuccessMessageForUpdateBackgroundCheckDetailApi"
          }

        }
      }

	  },

	  "/Background Check  -  DeleteBackgroundCheckDetail":
	  {
	    "post": {
        "tags": [
          "Background Check"
        ],
        "summary": "Delete Background Check Detail",
        "description": "This API is used to Delete Background Check Detail\n",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DeleteBackgroundCheckDetailParameter"
            }
          }
        ],
        "responses": {
		 "200": {

			 "$ref": "#/responses/SuccessMessageForDeleteBackgroundCheckDetailApi"
          }

        }
      }

	  },

	 "/Other Event  -  getothereventdetail":
	  {
	   "post": {
        "tags": [
          "Other Event"
        ],
        "summary": "Get Other Event Detail",
        "description": "This API is used to get other event detail\n",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/getothereventdetailParameter"
            }
          }
        ],
        "responses": {
          "200": {

			 "$ref": "#/responses/SuccessMessageForgetothereventdetailApi"
          }

        }
      }

    },

	"/Other Event  -  getotherevententitlement":
	  {
	   "post": {
        "tags": [
          "Other Event"
        ],
        "summary": " Get Other Event Entitlement",
        "description": "This API is used to get other event entitlement\n",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/getotherevententitlementParameter"
            }
          }
        ],
        "responses": {
          "200": {

			 "$ref": "#/responses/SuccessMessageForgetotherevententitlementApi"
          }

        }
      }


    },

	 "/Other Event  -  DeleteOtherEvent":
	  {
	   "post": {
        "tags": [
          "Other Event"
        ],
        "summary": "Delete Other Event",
        "description": "This API is used to Delete Other Event\n",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DeleteOtherEventParameter"
            }
          }
        ],
        "responses": {
          "200": {

			 "$ref": "#/responses/SuccessMessageForDeleteOtherEventApi"
          }

        }
      }


	  },

	  "/Other Event  -  addothereventleave":
	  {
	   "post": {
        "tags": [
          "Other Event"
        ],
        "summary": "Add Other Event",
        "description": "This API is used to Add Other Event\n",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/addothereventleaveParameter"
            }
          }
        ],
        "responses": {
          "200": {

			 "$ref": "#/responses/SuccessMessageForaddothereventleaveApi"
          }

        }
      }


	  },

	 "/Other Event  -  updateothereventleave":
	  {
	   "post": {
        "tags": [
          "Other Event"
        ],
        "summary": "Update Other Event",
        "description": "This API is used to Update Other Event\n",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/updateothereventleaveParameter"
            }
          }
        ],
        "responses": {
          "200": {

			 "$ref": "#/responses/SuccessMessageForupdateothereventleaveApi"
          }

        }
      }


	  },

	"/Other Event  -  addotherevententitlement":
	  {
	   "post": {
        "tags": [
          "Other Event"
        ],
        "summary": "Insert Update Other Event Entitlement",
        "description": "This API is used to Insert Update Other Event Entitlement\n",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/addotherevententitlementParameter"
            }
          }
        ],
        "responses": {
          "200": {

			 "$ref": "#/responses/SuccessMessageForaddotherevententitlementApi"
          }

        }
      }

	  },

	 "/Vacancy  -  CreateNewVacancy":
	  {
	   "post": {
        "tags": [
          "Vacancy"
        ],
        "summary": "Create New Vacancy",
        "description": "This API is used to create new vacancy\n",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateVacancyDetailParameter"
            }
          }
        ],
        "responses": {
          "200": {

			 "$ref": "#/responses/SuccessMessageForCreateNewVacancy"
          }

        }
      }},

     "/Vacancy  -  GetVacancy":
	  {
	   "post": {
        "tags": [
          "Vacancy"
        ],
        "summary": "Get vacancy",
        "description": "This API is used to get vacancy detail\n",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetVacancyParameters"
            }
          }
        ],
        "responses": {
          "200": {

			 "$ref": "#/responses/SuccessMessageForGetVacancyByReference"
          }

        }
      }},

     "/Vacancy  -  GetAllVacancies":
	  {
	   "post": {
        "tags": [
          "Vacancy"
        ],
        "summary": "Get all vacancies",
        "description": "This API is used to get all vacancies detail\n",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetAllVacancyParameters"
            }
          }
        ],
        "responses": {
          "200": {

			 "$ref": "#/responses/SuccessMessageForGetAllVacancyByReference"
          }

        }
      }

	  },

	 "/Applicant  -  CreateNewApplicant":
	  {
	   "post": {
        "tags": [
          "Applicant"
        ],
        "summary": "Create New Applicant",
        "description": "This API is used to create new applicant\n\n",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateApplicantDetailParameter"
            }
          }
        ],
        "responses": {
          "200": {

			 "$ref": "#/responses/SuccessMessageForCreateNewApplicant"
          }

        }
      }},


	  "/Applicant  -  uploadapplicantdocument":
	  {
	   "post": {
        "tags": [
          "Applicant"
        ],
        "summary": "upload applicant document",
        "description": "This API is used to upload applicant document\n\n",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/uploadapplicantdocumentParameter"
            }
          }
        ],
        "responses": {
          "200": {

			 "$ref": "#/responses/SuccessMessageForuploadapplicantdocument"
          }

        }
      }},


	  "/Applicant  -  CheckDuplicateApplicant":
	  {
	   "post": {
        "tags": [
          "Applicant"
        ],
        "summary": "Check duplicate applicant",
        "description": "This API is used to Check duplicate applicant\n\n",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CheckDuplicateApplicantParameter"
            }
          }
        ],
        "responses": {
          "200": {

			 "$ref": "#/responses/SuccessMessageForCheckDuplicateApplicant"
          }

        }
      }},

	  "/WorkPattern  -  GetWorkPatternDetail":
	  {
	   "post": {
        "tags": [
          "WorkPattern"
        ],
        "summary": "Get work pattern detail",
        "description": "This API is used to get work pattern detail\n\n",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/WorkPatternParameter"
            }
          }
        ],
        "responses": {
          "200": {

			 "$ref": "#/responses/SuccessMessageForWorkPattern"
          }

        }
      }},

	  "/Employeee Late  -  GetLateByEmployeeId":
	  {
		   "post": {
			"tags": [
			  "Employeee Late"
			],
			"summary": "Get late by employeeId",
			"description": "This API is used for get late by employeeId\n\n",
			"parameters": [
			  {
				"name": "body",
				"in": "body",
				"required": true,
				"schema": {
				  "$ref": "#/definitions/GetLateByEmployeeIdParameter"
				}
			  }
			],
			"responses": {
			  "200": {

				 "$ref": "#/responses/SuccessMessageForGetLateByEmployeeId"
			  }

			}
		  }},

	  "/Employeee Late  -  AddNewLate":
	  {
		   "post": {
			"tags": [
			  "Employeee Late"
			],
			"summary": "Add new late",
			"description": "This API is used for add new late\n\n",
			"parameters": [
			  {
				"name": "body",
				"in": "body",
				"required": true,
				"schema": {
				  "$ref": "#/definitions/AddNewLateParameters"
				}
			  }
			],
			"responses": {
			  "200": {

				 "$ref": "#/responses/SuccessMessageForAddNewLate"
			  }

			}
		  }},

	  "/Employeee Late  -  UpdateLate":
	  {
		   "post": {
			"tags": [
			  "Employeee Late"
			],
			"summary": "Update Late",
			"description": "This API is used for update late\n\n",
			"parameters": [
			  {
				"name": "body",
				"in": "body",
				"required": true,
				"schema": {
				  "$ref": "#/definitions/UpdateLateParameters"
				}
			  }
			],
			"responses": {
			  "200": {

				 "$ref": "#/responses/SuccessMessageForUpdateLate"
			  }

			}
		  }},

	  "/Employeee Late  -  DeleteLate":
	  {
		   "post": {
			"tags": [
			  "Employeee Late"
			],
			"summary": "Delete Late",
			"description": "This API is used to delete late\n\n",
			"parameters": [
			  {
				"name": "body",
				"in": "body",
				"required": true,
				"schema": {
				  "$ref": "#/definitions/EmployeedeletelateParameter"
				}
			  }
			],
			"responses": {
			  "200": {

				 "$ref": "#/responses/SuccessMessageFordeletelate"
			  }

			}
		  }},

	 "/Maternity Paternity  -  GetByMaternityPaternityId":
	  {
	   "post": {
        "tags": [
          "Maternity Paternity "
        ],
        "summary": " Get by maternity paternity id ",
        "description": "This API is used to get by maternity paternity id details\n",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetByMaternityPaternityParameter"
            }
          }
        ],
		"responses": {
          "200": {
			 "$ref": "#/responses/SuccessMessageForGetByMaternityPaternityId"
          }
        }
      }
    },
	"/Maternity Paternity  -  GetMaternityPaternityByEmployeeId":
	  {
	   "post": {
        "tags": [
          "Maternity Paternity "
        ],
        "summary": " Get maternity paternity by employeeid ",
        "description": "This API is used to get maternity paternity by employeeid details\n",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetMaternityPaternityByEmployeeIdParameter"
            }
          }
        ],
		"responses": {
          "200": {
			 "$ref": "#/responses/SuccessMessageForGetMaternityPaternityByEmployeeId"
          }
        }
      }
    },

	  "/Maternity Paternity  -  AddNewMaternityPaternity":
	  {
	   "post": {
        "tags": [
          "Maternity Paternity "
        ],
        "summary": " Add New Maternity Paternity ",
        "description": "This API is used to add new maternity paternity details\n",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AddNewMaternityPaternityParameter"
            }
          }
        ],
		"responses": {
          "200": {
			 "$ref": "#/responses/SuccessMessageForAddNewMaternityPaternityApi"
          }
        }
      }
    },
	 "/Maternity Paternity  -  UpdateMaternityPaternity":
	  {
	   "post": {
        "tags": [
          "Maternity Paternity "
        ],
        "summary": "Update Maternity Paternity ",
        "description": "This API is used to Update Maternity Paternity Details\n",
            "parameters": [
           {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateMaternityPaternityParameter"
            }
          }
        ],
		"responses": {
          "200": {
			 "$ref": "#/responses/SuccessMessageForUpdateMatenityPaternityApi"
          }
        }
      }
    },
	 "/Maternity Paternity  -  DeleteMaternityPaternity":
	  {
	   "post": {
        "tags": [
          "Maternity Paternity "
        ],
        "summary": "Delete Maternity Paternity ",
        "description": "This API is used to Delete Maternity Paternity Details\n",
            "parameters": [
           {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DeleteMaternityPaternityParameter"
            }
          }
        ],
		"responses": {
          "200": {
			 "$ref": "#/responses/SuccessMessageForDeleteMaternityPaternityApi"
          }
        }
      }
    }

   },



  "definitions": {

    "Error": {
      "type": "object",
      "properties": {
        "status": {
          "type": "integer",
          "minimum": 0,
          "maximum": 14,
		  "description":"integer 1"
        },
        "error": {
          "type": "string"
        }
      }
    },

	 "ErrorForUpdateEmployeeId": {
      "type": "object",
      "properties": {
	    "IsError": {
          "type": "boolean",
		  "description":"isError = false means success and isError = true means error ",
		   "enum":[
		     "false",
			 "true"
		   ]
        },
        "Status": {
          "type": "integer",
          "minimum": 0,
          "maximum": 10,
		  "description":""
        },
		"Message": {
          "type": "string",
		  "description":"Message show as per error code"
        },
		"Result": {
          "type": "object",
		  "description":"Can be ignored"
        }
      }
    },

	 "CheckAuthenticationResult": {
      "type": "object",
      "required": [
        "EmployeeId"
      ],
      "properties": {
		 "IsError": {
          "type": "boolean",
		  "description":"isError = false means success and isError = true means error ",
		   "enum":[
		     "false",
			 "true"
		   ]
         },
	    "Status": {
          "type": "integer",
          "minimum": 0,
          "maximum": 7,
		  "description":""
        },
		"Message": {
          "type": "string",
		  "description":"Message show as per error code"
        },
		"Result": {
          "description": "Result value",

		  "allOf": [
            {
               "$ref": "#/definitions/ResultEmployeeIdId"
            }
          ]

        }}
    },

	"ErrorForMarkAsLeaverById": {
      "type": "object",
      "properties": {
	   "IsError": {
          "type": "boolean",
		  "description":"isError = false means success and isError = true means error ",
		   "enum":[
		     "false",
			 "true"
		   ]
        },
        "Status": {
          "type": "integer",
          "minimum": 0,
          "maximum": 10,
		  "description":""
        },
		"Message": {
          "type": "string",
		  "description":"Message show as per error code"
        },
		"Result": {
          "type": "object",
		  "description":"Can be ignored"
        }
      }
    },

	"ErrorForAddEmployeeImageById": {
      "type": "object",
      "properties": {
	   "IsError": {
          "type": "boolean",
		  "description":"isError = false means success and isError = true means error ",
		   "enum":[
		     "false",
			 "true"
		   ]
        },
        "Status": {
          "type": "integer",
          "minimum": 0,
          "maximum": 10,
		  "description":""
        },
		"Message": {
          "type": "string",
		  "description":"Message show as per error code"
        },
		"Result": {
          "type": "object",
		  "description":"Can be ignored"
        }
      }
    },

	"ErrorForGetAllEmployeeDetail": {
      "type": "object",
      "properties": {
	  "IsError": {
          "type": "boolean",
		  "description":"isError = false means success and isError = true means error ",
		   "enum":[
		     "false",
			 "true"
		   ]
         },
		 "Status": {
          "type": "integer",
          "minimum": 0,
          "maximum": 10,
		  "description":""
        },
		"Message": {
          "type": "string",
		  "description":"Message show as per error code"
        },
	    "Result": {
          "description": "Result value",

		  "allOf": [
            {
              "$ref": "#/definitions/Result1GetList5Array"
            }
          ]

        }}
    },

	"ErrorForGetEmployeeDetailById": {
      "type": "object",
      "properties": {
	  "IsError": {
          "type": "boolean",
		  "description":"isError = false means success and isError = true means error ",
		   "enum":[
		     "false",
			 "true"
		   ]
         },
		 "Status": {
          "type": "integer",
          "minimum": 0,
          "maximum": 10,
		  "description":""
        },
		"Message": {
          "type": "string",
		  "description":"Message show as per error code"
        },
	    "Result": {
          "description": "Result value",

		  "allOf": [
            {
              "$ref": "#/definitions/ResultGetEmployeeDetail"
            }
          ]

        }}
    },

	"ErrorForCreateNewEmployeeDetail": {
      "type": "object",
      "properties": {
	  "IsError": {
          "type": "boolean",
		  "description":"isError = false means success and isError = true means error ",
		   "enum":[
		     "false",
			 "true"
		   ]
        },
        "Status": {
          "type": "integer",
          "minimum": 0,
          "maximum": 10,
		  "description":""
        },
		"Message": {
          "type": "string",
		  "description":"Message show as per error code"
        },
		"Result": {
          "type": "object",
		  "description":"Can be ignored"
        }
      }
    },

	 "ErrorForUpdateEmployeeDetail": {
      "type": "object",
      "properties": {
	    "IsError": {
          "type": "boolean",
		  "description":"isError = false means success and isError = true means error ",
		   "enum":[
		     "false",
			 "true"
		   ]
        },
        "Status": {
          "type": "integer",
          "minimum": 0,
          "maximum": 10,
		  "description":""
        },
		"Message": {
          "type": "string",
		  "description":"Message show as per error code"
        },
		"Result": {
          "type": "object",
		  "description":"Can be ignored"
        }
      }
    },

	 "ErrorForAddNewHoliday": {
      "type": "object",
      "properties": {
	    "IsError": {
          "type": "boolean",
		  "description":"isError = false means success and isError = true means error ",
		   "enum":[
		     "false",
			 "true"
		   ]
        },
        "Status": {
          "type": "integer",
          "minimum": 0,
          "maximum": 9,
		  "description":""
        },
		"Message": {
          "type": "string",
		  "description":"Message show as per error code"
        },
		"Result": {
          "type": "object",
		  "description":"Can be ignored"
        }
      }
    },

	 "ErrorForUpdateHoliday": {
      "type": "object",
      "properties": {
	    "IsError": {
          "type": "boolean",
		  "description":"isError = false means success and isError = true means error ",
		   "enum":[
		     "false",
			 "true"
		   ]
        },
        "Status": {
          "type": "integer",
          "minimum": 0,
          "maximum": 10,
		  "description":""
        },
		"Message": {
          "type": "string",
		  "description":"Message show as per error code"
        },
		"Result": {
          "type": "object",
		  "description":"Can be ignored"
        }
      }
    },

	"ErrorForGetHolidayDetail": {
      "type": "object",
      "properties": {
	  "IsError": {
          "type": "boolean",
		  "description":"isError = false means success and isError = true means error ",
		   "enum":[
		     "false",
			 "true"
		   ]
         },
		 "Status": {
          "type": "integer",
          "minimum": 0,
          "maximum": 10,
		  "description":""
        },
		"Message": {
          "type": "string",
		  "description":"Message show as per error code"
        },
	    "Result": {
          "description": "Result value",

		  "allOf": [
            {
              "$ref": "#/definitions/Result1GetHolidayDetailArray"
            }
          ]

        }}
    },

	 "ErrorForDeleteHolidy": {
      "type": "object",
      "properties": {
	  "IsError": {
          "type": "boolean",
		  "description":"isError = false means success and isError = true means error ",
		   "enum":[
		     "false",
			 "true"
		   ]
        },
        "Status": {
          "type": "integer",
          "minimum": 0,
          "maximum": 10,
		  "description":""
        },
		"Message": {
          "type": "string",
		  "description":"Message show as per error code"
        },
		"Result": {

          "type": "object",
		  "description":"Can be ignored"

        }
      }
    },

     "ErrorForGetAbsenceDetail": {
	   "type":"object",
       "properties": {
        "IsError": {
          "type": "boolean",
          "enum":[
		       "false",
		       "true"
		  ],
		  "description":"isError false means Success And isError true means Error"
        },
        "Status": {
          "type": "integer",
          "minimum": 0,
          "maximum": 10,
		  "description": ""
        },
		"Message": {
          "type": "string",
		  "description":"Message As Per the Error code"
        },
		"Result": {
          "description": "Result value",
		  "allOf": [
            {
              "$ref": "#/definitions/ResultEmployeeAbsenceArray"
            }
          ]
        }}
    },
	"ErrorForAddEmployeeAbsence":{
	    "type":"object",
        "properties": {
	    "IsError": {
          "type": "boolean",
          "enum":[
		       "false",
		       "true"
		  ],
		  "description":"isError false means Success And isError true means Error"
        },
        "Status": {
          "type": "integer",
          "minimum": 0,
          "maximum": 10,
		  "description":""
        },
		"Message": {
          "type": "string",
		  "description":"Message As Per the Error code"
        },
	   "Result": {
		  "type": "object",
          "description": "Can be ignored"}}
    },
	"ErrorForEmployeeAbsenceDelete": {
	"type":"object",
      "properties": {
	  "IsError": {
          "type": "boolean",
          "enum":[
		       "false",
		       "true"
		  ],
		  "description":"isError false means Success And isError true means Error"
        },
      "Status": {
          "type": "integer",
          "minimum": 0,
          "maximum": 10,
		  "description":""
        },
		"Message": {
          "type": "string",
		  "description":"Message As Per the Error code"
        },
		"Result": {
	      "type": "object",
          "description": "Can be ignored"}}
    },

    "ErrorForUpdateAbsenceDetails":{
	 "type":"object",
	 "properties": {

	    "IsError": {
          "type": "boolean",
          "enum":[
		       "false",
		       "true"
		  ],
		  "description":"isError false means Success And isError true means Error"
        },

        "status": {
          "type": "integer",
          "minimum": 0,
          "maximum": 9,
		  "description":""

        },

		"Message": {
         "type": "string",
		  "description":"Message As Per the Error code"
        },

		 "Result": {
		 "type": "object",
          "description": "Can be ignored"}
      }
	 },

	  "ErrorForGetSalaryDetail": {
      "type": "object",
      "properties": {
		"IsError": {
          "type": "boolean",
          "enum":[
		       "false",
		       "true"
		  ],
		  "description":"isError false means Success And isError true means Error"
        },
        "Status": {
          "type": "integer",
          "minimum": 0,
          "maximum": 10,
		  "description":""
        },
		"Message": {
          "type": "string",
		  "description":"Message As Per the Error code"
        },
		"Result": {
          "description": "Result value",

		  "allOf": [
            {
              "$ref": "#/definitions/Result1"
            }
          ]

        }}
    },

	"ErrorForCreateNewSalary1": {
       "type": "object",
      "properties": {

	    "IsError": {
          "type": "boolean",
          "enum":[
		       "false",
		       "true"
		  ],
		  "description":"isError false means Success And isError true means Error"
        },
	   "Status": {
          "type": "integer",
          "minimum": 0,
          "maximum": 10,
		  "description":""


        },
		 "Message": {
          "type": "string",
		  "description":"Message As Per the Error code"
        },
		 "Result": {
          "type": "object",
		  "description":"Can be ignored"
        }

      }
    },

    "ErrorForDeleteSalary": {
        "type": "object",
	    "properties": {
		   "IsError": {
			  "type": "boolean",
			  "enum":[
				   "false",
				   "true"
			  ],
			  "description":"isError false means Success And isError true means Error"
			},
		  "Status": {
				  "type": "integer",
				  "minimum": 0,
				  "maximum": 10,
				  "description":""
			},
		 "Message": {
			  "type": "string",
			  "description":"Message As Per the Error code"
           },
		 "Result": {
			  "type": "object",
			  "description":"Can be ignored"
         }

      }
    },

	 "ErrorForUploadEmployeeDocument": {
	   "type":"object",
       "properties": {
        "IsError": {
             "type": "boolean",
             "enum":[
		       "false",
		       "true"
		     ],
	         "description":"isError false means Success And isError true means Error"
         },
       "Status": {
          "type": "integer",
          "minimum": 0,
          "maximum": 10,
		  "description":""
        },
	   "Message": {
          "type": "string",
		  "description":"Message As Per the Error code"
        },
	   "Result": {
		  "type": "object",
          "description": "Can be ignored"}}
    },

	"ErrorForGetAllDocument": {
	  "type":"object",
      "properties": {
       "IsError": {
          "type": "boolean",
          "enum":[
		       "false",
		       "true"
		  ],
	      "description":"isError false means Success And isError true means Error"
        },
       "Status": {
           "type": "integer",
           "minimum": 0,
           "maximum": 10,
		   "description": ""
        },
	   "Message": {
             "type": "string",
		     "description":"Message As Per the Error code"
          },
       "Result": {
           "description": "Result value",
		   "allOf": [
            {
              "$ref": "#/definitions/GetAllDocumentArray"
            }
          ]

        }}
    },

	"ErrorForGetDocumentById":{
	  "type":"object",
      "properties": {
       "IsError": {
             "type": "boolean",
            "enum":[
		        "false",
		        "true"
		     ],
           "description":"isError false means Success And isError true means Error"
        },
       "Status": {
          "type": "integer",
          "minimum": 0,
          "maximum": 10,
		  "description":""
        },
	   "Message": {
          "type": "string",
		  "description":"Message As Per the Error code"
        },
	   "Result": {
           "description": "Result value",
		   "allOf": [
            {
              "$ref": "#/definitions/GetDocumentByIdArray"
            }
          ]

        }}
    },

	 "ErrorForCreateNewEmployeeTimesheetDetail": {
      "type": "object",
      "properties": {
	  "IsError": {
          "type": "boolean",
		  "description":"isError = false means success and isError = true means error ",
		   "enum":[
		     "false",
			 "true"
		   ]
        },
        "Status": {
          "type": "integer",
          "minimum": 0,
          "maximum": 10,
		  "description":""
        },
		"Message": {
          "type": "string",
		  "description":"Message show as per error code"
        },
		"Result": {
          "type": "object",
		  "description":"Can be ignored"
        }
      }
    },


   "ErrorForUpdateEmployeeTimesheetDetail": {
      "type": "object",
      "properties": {
	  "IsError": {
          "type": "boolean",
		  "description":"isError = false means success and isError = true means error ",
		   "enum":[
		     "false",
			 "true"
		   ]
        },
        "Status": {
          "type": "integer",
          "minimum": 0,
          "maximum": 10,
		  "description":""
        },
		"Message": {
          "type": "string",
		  "description":"Message show as per error code"
        },
		"Result": {
          "type": "object",
		  "description":"Can be ignored"
        }
      }
    },

	"ErrorForDeleteEmployeeTimesheetDetail": {
        "type": "object",
	    "properties": {
		   "IsError": {
			  "type": "boolean",
			  "enum":[
				   "false",
				   "true"
			  ],
			  "description":"isError false means Success And isError true means Error"
			},
		  "Status": {
				  "type": "integer",
				  "minimum": 0,
				  "maximum": 10,
				  "description":""

			},
		 "Message": {
			  "type": "string",
			  "description":"Message As Per the Error code"
           },
		 "Result": {
			  "type": "object",
			  "description":"Can be ignored"
         }

      }
    },

	"ErrorForGetTimesheetDetail": {
        "type": "object",
	    "properties": {
		   "IsError": {
			  "type": "boolean",
			  "enum":[
				   "false",
				   "true"
			  ],
			  "description":"isError false means Success And isError true means Error"
			},
		  "Status": {
				  "type": "integer",
				  "minimum": 0,
				  "maximum": 10,
				  "description":""
			},
		 "Message": {
			  "type": "string",
			  "description":"Message As Per the Error code"
           },
		 "Result": {
          "description": "Result value",

		  "allOf": [
            {
              "$ref": "#/definitions/Result1GetTimesheetArray"
            }
          ]

        }

      }
    },

	 "ErrorForGetBenefitByEmployeeId": {
	  "type":"object",
      "properties": {
      "IsError": {
          "type": "boolean",
          "enum":[
		       "false",
		       "true"
		  ],
		  "description":"isError false means Success And isError true means Error"
        },
        "Status": {
          "type": "integer",
          "minimum": 0,
          "maximum": 10,
		  "description": ""
                   },
		"Message": {
          "type": "string",
		  "description":"Message As Per the Error code"
           },
	   "Result": {
          "description": "Result value",
		  "allOf": [
            {
              "$ref": "#/definitions/GetBenefitByEmployeeIdArray"
            }
          ]
        }}
    },
  "ErrorForGetByBenefitIdApi": {
	"type":"object",
      "properties": {
	  "IsError": {
          "type": "boolean",
          "enum":[
		       "false",
		       "true"
		  ],
		  "description":"isError false means Success And isError true means Error"
        },
        "Status": {
          "type": "integer",
          "minimum": 0,
          "maximum": 10,
		  "description":" Error Code = 0 means 'The requested processed successfully.'<br />Error Code = 5 means 'API key does not exists.' <br />Error Code = 2 means 'Invalid API Key'<br />Error Code = 4 means 'Action cannot be empty'<br />Error Code = 4 means 'Invalid Action'<br/><br />Error Code = 5 means 'EmployeeId cannot be empty.' <br />Error Code = 5 means 'EmployeeId contains more than 15 characters.' <br />Error Code = 5 means 'EmployeeId contains invalid data.' <br />Error Code = 5 means 'EmployeeId does not exists.' <br />Error Code = 5 means 'EmployeeId is missing.' <br/><br /> Error Code = 5 means 'BenefitId is invalid.'<br />Error Code = 5 means 'BenefitId cannot be empty.'<br />Error Code = 5 means 'Benefit Id is missing.'<br />Error Code = 5 means 'No json data found.'<br />Error Code = 7 means 'No json data found.'<br />Error Code = 8 means 'Either empty or no Form Data.'<br />Error Code = 9 means 'Invalid json data.'<br />Error Code = 10 means 'No detail has been found.'<br/>"
        },
		"Message": {
          "type": "string",
		  "description":"Message As Per the Error code"
        },
		 "Result": {
          "description": "Result value",
		  "allOf": [
            {
              "$ref": "#/definitions/ResultGetByBenefitIdObject"
            }
          ]
        }}
    },
	"ErrorForGetCustomScreenByEmployeeId": {
      "type": "object",
      "properties": {
	    "IsError": {
          "type": "boolean",
		  "description":"isError = false means success and isError = true means error ",
		   "enum":[
		     "false",
			 "true"
		   ]
        },
        "Status": {
          "type": "integer",
          "minimum": 0,
          "maximum": 10,
		  "description":"Error Code = 0 means 'The requested processed successfully.'<br />Error Code = 1 means 'API key is missing.'<br />Error Code = 2 means 'Invalid API Key.'<br />Error Code = 3 means 'Action is missing.'<br />Error Code = 4 means 'Action cannot be empty.'<br />Error Code = 4 means 'Invalid Action.'<br />Error Code = 5 means 'EmployeeId does not exists.'<br />Error Code = 5 means 'EmployeeId contains invalid data.'<br />Error Code = 5 means 'EmployeeId contains more than 15 characters.'<br />Error Code = 5 means 'EmployeeId cannot be empty.'<br />Error Code = 5 means 'EmployeeId is missing.'<br />Error Code = 5 means 'ScreenId does not exists..'<br />Error Code = 5 means 'ScreenId is invalid'<br />Error Code = 5 means 'ScreenId cannot be empty'<br />Error Code = 5 means 'ScreenId is missing.'<br />Error Code = 6 means 'Oops! Something went wrong.'<br />Error Code = 7 means 'No json data found.'<br />Error Code = 8 means 'Either empty or no Form Data.'<br />Error Code = 9 means 'Invalid json data.'<br />Error Code = 10 means 'No detail has been found."


        },
		"Message": {
          "type": "string",
		  "description":"Message show as per error code"
        },
		"Result": {
      "description": "Result value",

		  "allOf": [
            {
              "$ref": "#/definitions/Result1GetByCustomScreenByEmployeeId"
            }
			]
        }}
    },
	"ErrorForAddNewBenefitApi":{
      "type":"object",
      "properties": {
	    "IsError": {
          "type": "boolean",
          "enum":[
		       "false",
		       "true"
		  ],
		  "description":"isError false means Success And isError true means Error"
        },

        "Status": {
          "type": "integer",
          "minimum": 0,
          "maximum": 9,
		  "description":"Error Code = 0 means 'Benefit record added successfully.'<br/><br />Error Code = 2 means 'Invalid API Key.'<br />Error Code = 4 means  'Invalid Action'<br />Error Code = 4 means  'Action cannot be empty'<br/><br />Error Code = 5 means 'API key does not exists' .<br/><br />Error Code = 5 means 'EmployeeId cannot be empty.' <br />Error Code = 5 means 'EmployeeId contains more than 15 characters.' <br />Error Code = 5 means 'EmployeeId contains invalid data.' <br />Error Code = 5 means 'EmployeeId does not exists.' <br />Error Code = 5 means 'EmployeeId is missing.' <br/><br />Error Code = 5 means 'Benefit Type is missing.' <br />Error Code = 5 means 'Benefit Type cannot be empty.' <br />Error Code = 5 means 'Benefit Type contains more than 100 characters.' <br />Error Code = 5 means 'Benefit Type contains invalid data.' <br/><br />Error Code = 5 means 'Date Awarded is missing.' <br />Error Code = 5 means 'Date Awarded field cannot be Empty.' <br />Error Code = 5 means 'Date Awarded field contains invalid data.'<br/><br />Error Code = 5 means 'DateAwarded should be before or equal to ExpiryDate.' <br />Error Code = 5 means 'Expiry Date is missing.' <br/><br />Error Code = 5 means 'Value contains more than 999,999,999,999.99.' <br />Error Code = 5 means 'Value contains invalid data.' <br/><br />Error Code = 5 means 'Comments contains invalid data.' <br />Error Code = 5 means 'Comments contains more than 256 characters.' <br/><br />Error Code = 5 means 'Recover On Termination Can only Contain Yes Or No.' <br />Error Code = 5 means 'Recover On Termination cannot be empty.' <br />Error Code = 5 means 'Recover On Termination is missing.' <br/><br />Error Code = 5 means 'This custom column name not exists' <br />Error Code = 5 means 'Custom column name should not be empty.' <br />Error Code = 5 means 'ColumnName is missing.' <br />Error Code = 5 means 'ColumnValue is missing.' <br/><br />Error Code = 5 means 'Custom column name already addded.' <br />Error Code = 5 means 'Custom column name does not exists on screen.' <br />Error Code = 5 means 'Custom column name should not be empty.' <br/><br />Error Code = 5 means 'Custom column name contains more than 100 characters.'<br/><br />Error Code = 5 means 'One or more mandatory fields are missing.' <br/><br />Error Code = 5 means 'Document Name contains more than 100 characters.' <br />Error Code = 5 means 'Document Name is missing.' <br />Error Code = 5 means 'File contains invalid data.' <br />Error Code = 5 means 'File is missing.' <br/><br />Error Code = 5 means 'Description contains invalid data.' <br />Error Code = 5 means 'Description contains more than 256 characters.' <br/><br />Error Code = 5 means 'DocumentCategory contains invalid data.' <br />Error Code = 5 means 'DocumentCategory contains more than 100 characters.' <br />Error Code = 5 means 'DocumentCategory cannot be empty.' <br />Error Code = 5 means 'Document Category is missing.' <br/><br />Error Code = 5 means 'SignatureRequired Can only Contain True Or False.' <br />Error Code = 5 means 'SignatureRequired cannot be empty.' <br />Error Code = 5 means 'Signature Required is missing.' <br/><br />Error Code = 6 means 'Oops! Something went wrong.' <br />Error Code = 5 means 'No json data found.'<br />Error Code = 6 means 'Unknown error occured.' <br />Error Code = 7 means 'No json data found.'<br />Error Code = 8 means 'Either empty or no Form Data.'<br />Error Code = 9 means 'Invalid json data.'<br/>"

        },

		"Message": {
          "type": "string",
		  "description":"Message As Per the Error code"
        },
		 "Result": {
		 "type": "object",
          "description": "Can be ignored"}}
    },
	 "ErrorForUpdateBenefitApi":{
	    "type":"object",
	    "properties": {
	    "IsError": {
          "type": "boolean",
          "enum":[
		       "false",
		       "true"
		  ],
		  "description":"isError false means Success And isError true means Error"
        },

        "status": {
          "type": "integer",
          "minimum": 0,
          "maximum": 9,
		  "description":"Error Code = 0 means 'Benefit record updated successfully..'<br/><br />Error Code = 2 means 'Invalid API Key.'<br />Error Code = 4 means  'Invalid Action'<br />Error Code = 4 means  'Action cannot be empty'<br/><br />Error Code = 5 means 'API key does not exists' .<br/><br />Error Code = 5 means 'EmployeeId cannot be empty.' <br />Error Code = 5 means 'EmployeeId contains more than 15 characters.' <br />Error Code = 5 means 'EmployeeId contains invalid data.' <br />Error Code = 5 means 'EmployeeId does not exists.' <br />Error Code = 5 means 'EmployeeId is missing.' <br/><br />Error Code = 5 means 'valid Benefit Id Cannot be Empty.' <br />Error Code = 5 means 'Benefit Id is invalid.' <br />Error Code = 5 means 'Pending authorization request exists in system for passed Benefit id' <br />Error Code = 5 means 'No record found.' <br />Error Code = 5 means 'benefit Id is missing.' <br/><br />Error Code = 5 means 'Benefit Type is missing.' <br />Error Code = 5 means 'Benefit Type cannot be empty.' <br />Error Code = 5 means 'Benefit Type contains more than 100 characters.' <br />Error Code = 5 means 'Benefit Type contains invalid data.' <br/><br />Error Code = 5 means 'Expiry Date is missing.' <br />Error Code = 5 means 'Expiry Date field contains invalid data.' <br/><br />Error Code = 5 means 'Comments contains invalid data.' <br />Error Code = 5 means 'Comments contains more than 256 characters.' <br/><br />Error Code = 5 means 'Date Awarded is missing.' <br />Error Code = 5 means 'Date Awarded field cannot be Empty.' <br />Error Code = 5 means 'Date Awarded field contains invalid data.'<br />Error Code = 5 means 'DateAwarded should be before or equal to ExpiryDate.' <br/><br />Error Code = 5 means 'Value contains more than 999,999,999,999.99.' <br />Error Code = 5 means 'Value contains invalid data.' <br/><br />Error Code = 5 means 'Recover On Termination Can only Contain Yes Or No.' <br />Error Code = 5 means 'Recover On Termination cannot be empty.' <br/><br />Error Code = 5 means 'Custom column name already addded.' <br />Error Code = 5 means 'Custom column name does not exists on screen.' <br />Error Code = 5 means 'Custom column name should not be empty.' <br />Error Code = 5 means 'ColumnName is missing.' <br/><br />Error Code = 5 means 'ColumnValue is missing.' <br/><br /> Error Code = 5 means 'Custom column name contains more than 100 characters.'<br/><br />Error Code = 5 means 'Document Name contains more than 100 characters.' <br />Error Code = 5 means 'Document Name is missing.' <br />Error Code = 5 means 'File contains invalid data.' <br />Error Code = 5 means 'File is missing.' <br/><br />Error Code = 5 means 'Description contains invalid data.' <br />Error Code = 5 means 'Description contains more than 256 characters.' <br/><br />Error Code = 5 means 'DocumentCategory contains invalid data.' <br />Error Code = 5 means 'DocumentCategory contains more than 100 characters.' <br />Error Code = 5 means 'DocumentCategory cannot be empty.' <br />Error Code = 5 means 'Document Category is missing.' <br/><br />Error Code = 5 means 'SignatureRequired Can only Contain True Or False.' <br />Error Code = 5 means 'SignatureRequired cannot be empty.' <br />Error Code = 5 means 'Signature Required is missing.' <br/><br />Error Code = 5 means 'One or more mandatory fields are missing.' <br />Error Code = 6 means 'Oops! Something went wrong.' <br />Error Code = 6 means 'No record found.'<br/><br />Error Code = 5 means 'No json data found.'<br />Error Code = 6 means 'Invalid json data.' <br />Error Code = 7 means 'No json data found.'<br />Error Code = 8 means 'Either empty or no Form Data.'<br />Error Code = 9 means 'Invalid json data.'<br/>"
        },

		"Message": {
          "type": "string",
		  "description":"Message As Per the Error code"
        },

		 "Result": {
		  "type": "object",
          "description": "Can be ignored"}
      }
	 },

	  "ErrorForDeleteBenefit":{
	    "type":"object",
	    "properties": {
	    "IsError": {
          "type": "boolean",
          "enum":[
		       "false",
		       "true"
		  ],
		  "description":"isError false means Success And isError true means Error"
        },

        "status": {
          "type": "integer",
          "minimum": 0,
          "maximum": 9,
		  "description":"Error Code = 0 means 'Benefit record deleted successfully.'<br/><br />Error Code = 2 means 'Invalid API Key.'<br />Error Code = 4 means  'Invalid Action'<br />Error Code = 4 means  'Action cannot be empty'<br/><br />Error Code = 5 means 'API key does not exists' .<br/><br /> Error Code = 5 means 'EmployeeId cannot be empty.' <br />Error Code = 5 means 'EmployeeId contains more than 15 characters.' <br />Error Code = 5 means 'EmployeeId contains invalid data.' <br />Error Code = 5 means 'EmployeeId does not exists.' <br />Error Code = 5 means 'EmployeeId is missing.' <br/><br />Error Code = 5 means 'Pending authorization request exists in system for passed Benefit id.' <br />Error Code = 5 means 'Benefit Id is invalid.' <br />Error Code = 5 means 'valid Benefit Id Cannot be Empty.' <br/><br />Error Code = 6 means 'Oops! Something went wrong.' <br />Error Code = 5 means 'No record found.'<br />Error Code = 6 means 'No record found.'<br />Error Code = 6 means 'invalid action.'<br />Error Code = 7 means 'No json data found.'<br />Error Code = 8 means 'Either empty or no Form Data.'<br />Error Code = 9 means 'Invalid json data.'<br /> "

        },
		"Message": {
          "type": "string",
		  "description":"Message As Per the Error code"
        },
		 "Result": {
		  "type": "object",
          "description": "Can be ignored"}
      }
	 },
	"ErrorForGetCustomScreenDetail": {
      "type": "object",
      "properties": {
	    "IsError": {
          "type": "boolean",
		  "description":"isError = false means success and isError = true means error ",
		   "enum":[
		     "false",
			 "true"
		   ]
        },
        "Status": {
          "type": "integer",
          "minimum": 0,
          "maximum": 10,
		  "description":"Error Code = 0 means 'The requested processed successfully.'<br />Error Code = 1 means 'API key is missing.' <br />Error Code = 2 means 'Invalid API Key.'<br />Error Code = 3 means 'Action is missing.' <br />Error Code = 4 means 'Action cannot be empty.' <br />Error Code = 4 means 'Invalid Action.'<br />Error Code = 6 means 'Oops! Something went wrong.'<br />Error Code = 7 means 'No json data found.'<br />Error Code = 8 means 'Either empty or no Form Data.'<br />Error Code = 9 means 'Invalid json data.'<br />Error Code = 10 means 'No detail has been found.'"


        },
		"Message": {
          "type": "string",
		  "description":"Message show as per error code"
        },

		"Result": {
      "description": "Result value",

		  "allOf": [
            {
              "$ref": "#/definitions/Result1GetCustomScreenDetail"
            }
			]
        }}
    },
	"ErrorForAddNewCustomScreenTransaction": {
      "type": "object",
      "properties": {
	    "IsError": {
          "type": "boolean",
		  "description":"isError = false means success and isError = true means error ",
		   "enum":[
		     "false",
			 "true"
		   ]
        },
        "Status": {
          "type": "integer",
          "minimum": 0,
          "maximum": 9,
		  "description":"Error Code = 0 means 'CustomScreen record added successfully.'<br />Error Code = 1 means 'API key is missing.' <br />Error Code = 2 means 'Invalid API Key.'<br />Error Code = 3 means 'Action is missing.' <br />Error Code = 4 means 'Action cannot be empty.' <br />Error Code = 4 means 'Invalid Action.'<br />Error Code = 5 means 'EmployeeId does not exists.'<br />Error Code = 5 means 'EmployeeId contains invalid data.'<br />Error Code = 5 means 'EmployeeId contains more than 15 characters.'<br />Error Code = 5 means 'EmployeeId cannot be empty.'<br />Error Code = 5 means 'EmployeeId is missing.'<br />Error Code = 5 means 'ScreenId is missing.'<br />Error Code = 5 means 'ScreenId does not exists..'<br />Error Code = 5 means 'ScreenId is invalid'<br />Error Code = 5 means 'ScreenId cannot be empty'<br />Error Code = 5 means 'Custom column with name not exists'<br />Error Code = 5 means 'Custom column name should not be empty'<br />Error Code = 5 means 'ColumnName is missing.'<br />Error Code = 5 means 'ColumnValue is missing.'<br />Error Code = 5 means 'ColumnName contains invalid data'<br />Error Code = 5 means 'ColumnName contains more than 100 characters.'<br />Error Code = 5 means 'ColumnName field contains invalid data'<br />Error Code = 5 means 'ColumnName is mandatory'<br />Error Code = 5 means 'Custom Column already addded'<br />Error Code = 5 means 'Custom Column does not exists on screen'<br/><br />Error Code = 5 means 'Custom column name contains more than 100 characters.'<br/><br />Error Code = 5 means 'One or more mandatory fields are missing'<br />Error Code = 5 means 'DocumentName cannot be empty.'<br />Error Code = 5 means 'Document Name contains more than 100 characters.'<br />Error Code = 5 means 'Document Name is missing.'<br />Error Code = 5 means 'File type is not supported'<br />Error Code = 5 means 'File contains invalid data.'<br />Error Code = 5 means 'File is missing.'<br />Error Code = 5 means 'Description contains invalid data.'<br />Error Code = 5 means 'Description contains more than 256 characters.'<br />Error Code = 5 means 'Description cannot be empty.'<br />Error Code = 5 means 'DocumentCategory contains invalid data.'<br />Error Code = 5 means 'DocumentCategory contains more than 100 characters.'<br />Error Code = 5 means 'DocumentCategory cannot be empty.'<br />Error Code = 5 means 'Document Category is missing.'<br />Error Code = 5 means 'SignatureRequired Can only Contain True Or False.'<br />Error Code = 5 means 'SignatureRequired cannot be empty.'<br />Error Code = 5 means 'Signature Required is missing.'<br />Error Code = 6 means 'Oops! Something went wrong.' <br />Error Code = 6 means 'Unknown error occured.'<br />Error Code = 7 means 'No json data found.'<br />Error Code = 8 means 'Either empty or no Form Data.'<br />Error Code = 9 means 'Invalid json data.'"


        },
		"Message": {
          "type": "string",
		  "description":"Message show as per error code"
        },

		"Result": {
        "type": "object",
        "description":"Can be ignored"
        }}
    },
	"ErrorForUpdateNextYearHolidayEntitlement": {
      "type": "object",
      "properties": {
	    "IsError": {
          "type": "boolean",
		  "description":"isError = false means success and isError = true means error ",
		   "enum":[
		     "false",
			 "true"
		   ]
        },
        "Status": {
          "type": "integer",
          "minimum": 0,
          "maximum": 9,
		  "description":"Error Code = 0 means 'Entitlement Next Year updated successfully.'<br />Error Code = 1 means 'API key is missing.' <br />Error Code = 2 means 'Invalid API Key.'<br />Error Code = 2 means 'API key is missing.' <br />Error Code = 3 means 'Action is missing.' <br />Error Code = 4 means 'Action cannot be empty.' <br />Error Code = 4 means 'Invalid Action.' <br />Error Code = 5 means 'EmployeeId contains invalid data.' <br />Error Code = 5 means 'EmployeeId does not exists.' <br />Error Code = 5 means 'EmployeeId cannot be empty.'<br />Error Code = 5 means 'EmployeeId is missing.'<br />Error Code = 5 means 'EmployeeId contains more than 15 characters.'<br />Error Code = 5 means 'EntitlementNextYear contains invalid data.'<br />Error Code = 5 means 'EntitlementNextYear should be between company normal working hours.'<br />Error Code = 5 means 'ReasonForChange contains more than 256 characters.'<br />Error Code = 5 means 'ReasonForChange cannot be empty.'<br />Error Code = 5 means 'ReasonForChange is missing.'<br />Error Code = 5 means 'ReasonForChange contains invalid data'<br />Error Code = 5 means 'No access on holiday entitlement schema.'<br />Error Code = 7 means 'No Json Data Found'<br />Error Code = 8 means 'Either empty or no Form Data.'<br />Error Code = 9 means 'Invalid json data.'<br/>"

        },
		"Message": {
          "type": "string",
		  "description":"Message show as per error code"
        },

		"Result": {
          "type": "object",
        "description":"Can be ignored"
        }
      }
    },
	"ErrorForGetQueryResult": {
      "type": "object",
      "properties": {
	    "IsError": {
          "type": "boolean",
		  "description":"isError = false means success and isError = true means error ",
		   "enum":[
		     "false",
			 "true"
		   ]
        },
        "Status": {
          "type": "integer",
          "minimum": 0,
          "maximum": 10,
		  "description":"Error Code = 0 means 'The requested processed successfully.'<br />Error Code = 1 means 'API key is missing.' <br />Error Code = 2 means 'Invalid API Key.'<br />Error Code = 2 means 'API key is missing.' <br />Error Code = 3 means 'Action is missing.' <br />Error Code = 4 means 'Action cannot be empty.' <br />Error Code = 4 means 'Invalid Action.' <br />Error Code = 5 means 'API Key does not exists.' <br />Error Code = 5 means 'Invalid query name.' <br />Error Code = 5 means 'QueryName is missing.'<br />Error Code = 5 means 'No access to Query Builder schema.'<br />Error Code = 7 means 'No json data found.'<br />Error Code = 8 means 'Either empty or no Form Data.'<br />Error Code = 9 means 'Invalid json data.'<br />Error Code = 10 means 'No records found.'"



        },
		"Message": {
          "type": "string",
		  "description":"Message show as per error code"
        },

		"Result": {

		  "description": "Result value",

		  "allOf": [
            {
              "$ref": "#/definitions/Result1GetQueryResult"
            }
          ]
        }
      }
    },
	"ErrorForGetQueryResultByQueryName": {
      "type": "object",
      "properties": {
	    "IsError": {
          "type": "boolean",
		  "description":"isError = false means success and isError = true means error ",
		   "enum":[
		     "false",
			 "true"
		   ]
        },
        "Status": {
          "type": "integer",
          "minimum": 0,
          "maximum": 10,
		  "description":"Error Code = 0 means 'The requested processed successfully.'<br />Error Code = 1 means 'API key is missing.' <br />Error Code = 2 means 'Invalid API Key.'<br />Error Code = 2 means 'API key is missing.' <br />Error Code = 3 means 'Action is missing.' <br />Error Code = 4 means 'Action cannot be empty.' <br />Error Code = 4 means 'Invalid Action.' <br />Error Code = 5 means 'API Key does not exists.' <br />Error Code = 5 means 'Invalid query name.' <br />Error Code = 5 means 'QueryName is missing.'<br />Error Code = 5 means 'No access to Query Builder schema.'<br />Error Code = 7 means 'No json data found.'<br />Error Code = 8 means 'Either empty or no Form Data.'<br />Error Code = 9 means 'Invalid json data.'<br />Error Code = 10 means 'No records found.'"


        },
		"Message": {
          "type": "string",
		  "description":"Message show as per error code"
        },
		"Result": {

		  "description": "Result value",

		  "allOf": [
            {
              "$ref": "#/definitions/Result1GetQueryResultByQueryName"
            }
          ]
        }
      }
    },
	"ErrorForGetHistoryByEmployeeIdAndFieldName": {
      "type": "object",
      "properties": {
	    "IsError": {
          "type": "boolean",
		  "description":"isError = false means success and isError = true means error ",
		   "enum":[
		     "false",
			 "true"
		   ]
        },
        "Status": {
          "type": "integer",
          "minimum": 0,
          "maximum": 9,
		  "description":"Error Code = 0 means 'The requested processed successfully.'<br />Error Code = 1 means 'API key is missing.' <br />Error Code = 0 means 'Invalid FieldName.'<br />Error Code = 2 means 'Invalid API Key.'<br />Error Code = 2 means 'API key is missing.' <br />Error Code = 3 means 'Action is missing.' <br />Error Code = 4 means 'Action cannot be empty.' <br />Error Code = 4 means 'Invalid Action.' <br />Error Code = 5 means 'API Key does not exists.' <br />Error Code = 5 means 'EmployeeId contains invalid data.' <br />Error Code = 5 means 'EmployeeId does not exists.' <br />Error Code = 5 means 'EmployeeId cannot be empty.'<br />Error Code = 5 means 'EmployeeId is missing.'<br />Error Code = 5 means 'EmployeeId contains more than 15 characters.'<br />Error Code = 5 means 'FieldName cannot be empty.'<br />Error Code = 5 means 'FieldName is missing.'<br />Error Code = 5 means 'No access on history schema.'<br />Error Code = 7 means 'No Json Data Found'<br />Error Code = 8 means 'Either empty or no Form Data.'<br />Error Code = 9 means 'Invalid json data.'<br/>"



        },
		"Message": {
          "type": "string",
		  "description":"Message show as per error code"
        },

		"Result 1": {

		  "description": "Result value",

		  "allOf": [
            {
              "$ref": "#/definitions/Result1GetHistoryByEmployeeIdAndFieldName"


            }
          ]
        },
		"Result 2": {

		  "description": "Result value",

		  "allOf": [
            {
              "$ref": "#/definitions/Result2GetHistoryByEmployeeIdAndFieldName"


            }
          ]
        },
		"Result 3": {

		  "description": "Result value",

		  "allOf": [
            {
              "$ref": "#/definitions/Result3GetHistoryByEmployeeIdAndFieldName"


            }
          ]
        }


      }
    },
	"ErrorForUpdateCustomScreenTransaction": {
      "type": "object",
      "properties": {
	    "IsError": {
          "type": "boolean",
		  "description":"isError = false means success and isError = true means error ",
		   "enum":[
		     "false",
			 "true"
		   ]
        },
        "Status": {
          "type": "integer",
          "minimum": 0,
          "maximum": 9,
		  "description":"Error Code = 0 means 'CustomScreen record updated successfully.'<br />Error Code = 1 means 'API key is missing.' <br />Error Code = 2 means 'Invalid API Key.'<br />Error Code = 3 means 'Action is missing.' <br />Error Code = 4 means 'Action cannot be empty.' <br />Error Code = 4 means 'Invalid Action.'<br />Error Code = 5 means 'EmployeeId does not exists.'<br />Error Code = 5 means 'EmployeeId contains invalid data.'<br />Error Code = 5 means 'EmployeeId contains more than 15 characters.'<br />Error Code = 5 means 'EmployeeId cannot be empty.'<br />Error Code = 5 means 'EmployeeId is missing.'<br />Error Code = 5 means 'ScreenId is missing.'<br />Error Code = 5 means 'ScreenId does not exists..'<br />Error Code = 5 means 'ScreenId is invalid'<br />Error Code = 5 means 'ScreenId cannot be empty'<br />Error Code = 5 means 'Custom Screen Transactionid is missing.'<br />Error Code = 5 means 'Pending authorization request exists in system for passed Custom Screen Transaction id.'<br />Error Code = 5 means 'Custom Screen TransactionId is invalid'<br />Error Code = 5 means 'Custom Screen TransactionId Cannot be Empty'<br />Error Code = 5 means 'Custom column with name not exists'<br />Error Code = 5 means 'Custom column name should not be empty'<br />Error Code = 5 means 'ColumnName is missing.'<br />Error Code = 5 means 'ColumnValue is missing.'<br />Error Code = 5 means 'ColumnName contains invalid data'<br />Error Code = 5 means 'ColumnName contains more than 100 characters.'<br />Error Code = 5 means 'ColumnName field contains invalid data'<br />Error Code = 5 means 'ColumnName is mandatory'<br />Error Code = 5 means 'Custom Column already addded'<br />Error Code = 5 means 'Custom Column does not exists on screen'<br/><br />Error Code = 5 means 'Custom column name contains more than 100 characters.'<br/><br />Error Code = 5 means 'One or more mandatory fields are missing'<br />Error Code = 5 means 'DocumentName cannot be empty.'<br />Error Code = 5 means 'Document Name contains more than 100 characters.'<br />Error Code = 5 means 'Document Name is missing.'<br />Error Code = 5 means 'File type is not supported'<br />Error Code = 5 means 'File contains invalid data.'<br />Error Code = 5 means 'File is missing.'<br />Error Code = 5 means 'Description contains invalid data.'<br />Error Code = 5 means 'Description contains more than 256 characters.'<br />Error Code = 5 means 'Description cannot be empty.'<br />Error Code = 5 means 'DocumentCategory contains invalid data.'<br />Error Code = 5 means 'DocumentCategory contains more than 100 characters.'<br />Error Code = 5 means 'DocumentCategory cannot be empty.'<br />Error Code = 5 means 'Document Category is missing.'<br />Error Code = 5 means 'SignatureRequired Can only Contain True Or False.'<br />Error Code = 5 means 'SignatureRequired cannot be empty.'<br />Error Code = 5 means 'Signature Required is missing.'<br />Error Code = 6 means 'Oops! Something went wrong.' <br />Error Code = 6 means 'Unknown error occured.'<br />Error Code = 7 means 'No json data found.'<br />Error Code = 8 means 'Either empty or no Form Data.'<br />Error Code = 9 means 'Invalid json data.'<br/>"


        },
		"Message": {
          "type": "string",
		  "description":"Message show as per error code"
        },

		"Result": {
        "type": "object",
        "description":"Can be ignored"
        }}
    },
	"ErrorForDeleteCustomScreenTransaction": {
      "type": "object",
      "properties": {
	    "IsError": {
          "type": "boolean",
		  "description":"isError = false means success and isError = true means error ",
		   "enum":[
		     "false",
			 "true"
		   ]
        },
        "Status": {
          "type": "integer",
          "minimum": 0,
          "maximum": 9,
		  "description":"Error Code = 0 means 'CustomScreen record deleted successfully.'<br />Error Code = 1 means 'API key is missing.' <br />Error Code = 2 means 'Invalid API Key.'<br />Error Code = 3 means 'Action is missing.' <br />Error Code = 4 means 'Action cannot be empty.' <br />Error Code = 4 means 'Invalid Action.'<br />Error Code = 5 means 'EmployeeId does not exists.'<br />Error Code = 5 means 'EmployeeId contains invalid data.'<br />Error Code = 5 means 'EmployeeId contains more than 15 characters.'<br />Error Code = 5 means 'EmployeeId cannot be empty.'<br />Error Code = 5 means 'EmployeeId is missing.'<br />Error Code = 5 means 'ScreenId is missing.'<br />Error Code = 5 means 'ScreenId does not exists..'<br />Error Code = 5 means 'ScreenId is invalid'<br />Error Code = 5 means 'ScreenId cannot be empty'<br />Error Code = 5 means 'Custom Screen Transactionid is missing.'<br />Error Code = 5 means 'Pending authorization request exists in system for passed Custom Screen Transaction id.'<br />Error Code = 5 means 'Custom Screen TransactionId is invalid'<br />Error Code = 5 means 'Custom Screen TransactionId Cannot be Empty'<br />Error code = 6 means 'No record found.'<br />Error Code = 6 means 'Oops! Something went wrong.'<br />Error Code = 7 means 'No json data found.'<br />Error Code = 8 means 'Either empty or no Form Data.'<br />Error Code = 9 means 'Invalid json data.'<br/>"


        },
		"Message": {
          "type": "string",
		  "description":"Message show as per error code"
        },

		"Result": {
        "type": "object",
        "description":"Can be ignored"
        }}
    },
	"ErrorForGetHolidayEntitlement": {
      "type": "object",
      "properties": {
	    "IsError": {
          "type": "boolean",
		  "description":"isError = false means success and isError = true means error ",
		   "enum":[
		     "false",
			 "true"
		   ]
        },
        "Status": {
          "type": "integer",
          "minimum": 0,
          "maximum": 9,
		  "description":"Error Code = 0 means 'The requested processed successfully.'<br />Error Code = 1 means 'API key is missing.' <br />Error Code = 2 means 'Invalid API Key.'<br />Error Code = 3 means 'Action is missing.' <br />Error Code = 4 means 'Action cannot be empty.' <br />Error Code = 4 means 'Invalid Action.' <br />Error Code = 5 means 'StartDate contains invalid data.' <br />Error Code = 5 means 'StartDate should be before to EndDate.' <br />Error Code = 5 means 'EmployeeId contains invalid data.' <br />Error Code = 5 means 'EndDate contains invalid data.' <br />Error Code = 5 means 'EmployeeId does not exists.' <br />Error Code = 5 means 'EmployeeId cannot be empty.<br />Error Code = 5 means 'EmployeeId is missing.'<br />Error Code = 5 means 'EmployeeId contains more than 15 characters.'<br />Error Code = 5 means 'Either empty or no Form Data.'<br />Error Code = 5 means 'No access on holiday entitlement schema.'<br />Error Code = 7 means 'No Json Data Found'<br />Error Code = 8 means 'Either empty or no Form Data.'<br />Error Code = 9 means 'Invalid json data.'<br/>"

        },
		"Message": {
          "type": "string",
		  "description":"Message show as per error code"
        },

		"Result": {

		  "description": "Result value",

		  "allOf": [
            {
              "$ref": "#/definitions/Result1GetHoildayEntittlement"
            }
          ]
        }}
    },
	"ErrorForGetNextYearHolidayEntitlement": {
      "type": "object",
      "properties": {
	    "IsError": {
          "type": "boolean",
		  "description":"isError = false means success and isError = true means error ",
		   "enum":[
		     "false",
			 "true"
		   ]
        },
        "Status": {
          "type": "integer",
          "minimum": 0,
          "maximum": 9,
		  "description":"Error Code = 0 means 'The requested processed successfully.'<br/><br />Error Code = 1 means 'API key is missing.' <br />Error Code = 2 means 'Invalid API Key.'<br />Error Code = 3 means 'Action is missing.' <br />Error Code = 4 means 'Action cannot be empty.' <br />Error Code = 4 means 'Invalid Action.' <br />Error Code = 5 means 'EmployeeId contains invalid data.' <br />Error Code = 5 means 'EmployeeId does not exists.' <br />Error Code = 5 means 'EmployeeId is missing.'<br />Error Code = 5 means 'EmployeeId cannot be empty.<br />Error Code = 5 means 'EmployeeId contains more than 15 characters.'<br />Error Code = 5 means 'No access on holiday entitlement schema.'<br />Error Code = 7 means 'No Json Data Found'<br />Error Code = 8 means 'Either empty or no Form Data.'<br />Error Code = 9 means 'Invalid json data.'<br/>"

        },
		"Message": {
          "type": "string",
		  "description":"Message show as per error code"
        },

		"Result": {

		  "description": "Result value",

		  "allOf": [
            {
              "$ref": "#/definitions/Result1GetNextYearHolidayEntitlement"
            }
          ]
        }}
    },
	"ErrorForUpdateHolidayEntitlement": {
      "type": "object",
      "properties": {
	    "IsError": {
          "type": "boolean",
		  "description":"isError = false means success and isError = true means error ",
		   "enum":[
		     "false",
			 "true"
		   ]
        },
        "Status": {
          "type": "integer",
          "minimum": 0,
          "maximum": 9,
		  "description":"Error Code = 0 means 'Entitlement This Year updated successfully.'<br />Error Code = 1 means 'API key is missing.' <br />Error Code = 2 means 'Invalid API Key.'<br />Error Code = 2 means 'API key is missing.' <br />Error Code = 3 means 'Action is missing.' <br />Error Code = 4 means 'Action cannot be empty.' <br />Error Code = 4 means 'Invalid Action.' <br />Error Code = 5 means 'EmployeeId contains invalid data.' <br />Error Code = 5 means 'EmployeeId does not exists.' <br />Error Code = 5 means 'EmployeeId cannot be empty.'<br />Error Code = 5 means 'EmployeeId is missing.'<br />Error Code = 5 means 'EmployeeId contains more than 15 characters.'<br />Error Code = 5 means 'EntitlementThisYear contains invalid data.'<br />Error Code = 5 means 'EntitlementThisYear should be between company normal working hours.'<br />Error Code = 5 means 'ReasonForChange contains more than 256 characters.'<br />Error Code = 5 means 'ReasonForChange cannot be empty.'<br />Error Code = 5 means 'ReasonForChange contains invalid data'<br />Error Code = 5 means 'ReasonForChange is missing.'<br />Error Code = 5 means 'No access on holiday entitlement schema.'<br />Error Code = 7 means 'No Json Data Found'<br />Error Code = 8 means 'Either empty or no Form Data.'<br />Error Code = 9 means 'Invalid json data.'<br/>"

        },
		"Message": {
          "type": "string",
		  "description":"Message show as per error code"
        },

		"Result": {
          "type": "object",
        "description":"Can be ignored"
        }
      }
    },
	"ErrorForGetByCustomScreenTransactionId": {
      "type": "object",
      "properties": {
	    "IsError": {
          "type": "boolean",
		  "description":"isError = false means success and isError = true means error ",
		   "enum":[
		     "false",
			 "true"
		   ]
        },
        "Status": {
          "type": "integer",
          "minimum": 0,
          "maximum": 10,
		  "description":"Error Code = 0 means 'The requested processed successfully.'<br />Error Code = 1 means 'API key is missing.' <br />Error Code = 2 means 'Invalid API Key.'<br />Error Code = 3 means 'Action is missing.' <br />Error Code = 4 means 'Action cannot be empty.' <br />Error Code = 4 means 'Invalid Action.'<br />Error Code = 5 means 'EmployeeId does not exists.'<br />Error Code = 5 means 'EmployeeId contains invalid data.'<br />Error Code = 5 means 'EmployeeId contains more than 15 characters.'<br />Error Code = 5 means 'EmployeeId cannot be empty.'<br />Error Code = 5 means 'EmployeeId is missing.'<br />Error Code = 5 means 'ScreenId does not exists..'<br />Error Code = 5 means 'ScreenId is invalid'<br />Error Code = 5 means 'ScreenId cannot be empty'<br />Error Code = 5 means 'ScreenId is missing.'<br />Error Code = 5 means 'Custom Screen TransactionId is invalid'<br />Error Code = 5 means 'Custom Screen TransactionId cannot be empty.'<br />Error Code = 5 means 'Custom Screen TransactionId is missing.'<br />Error Code = 6 means 'Oops! Something went wrong.'<br />Error Code = 7 means 'No json data found.'<br />Error Code = 8 means 'Either empty or no Form Data.'<br />Error Code = 9 means 'Invalid json data.'<br />Error Code = 10 means 'No detail has been found."


        },
		"Message": {
          "type": "string",
		  "description":"Message show as per error code"
        },

		"Result": {
      "description": "Result value",

		  "allOf": [
            {
              "$ref": "#/definitions/Result1GetByCustomScreenTransactionIdObject"
            }
			]
        }}
    },
	"ErrorForCreateNewVacancy": {
      "type": "object",
      "properties": {
	  "IsError": {
          "type": "boolean",
		  "description":"isError = false means success and isError = true means error ",
		   "enum":[
		     "false",
			 "true"
		   ]
        },
        "Status": {
          "type": "integer",
          "minimum": 0,
          "maximum": 9,
		  "description":"Error Code = 0 means 'Vacancy details inserted successfully.'<br />Error Code = 5 means 'Reference already exist.'<br />Error Code = 2 means 'Invalid API Key.'<br />Error Code = 5 means 'API key does not exists.' <br />Error Code = 4 means 'Action cannot be empty.' <br />Error Code = 4 means 'Invalid Action.' <br/><br />Error Code = 5 means 'Vacancy Name contains invalid data.' <br />Error Code = 5 means 'Vacancy Name contains contains more than 512 characters.' <br />Error Code = 5 means 'Vacancy Name cannot be empty.' <br />Error Code = 5 means 'VacancyName is missing.' <br/><br />Error Code = 5 means 'Vacancy Description should not be empty.' <br />Error Code = 5 means 'VacancyDescription is missing.' <br/><br />Error Code = 5 means 'Company contains invalid data.' <br />Error Code = 5 means 'Company contains more than 100 characters.' <br />Error Code = 5 means 'Company cannot be empty.' <br/><br />Error Code = 5 means 'Location contains invalid data.' <br />Error Code = 5 means 'Location contains more than 100 characters.' <br />Error Code = 5 means 'Location cannot be empty.' <br/><br />Error Code = 5 means 'Department contains invalid data.' <br />Error Code = 5 means 'Department contains more than 100 characters.' <br />Error Code = 5 means 'Department cannot be empty.' <br/><br />Error Code = 5 means 'ClosingDate field contains invalid data' <br/><br />Error Code = 5 means 'Reference contains invalid data.' <br />Error Code = 5 means 'Vacancy Reference contains contains more than 100 characters.' <br />Error Code = 5 means 'Reference cannot be empty.' <br />Error Code = 5 means 'Reference is missing.' <br />Error Code = 5 means 'Reference not exist.' <br/><br />Error Code = 5 means 'Comment contains invalid data.' <br />Error Code = 5 means 'Comment contains contains more than 1024 characters.' <br />Error Code = 5 means 'Comment cannot be empty.' <br/><br />Error Code = 5 means 'SalaryRange contains invalid data.' <br />Error Code = 5 means 'SalaryRange contains contains more than 100 characters.' <br />Error Code = 5 means 'SalaryRange cannot be empty.' <br/><br />Error Code = 5 means 'JobTitle contains invalid data.' <br />Error Code = 5 means 'JobTitle contains contains more than 512 characters.' <br />Error Code = 5 means 'JobTitle cannot be empty.' <br/><br />Error Code = 5 means 'Country contains invalid data.' <br />Error Code = 5 means 'Country contains contains more than 216 characters.' <br />Error Code = 5 means 'Country cannot be empty.' <br/><br />Error Code = 5 means 'Experience contains invalid data.' <br />Error Code = 5 means 'Experience contains contains more than 256 characters.' <br />Error Code = 5 means 'Experience cannot be empty.' <br/><br />Error Code = 5 means 'City contains invalid data.' <br />Error Code = 5 means 'City contains contains more than 512 characters.' <br />Error Code = 5 means 'City cannot be empty.' <br/><br />Error Code = 5 means 'IsHideSalary contains invalid data.' <br />Error Code = 5 means 'IsHideSalary cannot be empty.' <br/><br />Error Code = 5 means 'VacancyType contains invalid data.' <br />Error Code = 5 means 'VacancyType cannot be empty.' <br/><br />Error Code = 5 means 'IsCoverLetterMandatory contains invalid data.' <br />Error Code = 5 means 'IsCoverLetterMandatory cannot be empty.' <br/><br />Error Code = 5 means 'IsResumeMandatory contains invalid data.' <br />Error Code = 5 means 'IsResumeMandatory cannot be empty.' <br/><br />Error Code = 5 means 'No access on ATS schema.'<br/><br />Error Code = 6 means 'Oops! Something went wrong.' <br />Error Code = 6 means 'Unknown error occured.' <br />Error Code = 7 means 'No json data found.'<br />Error Code = 8 means 'Either empty or no Form Data.'<br />Error Code = 9 means 'Invalid json data.'<br/>"

        },
		"Message": {
          "type": "string",
		  "description":"Message show as per error code"
        },
		"Result": {
          "type": "object",
		  "description":"Can be ignored"
        }
      }
    },

	"ErrorForGetVacancy": {
      "type": "object",
      "properties": {
	  "IsError": {
          "type": "boolean",
		  "description":"isError = false means success and isError = true means error ",
		   "enum":[
		     "false",
			 "true"
		   ]
         },
		 "Status": {
          "type": "integer",
          "minimum": 0,
          "maximum": 10,
		  "description":"<br />Error Code = 5 means 'Vacancy Reference contains invalid data.' <br />Error Code = 5 means 'Vacancy Reference contains contains more than 100 characters.' <br />Error Code = 5 means 'Vacancy Reference cannot be empty.' <br />Error Code = 5 means 'Vacancy Reference is missing.' <br/><br />Error Code = 5 means 'Reference not exist.' <br />Error Code = 6 means 'Unknown error occured.' <br />Error Code = 5 means 'No access on ATS schema.'<br />Error Code = 7 means 'No json data found.'<br />Error Code = 8 means 'Either empty or no Form Data.'<br />Error Code = 9 means 'Invalid json data.'<br />Error Code = 10 means 'No record found.'<br/>"

        },
		"Message": {
          "type": "string",
		  "description":"Message show as per error code"
        },
	    "Result": {
          "description": "Result value",

		  "allOf": [
            {
              "$ref": "#/definitions/ResultGetVacancyObject"
            }
          ]

        }}
    },

   "ErrorForGetAllVacancy": {
      "type": "object",
      "properties": {
	  "IsError": {
          "type": "boolean",
		  "description":"isError = false means success and isError = true means error ",
		   "enum":[
		     "false",
			 "true"
		   ]
         },
		 "Status": {
          "type": "integer",
          "minimum": 0,
          "maximum": 10,
		  "description":"<br />Error Code = 5 means 'Reference not exist.' <br />Error Code = 6 means 'Unknown error occured.' <br/><br /> Error Code = 5 means 'No access on ATS schema.'<br />Error Code = 7 means 'No json data found.'<br />Error Code = 8 means 'Either empty or no Form Data.'<br />Error Code = 9 means 'Invalid json data.'<br />Error Code = 10 means 'No record found.'<br/>"
        },
		"Message": {
          "type": "string",
		  "description":"Message show as per error code"
        },
	    "Result": {
          "description": "Result value",

		  "allOf": [
            {
              "$ref": "#/definitions/ResultGetAllVacancyObject"
            }
          ]

        }}
    },

	"ErrorForEmailInbox": {
      "type": "object",
      "properties": {
	    "IsError": {
          "type": "boolean",
		  "description":"isError = false means success and isError = true means error ",
		   "enum":[
		     "false",
			 "true"
		   ]
        },
        "Status": {
          "type": "integer",
          "minimum": 0,
          "maximum": 9,
		  "description":"Error Code = 0 means 'The request processed successfully'<br />Error Code = 4 means 'Action cannot be empty.' <br />Error Code = 3 means 'Action is missing.' <br />Error Code = 4 means 'Invalid Action.' <br />Error Code = 6 means 'Oops! Something went wrong.' <br />Error Code = 5 means 'EmailFrom contains invalid data.' <br />Error Code = 5 means 'EmailFrom contains more than 254 characters.'<br />Error code = 5 means 'EmailFrom cannot be empty.'<br />Error Code = 5 means 'EmailFrom is missing.' <br/><br />Error Code = 5 means 'Email Id In EmailTo contains invalid data.' <br />Error Code = 5 means 'Email Id In EmailTo contains more than 254 characters.'<br />Error code = 5 means 'Email Id In EmailTo cannot be empty.'<br />Error Code = 5 means 'EmailTo is missing.' <br/><br />Error Code = 5 means 'Email Id In EmailCc contains invalid data.' <br />Error Code = 5 means 'Email Id In EmailCc contains more than 254 characters.'<br />Error code = 5 means 'Email Id In EmailCc cannot be empty.'<br/><br />Error Code = 5 means 'Email Id In EmailBcc contains invalid data.' <br />Error Code = 5 means 'Email Id In EmailBcc contains more than 254 characters.'<br />Error code = 5 means 'Email Id In EmailBcc cannot be empty.'<br/><br />Error Code = 5 means 'EmailSubject contains invalid data.' <br />Error Code = 5 means 'EmailSubject contains more than 2147483647 characters.'<br />Error code = 5 means 'EmailSubject cannot be empty.'<br />Error Code = 5 means 'EmailSubject is missing.' <br/><br />Error Code = 5 means 'Invalid file type. File type is not supported' <br />Error Code = 5 means 'DocumentName cannot be empty.'<br />Error code = 5 means 'File size exceeds the limit. Please ensure the file is no larger than 15MB'<br />Error Code = 5 means 'Invalid file size' <br/><br />Error Code = 5 means 'Both user not belongs to same company.' <br />Error Code = 5 means 'API key with document access not exists.' <br/><br />Error Code = 5 means 'EmailTo list can not be empty.' <br />Error Code = 5 means 'Entries in EmailTo list should not be more than 1.' <br />Error Code = 5 means 'Email subject does not contains email recipient email id.' <br />Error Code = 7 means 'No json data found.' <br />Error Code = 8 means 'Either empty or no Form Data.'<br />Error Code = 9 means 'Invalid json data.'<br/>"

        },
		"Message": {
          "type": "string",
		  "description":"Message show as per error code"
        },
		 "Result": {
          "description": "Result value",

		  "allOf": [
            {
              "$ref": "#/definitions/Result1ForEmailInbox"
            }
          ]

        }}
    },

	  "Result1ForEmailInbox": {
      "description": "The Result Array",
      "type": "object",
        "properties": {
          "APIKey": {
            "description": "APIKey Value",
            "type": "string",
			"example":"7acf796a-d1fc-41b1-bc3f-3f7a91b291f1"
          },
          "RecipientEmployeeId": {
            "description": "Recipient Employee Id value",
            "type": "string",
		    "example":"PW2"
          },
		   "Title": {
            "description": "Title value",
            "type": "string",
			 "example":"Hello"
          }
		}
    },


	 "ErrorForaddrighttoworkdetail": {
      "type": "object",
      "properties": {
	    "IsError": {
          "type": "boolean",
		  "description":"isError = false means success and isError = true means error ",
		   "enum":[
		     "false",
			 "true"
		   ]
        },
        "Status": {
          "type": "integer",
          "minimum": 0,
          "maximum": 9,
		  "description":"Error Code = 0 means 'Right To Work detail inserted successfully.'<br />Error Code = 2 means 'Invalid API Key.'<br />Error Code = 5 means 'API key does not exists.' <br />Error Code = 4 means 'Action cannot be empty.' <br />Error Code = 4 means 'Invalid Action.' <br />Error Code = 5 means 'No access on employee schema.' <br/><br />Error code = 5 means 'EmployeeId cannot be empty.'<br />Error code = 5 means 'EmployeeId contains more than 15 characters.'<br />Error Code = 5 means 'EmployeeId contains invalid data.' <br />Error Code = 5 means 'EmployeeId does not exists.' <br />Error Code = 5 means 'EmployeeId is missing.' <br/><br />Error Code = 5 means 'DocumentType contains invalid data.' <br />Error Code = 5 means 'DocumentType contains more than 100 characters.' <br />Error Code = 5 means 'DocumentType is missing.' <br/><br />Error Code = 5 means 'DocumentId has One or more invalid characters were detected. Please check them and input the data again' <br />Error Code = 5 means 'ValidFrom field contains invalid data' <br />Error Code = 5 means 'ValidTo field contains invalid data' <br/><br />Error Code = 5 means 'Duration has One or more invalid characters were detected. Please check them and input the data again' <br/><br />Error Code = 5 means 'Invalid file type.File type is not supported.' <br />Error Code = 5 means 'DocumentName cannot be empty.' <br/><br />Error Code = 5 means 'File contains invalid data.' <br />Error Code = 5 means 'File cannot be empty.' <br />Error Code = 5 means 'Either DocumentName or File data not provided.' <br/><br />Error Code = 5 means 'Comment contains invalid data.' <br />Error Code = 5 means 'Comment contains more than 256 characters.' <br/><br />Error Code = 6 means 'Unknown error occured.'<br />Error Code = 6 means 'Oops! Something went wrong.'<br />Error Code = 7 means 'No json data found.' <br />Error Code = 8 means 'Either empty or no Form Data.'<br />Error Code = 9 means 'Invalid json data.'<br/>"
        },
		"Message": {
          "type": "string",
		  "description":"Message show as per error code"
        },
		"Result": {
          "type": "object",
		  "description":"Can be ignored"
        }
      }
    },

	 "ErrorForgetrighttoworkdetail": {
      "type": "object",
      "properties": {
	  "IsError": {
          "type": "boolean",
		  "description":"isError = false means success and isError = true means error ",
		   "enum":[
		     "false",
			 "true"
		   ]
         },
		 "Status": {
          "type": "integer",
          "minimum": 0,
          "maximum": 10,
		  "description":"Error Code = 0 means 'The request processed successfully.'<br />Error Code = 2 means 'Invalid API Key.'<br />Error Code = 5 means 'API key does not exists.' <br />Error Code = 4 means 'Action cannot be empty.' <br />Error Code = 4 means 'Invalid Action.' <br />Error Code = 6 means 'Oops! Something went wrong.' <br />Error Code = 5 means 'No access on employee schema.' <br/><br />Error Code = 5 means 'EmployeeId cannot be empty.'<br />Error code = 5 means 'EmployeeId contains more than 15 characters.'<br />Error Code = 5 means 'EmployeeId contains invalid data.' <br />Error Code = 5 means 'EmployeeId does not exists.' <br />Error Code = 5 means 'EmployeeId is missing.' <br />Error Code = 7 means 'No json data found.' <br />Error Code = 8 means 'Either empty or no Form Data.'<br />Error Code = 9 means 'Invalid json data.'<br />Error Code = 10 means 'No record found.'<br/>"
        },
		"Message": {
          "type": "string",
		  "description":"Message show as per error code"
        },
	    "Result": {
          "description": "Result value",

		  "allOf": [
            {
              "$ref": "#/definitions/Result1Forgetrighttoworkdetail"
            }
          ]

        }}
    },

     "Result1Forgetrighttoworkdetail": {
      "description": " Result Array",
      "type": "array",
      "items": {
        "type": "object",

        "properties": {
          "RightToWorkId": {
            "description": "RightToWorkId Value",
            "type": "integer",
			"example":"156"
          },
          "DocumentType": {
            "description": "Document type value",
            "type": "string",
		    "example":"Residence Permit"
          },
		   "DocumentId": {
            "description": "Document id value",
            "type": "integer",
			 "example":"10"
          },
		  "ValidFrom": {
            "description": "Valid from value",
           "type": "string",
		   "format":"date",
            "example":"Thu, 01 Jan 2015"
          },
		   "ValidTo": {
            "description": "Valid to value",
			 "type": "string",
			 "format":"date",
             "example":"Fri, 02 jan 2015"

          },
		   "Duration": {
            "description": "Duration value",
            "type": "integer",
			 "example":"2"
          },
		  "DocumentName": {
            "description": "DocumentName value",
            "type": "string",
			"example" : "api.txt"
          },
          "DocumentURL": {
            "description": "DocumentURL value",
            "type": "string",
			"format":"URL",
			"example" : "http://techinfo.localhost.net:12345/Handlers/MyDocsViewer.ashx?4a9b1332-3f71-4e96-859c-d1eaeaab3ea4"
          },
		   "Comments": {
            "description": "Comments value",
            "type": "string",
			"example" : "NICE"
          }



        }
      }
    },

	"ErrorForupdaterighttoworkdetail": {
      "type": "object",
      "properties": {
	    "IsError": {
          "type": "boolean",
		  "description":"isError = false means success and isError = true means error ",
		   "enum":[
		     "false",
			 "true"
		   ]
        },
        "Status": {
          "type": "integer",
          "minimum": 0,
          "maximum": 7,
		  "description":"Error Code = 0 means 'Right to work detail updated successfully.'<br />Error Code = 2 means 'Invalid API Key.'<br />Error Code = 5 means 'API key does not exists.' <br />Error Code = 4 means 'Action cannot be empty.' <br />Error Code = 4 means 'Invalid Action.' <br />Error Code = 5 means 'No access on employee schema.' <br />Error Code = 5 means 'EmployeeId does not exists.' <br />Error Code = 5 means 'EmployeeId cannot be empty.'<br />Error code = 5 means 'EmployeeId contains more than 15 characters.'<br />Error Code = 5 means 'EmployeeId contains invalid data.' <br />Error Code = 5 means 'EmployeeId is missing.' <br />Error Code = 5 means 'No record found.' <br />Error Code = 5 means 'RightToWorkTxnId is invalid' <br />Error Code = 5 means 'RightToWorkTxnId cannot be empty' <br />Error Code = 5 means 'RightToWorkTxnId is missing.' <br/><br />Error Code = 5 means 'DocumentType contains more than 100 characters.' <br />Error Code = 5 means 'DocumentType contains invalid data.' <br/><br />Error Code = 5 means 'DocumentId has One or more invalid characters were detected. Please check them and input the data again' <br/><br />Error Code = 5 means 'ValidFrom field contains invalid data ' <br />Error Code = 5 means 'ValidTo field contains invalid data ' <br/><br />Error Code = 5 means 'Duration has One or more invalid characters were detected. Please check them and input the data again' <br/><br />Error Code = 5 means 'Invalid file type. File type is not supported.' <br />Error Code = 5 means 'DocumentName cannot be empty.' <br />Error Code = 5 means 'File contains invalid data.' <br />Error Code = 5 means 'File cannot be empty.' <br />Error Code = 5 means 'Either DocumentName or File data not provided.' <br/><br />Error Code = 5 means 'Comment contains invalid data.' <br />Error Code = 5 means 'Comment contains more than 256 characters.' <br/><br />Error Code = 6 means 'Oops! Something went wrong.'<br />Error Code = 6 means 'No record found.'<br />Error Code = 7 means 'No json data found.' <br />Error Code = 8 means 'Either empty or no Form Data.'<br />Error Code = 9 means 'Invalid json data.'<br/>"
        },
		"Message": {
          "type": "string",
		  "description":"Message show as per error code"
        },
		"Result": {
          "type": "object",
		  "description":"Can be ignored"
        }
      }
    },

	"ErrorFordeleterighttoworkdetail": {
      "type": "object",
      "properties": {
	    "IsError": {
          "type": "boolean",
		  "description":"isError = false means success and isError = true means error ",
		   "enum":[
		     "false",
			 "true"
		   ]
        },
        "Status": {
          "type": "integer",
          "minimum": 0,
          "maximum": 9,
		  "description":"Error Code = 0 means 'Right to work detail deleted successfully.'<br />Error Code = 2 means 'Invalid API Key.'<br />Error Code = 5 means 'API key does not exists.' <br />Error Code = 4 means 'Action cannot be empty.' <br />Error Code = 4 means 'Invalid Action.' <br />Error Code = 5 means 'No access on employee schema.' <br />Error Code = 5 means 'EmployeeId does not exists.' <br />Error Code = 5 means 'EmployeeId cannot be empty.'<br />Error code = 5 means 'EmployeeId contains more than 15 characters.'<br />Error Code = 5 means 'EmployeeId contains invalid data.' <br />Error Code = 5 means 'EmployeeId is missing.' <br />Error Code = 5 means 'No record found.' <br />Error Code = 5 means 'RightToWorkTxnId is invalid' <br />Error Code = 5 means 'RightToWorkTxnId cannot be empty' <br />Error Code = 5 means 'RightToWorkTxnId is missing.' <br/><br />Error Code = 6 means 'No record found.'<br />Error Code = 7 means 'No json data found.' <br />Error Code = 8 means 'Either empty or no Form Data.'<br />Error Code = 9 means 'Invalid json data.'<br/>"

        },
		"Message": {
          "type": "string",
		  "description":"Message show as per error code"
        },
		"Result": {
          "type": "object",
		  "description":"Can be ignored"
        }
      }
    },

	"ErrorForGetBackgroundCheckDetailByEmployeeId": {
      "type": "object",
      "properties": {
	  "IsError": {
          "type": "boolean",
		  "description":"isError = false means success and isError = true means error ",
		   "enum":[
		     "false",
			 "true"
		   ]
         },
		 "Status": {
          "type": "integer",
          "minimum": 0,
          "maximum": 10,
		  "description":"Error Code = 0 means 'The request processed successfully.'<br />Error Code = 2 means 'Invalid API Key.'<br />Error Code = 5 means 'API key does not exists.' <br />Error Code = 4 means 'Action cannot be empty.' <br />Error Code = 4 means 'Invalid Action.' <br />Error Code = 6 means 'Oops! Something went wrong.' <br/><br />Error Code = 5 means 'EmployeeId cannot be empty.'<br />Error code = 5 means 'EmployeeId contains more than 15 characters.'<br />Error Code = 5 means 'EmployeeId contains invalid data.' <br />Error Code = 5 means 'EmployeeId does not exists.' <br />Error Code = 5 means 'EmployeeId is missing.' <br />Error Code = 7 means 'No json data found.' <br />Error Code = 8 means 'Either empty or no Form Data.'<br />Error Code = 9 means 'Invalid json data.'<br />Error Code = 10 means 'No record found.'<br/>"
        },
		"Message": {
          "type": "string",
		  "description":"Message show as per error code"
        },
	    "Result": {
          "description": "Result value",

		  "allOf": [
            {
              "$ref": "#/definitions/Result1ForGetBackgroundCheckDetailByEmployeeId"
            }
          ]

        }}
    },

	"Result1ForGetBackgroundCheckDetailByEmployeeId": {
      "description": "The Result Array",
      "type": "array",
      "items": {
        "type": "object",

        "properties": {
          "BackgroundCheckDetailId": {
            "description": "Background Check Detail Id Value",
            "type": "integer",
			"example":228
          },
          "TypeOfCheck": {
            "description": "Type Of Check value",
            "type": "string",
		    "example":"DBS"
          },
		   "DateCompleted": {
            "description": "Date Completed value",
            "type": "string",
			"format":"date",
			 "example":"Tue, 14 Feb 2017"
          },
		  "ExpiryDate": {
            "description": "Expiry Date value",
           "type": "string",
		   "format":"date",
           "example":"Thu, 16 Feb 2017"
          },
		   "DocumentName": {
            "description": "Document Name value",
			 "type": "string",
             "example":"aa.pdf"

          },
		   "DocumentURL": {
            "description": "Document URL value",
            "type": "string",
			"format" :"URL",
			"example":"http://ayubinfo.localhost.net:12345/Handlers/MyDocsViewer.ashx?f58d38ab-bf3e-4c76-9bf2-e8b29122bb08"
          },
		  "Comments": {
            "description": "Comments value",
            "type": "string",
			"example" : "abc"
          }}
      }
    },

	"ErrorForAddBackgroundCheckDetail": {
      "type": "object",
      "properties": {
	    "IsError": {
          "type": "boolean",
		  "description":"isError = false means success and isError = true means error ",
		   "enum":[
		     "false",
			 "true"
		   ]
        },
        "Status": {
          "type": "integer",
          "minimum": 0,
          "maximum": 9,
		  "description":"Error Code = 0 means 'Background detail inserted successfully.'<br />Error Code = 2 means 'Invalid API Key.'<br />Error Code = 5 means 'API key does not exists.' <br />Error Code = 4 means 'Action cannot be empty.' <br />Error Code = 4 means 'Invalid Action.' <br/><br />Error code = 5 means 'EmployeeId cannot be empty.'<br />Error code = 5 means 'EmployeeId contains more than 15 characters.'<br />Error Code = 5 means 'EmployeeId contains invalid data.' <br />Error Code = 5 means 'EmployeeId does not exists.' <br />Error Code = 5 means 'EmployeeId is missing.' <br/><br />Error Code = 5 means 'TypeOfCheck contains invalid data.' <br />Error Code = 5 means 'TypeOfCheck contains more than 100 characters.' <br />Error Code = 5 means 'TypeOfCheck cannot be empty.' <br />Error Code = 5 means 'TypeOfCheck is missing.' <br />Error Code = 5 means 'DateCompleted field contains invalid data' <br />Error Code = 5 means 'ExpiryDate field contains invalid data' <br/><br />Error Code = 5 means 'Invalid file type. File type is not supported.' <br />Error Code = 5 means 'DocumentName cannot be empty.' <br/><br />Error Code = 5 means 'File contains invalid data.' <br />Error Code = 5 means 'File cannot be empty.' <br />Error Code = 5 means 'Either DocumentName or File data not provided.' <br/><br />Error Code = 5 means 'Comment contains invalid data.' <br />Error Code = 5 means 'Comment contains more than 1024 characters.' <br/><br />Error Code = 6 means 'Oops! Something went wrong.'<br />Error Code = 7 means 'No json data found.' <br />Error Code = 8 means 'Either empty or no Form Data.'<br />Error Code = 9 means 'Invalid json data.'<br/>"
        },
		"Message": {
          "type": "string",
		  "description":"Message show as per error code"
        },
		"Result": {
          "type": "object",
		  "description":"Can be ignored"
        }
      }
    },

	"ErrorForUpdateBackgroundCheckDetail": {
      "type": "object",
      "properties": {
	    "IsError": {
          "type": "boolean",
		  "description":"isError = false means success and isError = true means error ",
		   "enum":[
		     "false",
			 "true"
		   ]
        },
        "Status": {
          "type": "integer",
          "minimum": 0,
          "maximum": 9,
		  "description":"Error Code = 0 means 'Background detail updated successfully.'<br />Error Code = 2 means 'Invalid API Key.'<br />Error Code = 5 means 'API key does not exists.' <br />Error Code = 4 means 'Action cannot be empty.' <br />Error Code = 4 means 'Invalid Action.' <br/><br />Error code = 5 means 'EmployeeId cannot be empty.'<br />Error code = 5 means 'EmployeeId contains more than 15 characters.'<br />Error Code = 5 means 'EmployeeId contains invalid data.' <br />Error Code = 5 means 'EmployeeId does not exists.' <br />Error Code = 5 means 'EmployeeId is missing.' <br/><br />Error code = 5 means 'No record found.'<br />Error code = 5 means 'BackgroundCheckTxnId is invalid'<br />Error code = 5 means 'BackgroundCheckTxnId cannot be empty'<br />Error code = 5 means 'BackgroundCheckTxnId is missing.'<br/><br />Error Code = 5 means 'TypeOfCheck contains invalid data.' <br />Error Code = 5 means 'TypeOfCheck contains more than 100 characters.' <br />Error Code = 5 means 'TypeOfCheck cannot be empty.' <br />Error Code = 5 means 'TypeOfCheck is missing.' <br />Error Code = 5 means 'DateCompleted field contains invalid data' <br />Error Code = 5 means 'ExpiryDate field contains invalid data' <br/><br />Error Code = 5 means 'Invalid file type. File type is not supported.' <br />Error Code = 5 means 'DocumentName cannot be empty.' <br/><br />Error Code = 5 means 'File contains invalid data.' <br />Error Code = 5 means 'File cannot be empty.' <br />Error Code = 5 means 'Either DocumentName or File data not provided.' <br/><br />Error Code = 5 means 'Comment contains invalid data.' <br />Error Code = 5 means 'Comment contains more than 1024 characters.' <br/><br />Error Code = 6 means 'Oops! Something went wrong.'<br />Error Code = 7 means 'No json data found.' <br />Error Code = 8 means 'Either empty or no Form Data.'<br />Error Code = 9 means 'Invalid json data.'<br/>"
        },
		"Message": {
          "type": "string",
		  "description":"Message show as per error code"
        },
		"Result": {
          "type": "object",
		  "description":"Can be ignored"
        }
      }
    },

	"ErrorForDeleteBackgroundCheckDetail": {
      "type": "object",
      "properties": {
	    "IsError": {
          "type": "boolean",
		  "description":"isError = false means success and isError = true means error ",
		   "enum":[
		     "false",
			 "true"
		   ]
        },
        "Status": {
          "type": "integer",
          "minimum": 0,
          "maximum": 9,
		  "description":"Error Code = 0 means 'Background detail deleted successfully.'<br />Error Code = 2 means 'Invalid API Key.'<br />Error Code = 5 means 'API key does not exists.' <br />Error Code = 4 means 'Action cannot be empty.' <br />Error Code = 4 means 'Invalid Action.' <br />Error Code = 5 means 'EmployeeId does not exists.' <br />Error Code = 5 means 'EmployeeId cannot be empty.'<br />Error code = 5 means 'EmployeeId contains more than 15 characters.'<br />Error Code = 5 means 'EmployeeId contains invalid data.' <br />Error Code = 5 means 'EmployeeId is missing.' <br />Error Code = 5 means 'No record found.' <br />Error Code = 5 means 'BackgroundCheckTxnId is invalid' <br />Error Code = 5 means 'BackgroundCheckTxnId cannot be empty' <br />Error Code = 5 means 'BackgroundCheckTxnId is missing.' <br/><br />Error Code = 6 means 'No record found.'<br />Error Code = 7 means 'No json data found.' <br />Error Code = 8 means 'Either empty or no Form Data.'<br />Error Code = 9 means 'Invalid json data.'<br/>"

        },
		"Message": {
          "type": "string",
		  "description":"Message show as per error code"
        },
		"Result": {
          "type": "object",
		  "description":"Can be ignored"
        }
      }
    },

	 "ErrorForgetothereventdetail": {
      "type": "object",
      "properties": {
	  "IsError": {
          "type": "boolean",
		  "description":"isError = false means success and isError = true means error ",
		   "enum":[
		     "false",
			 "true"
		   ]
         },
		 "Status": {
          "type": "integer",
          "minimum": 0,
          "maximum": 10,
		  "description":"Error Code = 0 means 'The requested processed successfully.'<br />Error Code = 2 means 'Invalid API Key.'<br />Error Code = 5 means 'API key does not exists.' <br />Error Code = 4 means 'Action cannot be empty.' <br />Error Code = 4 means 'Invalid Action.' <br />Error Code = 6 means 'Oops! Something went wrong.' <br />Error Code = 5 means 'No access on Other Event schema.' <br/><br />Error Code = 5 means 'EmployeeId cannot be empty.'<br />Error code = 5 means 'EmployeeId contains more than 15 characters.'<br />Error Code = 5 means 'EmployeeId contains invalid data.' <br />Error Code = 5 means 'EmployeeId does not exists.' <br />Error Code = 5 means 'EmployeeId is missing.' <br/><br />Error Code = 5 means 'StartDate contains invalid data.' <br />Error Code = 5 means 'StartDate should be before or equal to EndDate.' <br />Error Code = 5 means 'EndDate contains invalid data.' <br />Error Code = 7 means 'No json data found.' <br />Error Code = 8 means 'Either empty or no Form Data.'<br />Error Code = 9 means 'Invalid json data.'<br />Error Code = 10 means 'The requested processed successfully.'<br/>"
        },
		"Message": {
          "type": "string",
		  "description":"Message show as per error code"
        },
	    "Result": {
          "description": "Result value",

		  "allOf": [
            {
              "$ref": "#/definitions/Result1Forgetothereventdetail"
            }
          ]

        }}
    },

	 "Result1Forgetothereventdetail": {
      "description": "The Result Array",
      "type": "array",
      "items": {
        "type": "object",

        "properties": {
          "OtherLeaveTxnId": {
            "description": "OtherLeaveTxnId Value",
            "type": "integer",
			"example":1023
          },
		  "StartDate": {
           "description": "Start Date value",
           "type": "string",
		   "format":"date",
            "example":"2016-04-15"
          },
		   "EndDate": {
           "description": "End Date value",
           "type": "string",
		   "format":"date",
            "example":"2016-04-15"
          },
          "DurationType": {
            "description": "Document type value",
            "type": "integer",
		    "example":1
          },
		   "DurationInDays": {
            "description": "Duration In Days value",
            "type": "integer",
			 "format":"decimal",
			 "example":1.00
          },

		   "DurationInMinutes": {
            "description": "Duration In Minutes value",
			 "type": "integer",
             "example":450

          },
		  "StartTime": {
            "description": "Start Time value",
			 "type": "string",
             "format": "timespan",
             "example":"01:00"

          },
		   "EndTime": {
            "description": "End Time value",
			 "type": "string",
             "format": "timespan",
             "example":"02:00"

          },
		   "DurationInDaysThisPeriod": {
            "description": "Duration In Days This Period value",
             "type": "integer",
			 "format":"decimal",
			 "example":1.00
          },
		   "DurationInMinutesThisPeriod": {
            "description": "Duration In Minutes This Period value",
            "type": "integer",
			 "example":450
          },
		  "RequesterComments": {
            "description": "Requester Comments value",
            "type": "string",
			"example" : "abc"
          },
          "ApproverComments": {
            "description": "Approver Comments value",
            "type": "string",
			"example" : "comments"
          },
		   "Approver": {
            "description": "Approver value",
            "type": "string",
			"example" : "Sunil Singh"
          },
		   "Reason": {
            "description": "Reason value",
            "type": "string",
			"example" : "Study Leave"
          },
		   "Status": {
            "description": "Status value",
            "type": "string",
			"example" : "Approved"
          },
		   "LastActionDateTime": {
            "description": "Last Action DateTime value",
			"type": "string",
            "format": "datetime",
			"example" : "2016-06-01 13:39:18"
          }



        }
      }
    },

	 "ErrorForgetotherevententitlement": {
      "type": "object",
      "properties": {
	  "IsError": {
          "type": "boolean",
		  "description":"isError = false means success and isError = true means error ",
		   "enum":[
		     "false",
			 "true"
		   ]
         },
		 "Status": {
          "type": "integer",
          "minimum": 0,
          "maximum": 10,
		  "description":"Error Code = 0 means 'The requested processed successfully.'<br />Error Code = 2 means 'Invalid API Key.'<br />Error Code = 5 means 'API key does not exists.' <br />Error Code = 4 means 'Action cannot be empty.' <br />Error Code = 4 means 'Invalid Action.' <br />Error Code = 6 means 'Oops! Something went wrong.' <br />Error Code = 5 means 'No access on Other Event schema.' <br/><br />Error Code = 5 means 'EmployeeId cannot be empty.'<br />Error code = 5 means 'EmployeeId contains more than 15 characters.'<br />Error Code = 5 means 'EmployeeId contains invalid data.' <br />Error Code = 5 means 'EmployeeId does not exists.' <br />Error Code = 5 means 'EmployeeId is missing.' <br />Error Code = 7 means 'No json data found.' <br />Error Code = 8 means 'Either empty or no Form Data.'<br />Error Code = 9 means 'Invalid json data.'<br />Error Code = 10 means 'The requested processed successfully.'<br/>"
        },
		"Message": {
          "type": "string",
		  "description":"Message show as per error code"
        },
	    "Result": {
          "description": "Result value",

		  "allOf": [
            {
              "$ref": "#/definitions/Result1Forgetotherevententitlement"
            }
          ]

        }}
    },

	 "Result1Forgetotherevententitlement": {
      "description": "The Result Array",
      "type": "array",
      "items": {
        "type": "object",

        "properties": {
          "ReasonName": {
            "description": "Reason Name Value",
            "type": "string",
			"example":"Jury Duty"
          },
		  "StartDate": {
           "description": "Start Date value",
           "type": "string",
		   "format":"date",
            "example":"2017-01-01"
          },
		   "EndDate": {
           "description": "End Date value",
           "type": "string",
		   "format":"date",
            "example":"2017-12-31"
          },
		   "EntitlementRecordedIn": {
            "description": "Entitlement Recorded In value",
            "type": "string",
			 "example":"1"
          },
		   "EntitlementDurationInDays": {
            "description": "Entitlement Duration In Days value",
			  "type": "integer",
			 "format":"decimal",
             "example":10.00

          },
		   "EntitlementDurationInMins": {
            "description": "Entitlement Duration In Mins value",
			 "type": "integer",
             "example":4500

          }
        }
      }
    },

	"ErrorForDeleteOtherEvent": {
      "type": "object",
      "properties": {
	    "IsError": {
          "type": "boolean",
		  "description":"isError = false means success and isError = true means error ",
		   "enum":[
		     "false",
			 "true"
		   ]
        },
        "Status": {
          "type": "integer",
          "minimum": 0,
          "maximum": 10,
		  "description":"Error Code = 0 means 'Other Leave deleted successfully.'<br />Error Code = 2 means 'Invalid API Key.'<br />Error Code = 5 means 'API key does not exists.' <br />Error Code = 4 means 'Action cannot be empty.' <br />Error Code = 4 means 'Invalid Action.' <br />Error Code = 5 means 'No access on Other Event schema.' <br />Error Code = 5 means 'EmployeeId does not exists.' <br />Error Code = 5 means 'EmployeeId cannot be empty.'<br />Error code = 5 means 'EmployeeId contains more than 15 characters.'<br />Error Code = 5 means 'EmployeeId contains invalid data.' <br />Error Code = 5 means 'EmployeeId is missing.' <br />Error Code = 5 means 'Invalid json data' <br />Error Code = 5 means 'OtherLeaveTxnId cannot be empty.' <br />Error Code = 5 means 'OtherLeaveTxnId is invalid.' <br />Error Code = 5 means 'OtherLeaveTxnId is missing.' <br />Error Code = 7 means 'No json data found.' <br />Error Code = 8 means 'Either empty or no Form Data.'<br />Error Code = 9 means 'Invalid json data.'<br />Error Code = 10 means 'EmployeeId does not exists.'"

        },
		"Message": {
          "type": "string",
		  "description":"Message show as per error code"
        },
		"Result": {
          "type": "object",
		  "description":"Can be ignored"
        }
      }
    },

	"ErrorForaddothereventleave": {
      "type": "object",
      "properties": {
	    "IsError": {
          "type": "boolean",
		  "description":"isError = false means success and isError = true means error ",
		   "enum":[
		     "false",
			 "true"
		   ]
        },
        "Status": {
          "type": "integer",
          "minimum": 0,
          "maximum": 9,
		  "description":"Error Code = 0 means 'Other Event Saved Successfully'<br />Error Code = 2 means 'Invalid API Key.'<br />Error Code = 5 means 'API key does not exists.' <br />Error Code = 4 means 'Action cannot be empty.' <br />Error Code = 4 means 'Invalid Action.' <br />Error Code = 5 means 'No access on Other Event schema.' <br />Error Code = 5 means 'EmployeeId does not exists.' <br />Error Code = 5 means 'EmployeeId cannot be empty.'<br />Error code = 5 means 'EmployeeId contains more than 15 characters.'<br />Error Code = 5 means 'EmployeeId contains invalid data.' <br />Error Code = 5 means 'EmployeeId is missing.' <br />Error Code = 5 means 'DurationType should be DAY = 1 , Hour = 2.' <br />Error Code = 5 means 'DurationType cannot be empty.' <br />Error Code = 5 means 'DurationType is missing.' <br/><br />Error Code = 5 means 'Reason Name contains invalid data.' <br />Error Code = 5 means 'Reason Name contains more than 100 characters.' <br />Error Code = 5 means 'Reason Name cannot be empty.' <br />Error Code = 5 means 'Reason Name is missing.' <br/><br />Error Code = 5 means 'StartDate contains invalid data.' <br />Error Code = 5 means 'StartDate cannot be empty.' <br />Error Code = 5 means 'StartDate is missing.' <br/><br />Error Code = 5 means 'StartDate should be before or equal to EndDate.' <br />Error Code = 5 means 'StartDate should be equal to EndDate.' <br />Error Code = 5 means 'EndDate contains invalid data.' <br />Error Code = 5 means 'EndDate cannot be empty.' <br />Error Code = 5 means 'EndDate is missing.' <br/><br />Error Code = 5 means 'DurationInDays cannot be zero.' <br />Error Code = 5 means 'DurationInDays contains invalid data.' <br />Error Code = 5 means 'DurationInDays contains invalid data.' <br />Error Code = 5 means 'DurationInDays cannot be empty.' <br />Error Code = 5 means 'DurationInDay May only Contain Input Multiple of 0.25' <br />Error Code = 5 means 'DurationInDay Contain Invalid Data' <br />Error Code = 5 means 'DurationInDays is missing.' <br/><br />Error Code = 5 means 'StartTime contains invalid data.' <br />Error Code = 5 means 'StartTime cannot be empty.' <br />Error Code = 5 means 'StartTime is Mising' <br/><br />Error Code = 5 means 'EndTime contains invalid data.' <br />Error Code = 5 means 'EndTime cannot be empty.' <br/><br />Error Code = 5 means 'Please Check StartTime and EndTime' <br />Error Code = 5 means 'Invalid Input' <br/><br />Error Code = 5 means 'Comment contains invalid data.' <br />Error Code = 5 means 'Comment contains more than 256 characters.' <br />Error Code = 5 means 'Comment contains more than 1024 characters.' <br/><br />Error Code = 5 means 'Invalid file type. File type is not supported.' <br />Error Code = 5 means 'DocumentName cannot be empty.' <br />Error Code = 5 means 'DocumentName is missing.' <br/><br />Error Code = 5 means 'File contains invalid data.' <br />Error Code = 5 means 'File cannot be empty.' <br />Error Code = 5 means 'File is missing.' <br />Error Code = 5 means 'Start date must be after employee start date.' <br />Error Code = 5 means 'Duration exceeds a day' <br />Error Code = 5 means 'There is already has an existing absence entry during the period requested. Please edit or split the entry so the dates do not coincide, then try again' <br/><br />Error Code = 5 means 'Please check your dates include working days.' <br />Error Code = 5 means 'Please check this is a working day.' <br />Error Code = 5 means 'Duration in days cannot be zero.' <br/><br />Error Code = 5 means 'Passed duration in days mismatched with calculated duration in days.' <br />Error Code = 5 means 'Other Event Saved Successfully' <br />Error Code = 5 means 'Failed to Save Detail' <br />Error Code = 5 means 'There is InSufficient Leave Remaining' <br />Error Code = 5 means 'Duration Exceeds a Days' <br/><br />Error Code = 5 means 'The duration entered exceeds the limit for a single booking' <br />Error Code = 5 means 'Other Event Saved Successfully' <br />Error Code = 7 means 'No json data found.' <br />Error Code = 8 means 'Either empty or no Form Data.'<br />Error Code = 9 means 'Invalid json data.'<br/>"

        },
		"Message": {
          "type": "string",
		  "description":"Message show as per error code"
        },
		"Result": {
          "type": "object",
		  "description":"Can be ignored"
        }
      }
    },


	"ErrorForupdateothereventleave": {
      "type": "object",
      "properties": {
	    "IsError": {
          "type": "boolean",
		  "description":"isError = false means success and isError = true means error ",
		   "enum":[
		     "false",
			 "true"
		   ]
        },
        "Status": {
          "type": "integer",
          "minimum": 0,
          "maximum": 9,
		  "description":"Error Code = 0 means 'Other Event Updated Successfully'<br />Error Code = 2 means 'Invalid API Key.'<br />Error Code = 5 means 'API key does not exists.' <br />Error Code = 4 means 'Action cannot be empty.' <br />Error Code = 4 means 'Invalid Action.' <br />Error Code = 5 means 'No access on Other Event schema.' <br />Error Code = 5 means 'EmployeeId does not exists.' <br />Error Code = 5 means 'EmployeeId cannot be empty.'<br />Error code = 5 means 'EmployeeId contains more than 15 characters.'<br />Error Code = 5 means 'EmployeeId contains invalid data.' <br />Error Code = 5 means 'EmployeeId is missing.' <br/><br />Error Code = 5 means 'OtherEventTxnId contains invalid data.' <br />Error Code = 5 means 'OtherEventTxnId cannot be empty.' <br />Error Code = 5 means 'OtherEventTxnId is missing.' <br />Error Code = 5 means 'DurationType should be DAY = 1 , Hour = 2.' <br />Error Code = 5 means 'DurationType cannot be empty.' <br />Error Code = 5 means 'DurationType is missing.' <br/><br />Error Code = 5 means 'Reason Name contains invalid data.' <br />Error Code = 5 means 'Reason Name contains more than 100 characters.' <br />Error Code = 5 means 'Reason Name cannot be empty.' <br />Error Code = 5 means 'Reason Name is missing.' <br/><br />Error Code = 5 means 'StartDate contains invalid data.' <br />Error Code = 5 means 'StartDate cannot be empty.' <br />Error Code = 5 means 'StartDate is missing.' <br/><br />Error Code = 5 means 'StartDate should be before or equal to EndDate.' <br />Error Code = 5 means 'StartDate should be equal to EndDate.' <br />Error Code = 5 means 'EndDate contains invalid data.' <br />Error Code = 5 means 'EndDate cannot be empty.' <br />Error Code = 5 means 'EndDate is missing.' <br/><br />Error Code = 5 means 'DurationInDays cannot be zero.' <br />Error Code = 5 means 'DurationInDays contains invalid data.' <br />Error Code = 5 means 'DurationInDays contains invalid data.' <br />Error Code = 5 means 'DurationInDays cannot be empty.' <br />Error Code = 5 means 'DurationInDay May only Contain Input Multiple of 0.25' <br />Error Code = 5 means 'DurationInDay Contain Invalid Data' <br />Error Code = 5 means 'DurationInDays is missing.' <br/><br />Error Code = 5 means 'StartTime contains invalid data.' <br />Error Code = 5 means 'StartTime cannot be empty.' <br />Error Code = 5 means 'StartTime is Mising' <br/><br />Error Code = 5 means 'EndTime contains invalid data.' <br />Error Code = 5 means 'EndTime cannot be empty.' <br/><br />Error Code = 5 means 'Please Check StartTime and EndTime' <br />Error Code = 5 means 'Invalid Input' <br/><br />Error Code = 5 means 'Comment contains invalid data.' <br />Error Code = 5 means 'Comment contains more than 1024 characters.' <br />Error Code = 5 means 'Comment contains more than 256 characters.' <br/><br />Error Code = 5 means 'Invalid file type. File type is not supported.' <br />Error Code = 5 means 'DocumentName cannot be empty.' <br />Error Code = 5 means 'DocumentName is missing.' <br/><br />Error Code = 5 means 'File contains invalid data.' <br />Error Code = 5 means 'File cannot be empty.' <br />Error Code = 5 means 'File is missing.' <br />Error Code = 5 means 'Start date must be after employee start date.' <br />Error Code = 5 means 'Duration exceeds a day' <br />Error Code = 5 means 'There is already has an existing absence entry during the period requested. Please edit or split the entry so the dates do not coincide, then try again' <br/><br />Error Code = 5 means 'Please check your dates include working days.' <br />Error Code = 5 means 'Please check this is a working day.' <br />Error Code = 5 means 'Duration in days cannot be zero.' <br/><br />Error Code = 5 means 'Passed duration in days mismatched with calculated duration in days.' <br />Error Code = 5 means 'Other Event Saved Successfully' <br />Error Code = 5 means 'Failed to Update Detail' <br />Error Code = 5 means 'There is InSufficient Leave Remaining' <br />Error Code = 5 means 'Duration Exceeds a Days' <br/><br />Error Code = 5 means 'The duration entered exceeds the limit for a single booking' <br />Error Code = 5 means 'Other Event Updated Successfully' <br />Error Code = 7 means 'No json data found.' <br />Error Code = 8 means 'Either empty or no Form Data.'<br />Error Code = 9 means 'Invalid json data.'<br/>"

        },
		"Message": {
          "type": "string",
		  "description":"Message show as per error code"
        },
		"Result": {
          "type": "object",
		  "description":"Can be ignored"
        }
      }
    },

	"ErrorForaddotherevententitlement": {
      "type": "object",
      "properties": {
	    "IsError": {
          "type": "boolean",
		  "description":"isError = false means success and isError = true means error ",
		   "enum":[
		     "false",
			 "true"
		   ]
        },
        "Status": {
          "type": "integer",
          "minimum": 0,
          "maximum": 9,
		  "description":"Error Code = 0 means 'Other Event Entitlement Saved Successfully'<br />Error Code = 2 means 'Invalid API Key.'<br />Error Code = 5 means 'API key does not exists.' <br />Error Code = 4 means 'Action cannot be empty.' <br />Error Code = 4 means 'Invalid Action.' <br />Error Code = 5 means 'No access on Other Event schema.' <br />Error Code = 5 means 'EmployeeId does not exists.' <br />Error Code = 5 means 'EmployeeId cannot be empty.'<br />Error code = 5 means 'EmployeeId contains more than 15 characters.'<br />Error Code = 5 means 'EmployeeId contains invalid data.' <br />Error Code = 5 means 'EmployeeId is missing.' <br/><br />Error Code = 5 means 'Reason Name contains invalid data.' <br />Error Code = 5 means 'Reason Name contains more than 100 characters.' <br />Error Code = 5 means 'Reason Name cannot be empty.' <br />Error Code = 5 means 'Reason Name is missing.' <br/><br />Error Code = 5 means 'ThisYearEntitlement contains more than 4 characters.' <br />Error Code = 5 means 'ThisYearEntitlement cannot be empty.' <br />Error Code = 5 means 'ThisYearEntitlement Contain Invalid Data' <br />Error Code = 5 means 'ThisYearEntitlement is missing.' <br/><br />Error Code = 5 means 'NextYearEntitlement contains more than 4 characters.' <br />Error Code = 5 means 'NextYearEntitlement cannot be empty.' <br />Error Code = 5 means 'NextYearEntitlement Contain Invalid Data' <br />Error Code = 5 means 'NextYearEntitlement is missing.' <br/><br />Error Code = 5 means 'Entitlement RecordedIn contains invalid data.' <br />Error Code = 5 means 'Entitlement RecordedIn cannot be empty.' <br />Error Code = 5 means 'Entitlement Can be RecordedIn Days(1) or In Hours(2).' <br />Error Code = 5 means 'Entitlement Contain Invalid Data' <br />Error Code = 5 means 'Entitlement RecordedIn is missing.' <br/><br />Error Code = 5 means 'Other Event Entitlement Fail to Saved Detail' <br />Error Code = 5 means 'Other Event Entitlement Saved Successfully' <br />Error Code = 7 means 'No json data found.' <br />Error Code = 8 means 'Either empty or no Form Data.'<br />Error Code = 9 means 'Invalid json data.'<br/>"

        },
		"Message": {
          "type": "string",
		  "description":"Message show as per error code"
        },
		"Result": {
          "type": "object",
		  "description":"Can be ignored"
        }
      }
    },

	 "ErrorForCreateNewApplicant": {
      "type": "object",
      "properties": {
	  "IsError": {
          "type": "boolean",
		  "description":"isError = false means success and isError = true means error ",
		   "enum":[
		     "false",
			 "true"
		   ]
        },
        "Status": {
          "type": "integer",
          "minimum": 0,
          "maximum": 9,
		  "description":"Error Code = 0 means 'Applicant details inserted successfully.'<br/><br />Error Code = 2 means 'Invalid API Key.'<br/><br />Error Code = 4 means 'Action cannot be empty.' <br />Error Code = 4 means 'Invalid Action.' <br />Error Code = 5 means 'Vacancy Reference not exist.'<br />Error Code = 5 means 'API key does not exists.' <br/><br />Error Code = 5 means 'VacancyReference contains invalid data.' <br />Error Code = 5 means 'VacancyReference contains contains more than 100 characters.' <br />Error Code = 5 means 'VacancyReference is missing.' <br/><br />Error Code = 5 means 'FirstName contains invalid data.' <br />Error Code = 5 means 'FirstName contains contains more than 50 characters.' <br />Error Code = 5 means 'FirstName cannot be empty.' <br />Error Code = 5 means 'FirstName is missing.' <br/><br />Error Code = 5 means 'LastName contains invalid data.' <br />Error Code = 5 means 'LastName contains contains more than 50 characters.' <br />Error Code = 5 means 'LastName cannot be empty.' <br />Error Code = 5 means 'LastName is missing.' <br/><br />Error Code = 5 means 'Email contains invalid data.' <br />Error Code = 5 means 'Email contains contains more than 320 characters.' <br/><br />Error Code = 5 means 'Gender contains invalid data.' <br/><br />Error Code = 5 means 'DateOfBirth contains invalid data.' <br/><br />Error Code = 5 means 'PostCode contains invalid data.' <br />Error Code = 5 means 'PostCode contains contains more than 20 characters.' <br/><br />Error Code = 5 means 'Address contains invalid data.' <br />Error Code = 5 means 'Address contains contains more than 512 characters.' <br/><br />Error Code = 5 means 'PhoneNumber contains invalid data' <br />Error Code = 5 means 'PhoneNumber contains more than 80 characters.' <br/><br />Error Code = 5 means 'OtherContactDetails contains invalid data.' <br />Error Code = 5 means 'OtherContactDetails contains contains more than 1024 characters.' <br/><br />Error Code = 5 means 'Source contains invalid data.' <br />Error Code = 5 means 'Source contains contains more than 100 characters.' <br/><br />Error Code = 5 means 'RecruitmentCost contains invalid data.' <br/><br />Error Code = 5 means 'DateLastContacted contains invalid data.' <br/><br />Error Code = 5 means 'Addional Question QuestionId  is not exist.' <br />Error Code = 5 means 'Addional Question - QuestionId is not valid.' <br />Error Code = 5 means 'Addional Question - QuestionId is missing.' <br/><br />Error Code = 5 means 'Internal Question - Multiple records for QuestionId' <br />Error Code = 5 means 'Internal Question - QuestionId is not valid.' <br />Error Code = 5 means 'Internal Question - QuestionId is missing.' <br />Error Code = 5 means 'Internal Questions - Value for QuestionId should not be empty.' <br/><br />Error Code = 5 means 'Internal Questions - Value for QuestionId is not a valid. Allowed only numbers.' <br />Error Code = 5 means 'Internal Questions - Value for QuestionId  questionId is missing.' <br/><br />Error Code = 5 means 'Vacancy Reference not exist.' <br/><br />Error Code = 5 means 'DocumentName contains invalid data.' <br />Error Code = 5 means 'DocumentName contains contains more than 100 characters.' <br />Error Code = 5 means 'DocumentName cannot be empty.' <br/><br />Error Code = 5 means 'Documents - Url contains invalid data.' <br />Error Code = 5 means 'Documents - Url contains contains more than 256 characters.' <br />Error Code = 5 means 'Documents - Url cannot be empty.' <br />Error Code = 5 means 'Documents - Url contains invalid data.' <br />Error Code = 5 means 'Documents - Url is missing.' <br />Error Code = 5 means 'No access on ATS schema.'<br />Error Code = 6 means 'Oops! Something went wrong.' <br />Error Code = 6 means 'Unknown error occured.' <br />Error Code = 7 means 'No json data found.'<br />Error Code = 8 means 'Either empty or no Form Data.'<br />Error Code = 9 means 'Invalid json data.'<br/>"


        },
		"Message": {
          "type": "string",
		  "description":"Message show as per error code"
        },
		"Result": {
          "description": "Result value",

		  "allOf": [
            {
              "$ref": "#/definitions/ResultCreateNewApplicant"
            }
          ]

        }}
    },

	 "ErrorForuploadapplicantdocument": {
      "type": "object",
      "properties": {
	  "IsError": {
          "type": "boolean",
		  "description":"isError = false means success and isError = true means error ",
		   "enum":[
		     "false",
			 "true"
		   ]
        },
        "Status": {
          "type": "integer",
          "minimum": 0,
          "maximum": 9,
		  "description":"Error Code = 0 means 'Applicant document upload successfully'<br/><br />Error Code = 2 means 'Invalid API Key.'<br/><br />Error Code = 4 means 'Action cannot be empty.' <br />Error Code = 4 means 'Invalid Action.' <br />Error Code = 5 means 'API key does not exists.' <br/><br />Error Code = 5 means 'ApplicantId does not exists.' <br />Error Code = 5 means 'ApplicantId contains contains more than 15 characters.' <br />Error Code = 5 means 'ApplicantId contains invalid data.' <br />Error Code = 5 means 'ApplicantId cannot be empty.' <br />Error Code = 5 means 'Invalid ApplicantId.' <br/><br />Error Code = 5 means 'Invalid file type. File type fileExtension is not supported.' <br />Error Code = 5 means 'DocumentName cannot be empty.' <br />Error Code = 5 means 'DocumentName is missing.' <br/><br />Error Code = 5 means 'Description contains invalid data.' <br />Error Code = 5 means 'Description contains contains more than 256 characters.' <br/><br />Error Code = 5 means 'File contains invalid data' <br />Error Code = 5 means 'File is Missing.' <br />Error Code = 5 means 'File cannot be empty.' <br />Error Code = 5 means 'No access on ATS schema.'<br />Error Code = 6 means 'Oops! Something went wrong.' <br />Error Code = 6 means 'Unknown error occured.' <br />Error Code = 7 means 'No json data found.'<br />Error Code = 8 means 'Either empty or no Form Data.'<br />Error Code = 9 means 'Invalid json data.'<br/>"

        },
		"Message": {
          "type": "string",
		  "description":"Message show as per error code"
        },
		"Result": {
          "type": "object",
		  "description":"Can be ignored"
        }
      }
    },


	"ErrorForGetLateByEmployeeId": {
      "type": "object",
      "properties": {
	  "IsError": {
          "type": "boolean",
		  "description":"isError = false means success and isError = true means error ",
		  "enum":[
		     "false",
			 "true"
		   ]
        },
        "Status": {
          "type": "integer",
          "minimum": 0,
          "maximum": 10,
		  "description":"Error Code = 0 means 'The request processed successfully.'<br />Error Code = 2 means 'Invalid API Key.'<br/><br />Error Code = 4 means 'Action cannot be empty.' <br />Error Code = 4 means 'Invalid Action.' <br/><br />Error Code = 5 means 'API key does not exists.' <br/><br />Error Code = 5 means 'EmployeeId cannot be empty.'<br />Error code = 5 means 'EmployeeId contains more than 15 characters.'<br />Error Code = 5 means 'EmployeeId contains invalid data.' <br />Error Code = 5 means 'EmployeeId does not exists.' <br />Error Code = 5 means 'EmployeeId is missing.' <br/><br />Error Code = 5 means 'StartDate field contains invalid data.' <br/><br />Error Code = 5 means 'EndDate field contains invalid data.' <br/><br />Error Code = 5 means 'StartDate should be before or equal to EndDate.' <br/><br />Error Code = 5 means 'No access on late schema.'<br/><br />Error Code = 6 means 'Oops! Something went wrong.' <br />Error Code = 6 means 'Unknown error occured.' <br/><br />Error Code = 7 means 'No json data found.'<br />Error Code = 8 means 'Either empty or no Form Data.'<br />Error Code = 9 means 'Invalid json data.'<br />Error Code = 10 means 'No record found.'<br/>"
        },
		"Message": {
          "type": "string",
		  "description":"Message show as per error code"
        },
	   "Result": {
          "description": "Result value",
		  "allOf": [
            {
              "$ref": "#/definitions/ResultGetLateByEmployeeId"
            }
          ]
        }}
    },


	"ErrorForAddNewLate": {
      "type": "object",
      "properties": {
	  "IsError": {
          "type": "boolean",
		  "description":"isError = false means success and isError = true means error ",
		  "enum":[
		     "false",
			 "true"
		   ]
        },
        "Status": {
          "type": "integer",
          "minimum": 0,
          "maximum": 9,
		  "description":"<br />Error Code = 0 means 'Late record updated successfully.'<br />Error Code = 2 means 'Invalid API Key.'<br />Error Code = 5 means 'API key does not exists.' <br />Error Code = 4 means 'Action cannot be empty.' <br />Error Code = 4 means 'Invalid Action.' <br />Error Code = 5 means 'EmployeeId cannot be empty.'<br />Error code = 5 means 'EmployeeId contains more than 15 characters.'<br />Error Code = 5 means 'EmployeeId contains invalid data.' <br />Error Code = 5 means 'EmployeeId does not exists.' <br />Error Code = 5 means 'EmployeeId is missing.' <br/><br />Error Code = 5 means 'LateDate field contains invalid data.' <br />Error Code = 5 means 'LateDate field cannot be Empty.' <br />Error Code = 5 means 'LateDate is missing.' <br />Error Code = 5 means 'There is no late entry during the period requested.' <br/><br />Error Code = 5 means 'HowLate field contains invalid data.' <br />Error Code = 5 means 'HowLate field cannot be Empty.' <br />Error Code = 5 means 'HowLate is missing.' <br/><br />Error Code = 5 means 'Comments contains invalid data.' <br />Error Code = 5 means 'Comments contains more than 256 characters.' <br />Error Code = 5 means 'Comments cannot be Empty.'<br/><br />Error Code = 5 means 'Late date must be after employee start date.' <br/><br />Error Code = 5 means 'No access on late schema.'<br/><br />Error Code = 6 means 'Oops! Something went wrong.' <br/><br />Error Code = 7 means 'No json data found.'<br />Error Code = 8 means 'Either empty or no Form Data.'<br />Error Code = 9 means 'Invalid json data.'<br/>"



        },
		"Message": {
          "type": "string",
		  "description":"Message show as per error code"
        },
		"Result": { "type": "object", "description":"Can be ignored"

				}
      }
    },

	"ErrorForUpadteLate": {
      "type": "object",
      "properties": {
	  "IsError": {
          "type": "boolean",
		  "description":"isError = false means success and isError = true means error ",
		  "enum":[
		     "false",
			 "true"
		   ]
        },
        "Status": {
          "type": "integer",
          "minimum": 0,
          "maximum": 10,
		  "description":"<br />Error Code = 0 means 'Late record added successfully.'<br />Error Code = 2 means 'Invalid API Key.'<br />Error Code = 5 means 'API key does not exists.' <br />Error Code = 4 means 'Action cannot be empty.' <br />Error Code = 4 means 'Invalid Action.' <br/><br />Error Code = 5 means 'EmployeeId cannot be empty.'<br />Error code = 5 means 'EmployeeId contains more than 15 characters.'<br />Error Code = 5 means 'EmployeeId contains invalid data.' <br />Error Code = 5 means 'EmployeeId does not exists.' <br />Error Code = 5 means 'EmployeeId is missing.' <br/><br />Error Code = 5 means 'LateDate field contains invalid data.' <br />Error Code = 5 means 'LateDate field cannot be Empty.' <br />Error Code = 5 means 'LateDate is missing.' <br/><br />Error Code = 5 means 'HowLate field contains invalid data.' <br />Error Code = 5 means 'HowLate field cannot be Empty.' <br />Error Code = 5 means 'HowLate is missing.' <br/><br />Error Code = 5 means 'Comments contains invalid data.' <br />Error Code = 5 means 'Comments contains more than 256 characters.' <br />Error Code = 5 means 'Comments cannot be Empty.' <br/><br />Error Code = 5 means 'Late date must be after employee start date.' <br />Error Code = 5 means 'There is already has an existing late entry during the period requested.' <br/><br />Error Code = 5 means 'No access on late schema.'<br />Error Code = 6 means 'Oops! Something went wrong.' <br />Error Code = 7 means 'No json data found.'<br />Error Code = 8 means 'Either empty or no Form Data.'<br />Error Code = 9 means 'Invalid json data.'<br />Error Code = 10 means 'No record found.'<br/>"

        },
		"Message": {
          "type": "string",
		  "description":"Message show as per error code"
        },
		"Result": { "type": "object", "description":"Can be ignored"

				}
      }
    },
	  "ErrorFordeletelate": {
      "type": "object",
      "properties": {
	  "IsError": {
          "type": "boolean",
		  "description":"isError = false means success and isError = true means error ",
		  "enum":[
		     "false",
			 "true"
		   ]
        },
        "Status": {
          "type": "integer",
          "minimum": 0,
          "maximum": 10,
		  "description":"<br />Error Code = 0 means 'Late detail deleted successfully.'<br />Error Code = 2 means 'Invalid API Key.'<br />Error Code = 5 means 'API key does not exists.' <br />Error Code = 4 means 'Action cannot be empty.' <br />Error Code = 4 means 'Invalid Action.' <br />Error Code = 6 means 'Oops! Something went wrong.' <br />Error Code = 6 means 'Unknown error occured.' <br/><br />Error Code = 5 means 'EmployeeId cannot be empty.'<br />Error code = 5 means 'EmployeeId contains more than 15 characters.'<br />Error Code = 5 means 'EmployeeId contains invalid data.' <br />Error Code = 5 means 'EmployeeId does not exists.' <br />Error Code = 5 means 'EmployeeId is missing.' <br/><br />Error Code = 5 means 'LateDate field contains invalid data.' <br />Error Code = 5 means 'LateDate field cannot be Empty.' <br />Error Code = 5 means 'LateDate is missing.' <br/><br />Error Code = 5 means 'No access on late schema.'<br />Error Code = 7 means 'No json data found.'<br />Error Code = 8 means 'Either empty or no Form Data.'<br />Error Code = 9 means 'Invalid json data.'<br />Error Code = 10 means 'No record found.'<br/>"
        },
		"Message": {
          "type": "string",
		  "description":"Message show as per error code"
        },
		"Result": {

				  "type": "object",
				  "description":"Can be ignored"

				}
      }
    },

   	"ErrorForCheckDuplicateApplicant": {
      "type": "object",
      "properties": {
	  "IsError": {
          "type": "boolean",
		  "description":"isError = false means success and isError = true means error ",
		   "enum":[
		     "false",
			 "true"
		   ]
        },
        "Status": {
          "type": "integer",
          "minimum": 0,
          "maximum": 9,
		  "description":"<br />Error Code = 5 means 'Vacancy Reference not exist.'<br />Error Code = 2 means 'Invalid API Key.'<br />Error Code = 5 means 'API key does not exists.' <br />Error Code = 4 means 'Action cannot be empty.' <br />Error Code = 4 means 'Invalid Action.' <br/><br />Error Code = 5 means 'VacancyReference contains invalid data.' <br />Error Code = 5 means 'VacancyReference contains contains more than 100 characters.' <br />Error Code = 5 means 'VacancyReference is missing.' <br />Error Code = 5 means 'Vacancy Reference not exist.' <br/><br />Error Code = 5 means 'FirstName contains invalid data.' <br />Error Code = 5 means 'FirstName contains contains more than 50 characters.' <br />Error Code = 5 means 'FirstName cannot be empty.' <br />Error Code = 5 means 'FirstName is missing.' <br/><br />Error Code = 5 means 'LastName contains invalid data.' <br />Error Code = 5 means 'LastName contains contains more than 50 characters.' <br />Error Code = 5 means 'LastName cannot be empty.' <br />Error Code = 5 means 'LastName is missing.' <br/><br />Error Code = 5 means 'Email contains invalid data.' <br />Error Code = 5 means 'Email contains contains more than 320 characters.' <br />Error Code = 5 means 'No access on ATS schema.'<br/><br />Error Code = 6 means 'Oops! Something went wrong.' <br />Error Code = 6 means 'Unknown error occured.' <br/><br />Error Code = 7 means 'No json data found.'<br />Error Code = 8 means 'Either empty or no Form Data.'<br />Error Code = 9 means 'Invalid json data.'<br/>"

        },
		"Message": {
          "type": "string",
		  "description":"Message show as per error code"
        },
		"Result": {
          "description": "Result value",

		  "allOf": [
            {
              "$ref": "#/definitions/ResultCheckDuplicateApplicant"
            }
          ]

        }}
    },
	"ErrorForWorkPattern": {
      "type": "object",
      "properties": {
	  "IsError": {
          "type": "boolean",
		  "description":"isError = false means success and isError = true means error ",
		   "enum":[
		     "false",
			 "true"
		   ]
        },
        "Status": {
          "type": "integer",
          "minimum": 0,
          "maximum": 9,
		  "description":"<br />Error Code = 0 means 'The request processed successfully.'<br />Error Code = 0 means 'No Record Found.'<br />Error Code = 2 means 'Invalid API Key.'<br />Error Code = 5 means 'API key does not exists.' <br />Error Code = 4 means 'Action cannot be empty.' <br />Error Code = 4 means 'Invalid Action.' <br/><br />Error Code = 5 means 'WorkPatternName contains invalid data.' <br />Error Code = 5 means 'WorkPatternName contains contains more than 100 characters.' <br />Error Code = 5 means 'No access on employee schema.'<br />Error Code = 5 means 'Invalid Work Pattern Id.' <br/><br />Error Code = 6 means 'Oops! Something went wrong.' <br />Error Code = 6 means 'Unknown error occured.' <br />Error Code = 7 means 'No json data found.'<br />Error Code = 8 means 'Either empty or no Form Data.'<br />Error Code = 9 means 'Invalid json data.'<br/>"
        },
		"Message": {
          "type": "string",
		  "description":"Message show as per error code"
        },
		"Result": {
          "description": "Result value",
		  "allOf": [
            {
              "$ref": "#/definitions/ResultWorkPatternApplicant"
            }
          ]

        }}
    },

	"ErrorForEmployeeAppraisalGetEmployeeById": {
	  "type":"object",
      "properties": {
      "IsError": {
          "type": "boolean",
          "enum":[
		       "false",
		       "true"
		  ],
		  "description":"isError false means Success And isError true means Error"
        },
        "Status": {
          "type": "integer",
          "minimum": 0,
          "maximum": 10,
		  "description":" Error Code = 0 means 'The requested processed successfully.'<br />Error Code = 5 means 'API key does not exists.' <br />Error Code = 2 means 'Invalid API Key'<br />Error Code = 4 means 'Action cannot be empty'<br />Error Code = 4 means 'Invalid Action'<br />Error Code = 5 means 'EmployeeId does not exists'<br />Error Code = 5 means 'EmployeeId cannot be empty.'<br />Error Code = 5 means 'EmployeeId is missing.'<br />Error Code = 5 means 'EmployeeId contains invalid data.'<br />Error Code = 5 means 'EmployeeId contains more than 15 characters.'<br />Error Code = 5 means 'StartDate contains invalid data.'<br />Error Code = 5 means 'StartDate should be before or equal to EndDate'<br />Error Code = 5 means 'EndDate contains invalid data.'<br />Error Code = 7 means 'No json data found.' <br />Error Code = 8 means 'Either empty or no Form Data.'<br />Error Code = 9 means 'Invalid json data.'<br />Error Code = 10 means 'No detail has been found'<br/> "
        },
		"Message": {
          "type": "string",
		  "description":"Message As Per the Error code"
        },
		"Result": {
          "description": "Result value",
		  "allOf": [
            {
              "$ref": "#/definitions/GetEmployeeByIdArray"
            }
          ]
        }}
    },

	"ErrorForGetByAppraisalId": {
	  "type":"object",
      "properties": {
      "IsError": {
          "type": "boolean",
          "enum":[
		       "false",
		       "true"
		  ],
		  "description":"isError false means Success And isError true means Error"
        },
        "Status": {
          "type": "integer",
          "minimum": 0,
          "maximum": 10,
		  "description":" Error Code = 0 means 'The requested processed successfully.'<br />Error Code = 5 means 'API key does not exists.' <br />Error Code = 2 means 'Invalid API Key'<br />Error Code = 4 means 'Action cannot be empty'<br />Error Code = 4 means 'Invalid Action'<br />Error Code = 5 means 'EmployeeId does not exists'<br />Error Code = 5 means 'EmployeeId cannot be empty.'<br />Error Code = 5 means 'EmployeeId is missing.'<br />Error Code = 5 means 'EmployeeId contains invalid data.'<br />Error Code = 5 means 'EmployeeId contains more than 15 characters.'<br />Error Code = 5 means 'AppraisalId cannot be empty.'<br />Error Code = 5 means 'Appraisal Id is missing.' <br />Error Code = 5 means 'Appraisal Id is invalid.' <br />Error Code = 7 means 'No json data found.' <br />Error Code = 8 means 'Either empty or no Form Data.'<br />Error Code = 9 means 'Invalid json data.'<br />Error Code = 10 means 'No Record Found'<br/> "
        },

		"Message": {
          "type": "string",
		  "description":"Message As Per the Error code"
        },
		"Result": {
          "description": "Result value",
		  "allOf": [
            {
              "$ref": "#/definitions/ResultGetByAppraisalIdObject"
            }
          ]
        }}
    },

	"ErrorForAddNewAppraisal": {
	   "type":"object",
       "properties": {
	   "IsError": {
          "type": "boolean",
          "enum":[
		       "false",
		       "true"
		  ],
		  "description":"isError false means Success And isError true means Error"
        },
        "Status": {
          "type": "integer",
          "minimum": 0,
          "maximum": 10,
		  "description":" Error Code = 0 means 'Appraisal record added successfully.'<br /> Error Code = 5 means 'API key does not exists.' <br />Error Code = 2 means 'Invalid API Key'<br />Error Code = 4 means 'Action cannot be empty'<br />Error Code = 4 means 'Invalid Action'<br/><br /> Error Code = 5 means 'EmployeeId does not exists'<br />Error Code = 5 means 'EmployeeId contains invalid data.'<br />Error Code = 5 means 'EmployeeId contains more than 15 characters.'<br />Error Code = 5 means 'EmployeeId cannot be empty.'<br/><br /> Error Code = 5 means 'Reviewer email contains invalid data.'<br />Error Code = 5 means 'Reviewer email contains more than 254 characters.'<br />Error Code = 5 means 'Reviewer does not exists for this company.' <br/><br /> Error Code = 5 means 'Appraisal Review Date is missing.' <br />Error Code = 5 means 'Appraisal Review Date cannot be Empty.' <br />Error Code = 5 means 'Appraisal Review Date contains invalid data.' <br />Error Code = 5 means 'Reviewer is missing.' <br/><br /> Error Code = 5 means 'Notes contains invalid data.' <br />Error Code = 5 means 'Notes contains more than 1024 characters.' <br/><br /> Error Code = 5 means 'objectives  contains invalid data.' <br />Error Code = 5 means 'objectives contains more than 1024 characters.' <br/><br /> Error Code = 5 means 'ActionPlan contains invalid data.' <br />Error Code = 5 means 'ActionPlan contains more than 1024 characters.' <br/><br /> Error Code = 5 means 'Custom column with column name not exists.' <br />Error Code = 5 means 'Custom column name should not be empty.' <br />Error Code = 5 means 'ColumnName is missing'<br />Error Code = 5 means 'ColumnName column already addded.'<br />Error Code = 5 means 'ColumnName column does not exists on screen.'<br />Error Code = 5 means 'ColumnValue is missing'<br/><br />  Error Code = 5 means 'Custom column name contains more than 100 characters.'<br/><br /> Error Code = 5 means 'DocumentName is missing'<br />Error Code = 5 means 'File contains invalid data.'<br />Error Code = 5 means 'File is missing.'<br />Error Code = 5 means 'Invalid file type.File type is not supported.'<br/><br /> Error Code = 5 means 'Description contains invalid data.'<br />Error Code = 5 means 'Description contains more than 256 characters.'<br/><br /> Error Code = 5 means 'Document Category is missing.'<br />Error Code = 5 means 'DocumentName cannot be empty.'<br />Error Code = 5 means 'Document Category cannot be empty.'<br />Error Code = 5 means 'Document Category contains more than 100 characters.'<br />Error Code = 5 means 'Document Name contains more than 100 characters.'<br/><br /> Error Code = 5 means 'SignatureRequired Can only Contain True Or False.'<br />Error Code = 5 means 'SignatureRequired cannot be empty.'<br />Error Code = 5 means 'Signature Required is missing.'<br />Error Code = 5 means 'One or more mandatory fields are missing'<br/><br /> Error Code = 6 means 'Oops! Something went wrong.'<br />Error Code = 7 means 'No json data found.' <br />Error Code = 8 means 'Either empty or no Form Data.'<br />Error Code = 9 means 'Invalid json data.'<br />Error Code = 10 means'No record found.'<br />Error Code = 10 means 'No detail has been found.'<br />Error Code = 10 means 'No Json data found.'<br/>"
        },
		"Message": {
          "type": "string",
		  "description":"Message As Per the Error code"
        },
		 "Result": {
		 "type": "object",
          "description": "Can be ignored"}}
    },

   "ErrorForUpdateAppraisal":{
	  "type":"object",
      "properties": {
	      "IsError": {
          "type": "boolean",
          "enum":[
		       "false",
		       "true"
		  ],
		  "description":"isError false means Success And isError true means Error"
        },
        "Status": {
          "type": "integer",
          "minimum": 0,
          "maximum": 6,
		  "description":"Error Code = 0 means 'Appraisal record updated successfully.'<br />Error Code = 5 means 'API key does not exists.' <br />Error Code = 4 means 'Action cannot be empty.' <br />Error Code = 4 means 'Invalid Action'<br/><br /> Error Code = 5 means 'EmployeeId cannot be empty.' <br />Error Code = 5 means 'EmployeeId is missing.' <br />Error Code = 5 means 'EmployeeId contains invalid data.'<br />Error Code = 5 means 'EmployeeId contains more than 15 characters.'<br/><br /> Error Code = 5 means 'Description contains invalid data.'<br />Error Code = 5 means 'Description cannot be empty.'<br />Error Code = 5 means 'Description contains more than 256 characters.'<br/><br /> Error Code = 5 means 'Appraisal Id is missing.' <br />Error Code = 5 means 'Appraisal Id cannot be empty.' <br/><br /> Error Code = 5 means 'Appraisal Review Date is missing.' <br />Error Code = 5 means 'Appraisal Review Date cannot be Empty.' <br />Error Code = 5 means 'Appraisal Review Date contains invalid data.' <br/><br /> Error Code = 5 means 'Reviewer does not exists for this company.' <br />Error Code = 5 means 'Reviewer email contains invalid data.'<br />Error Code = 5 means 'Reviewer email contains more than 254 characters.'<br />Error Code = 5 means 'ColumnName is missing'<br />Error Code = 5 means 'ColumnName  does not exists on the screen.'<br/><br /> Error Code = 5 means 'Notes contains invalid data.' <br />Error Code = 5 means 'Notes cannot be empty.' <br />Error Code = 5 means 'Notes contains more than 1024 characters.' <br/><br /> Error Code = 5 means 'objectives  contains invalid data.' <br />Error Code = 5 means 'objectives cannot be empty.' <br />Error Code = 5 means 'objectives contains more than 1024 characters.' <br/><br /> Error Code = 5 means 'ActionPlan contains invalid data.' <br />Error Code = 5 means 'ActionPlan cannot be empty.' <br />Error Code = 5 means 'ActionPlan contains more than 1024 characters.' <br/><br /> Error Code = 5 means 'Custom column name should not be empty.' <br />Error Code = 5 means 'ColumnName is missing'<br />Error Code = 5 means 'Custom column name  already addded.'<br />Error Code = 5 means 'Custom column name  does not exists on screen.'<br/><br /> Error Code = 5 means 'ColumnValue is missing'<br />Error Code = 5 means 'Custom column name contains more than 100 characters.'<br/><br /> Error Code = 5 means 'DocumentName is missing'<br />Error Code = 5 means 'Document Category is missing.'<br />Error Code = 5 means 'DocumentName cannot be empty.'<br />Error Code = 5 means 'Document Category cannot be empty.'<br />Error Code = 5 means 'Document Category contains more than 100 characters.'<br />Error Code = 5 means 'Document Name contains more than 100 characters.'<br/><br /> Error Code = 5 means 'File contains invalid data.'<br />Error Code = 5 means 'File is missing.'<br />Error Code = 5 means 'File contains invalid data.' <br />Error Code = 5 means 'SignatureRequired Can only Contain True Or False.'<br />Error Code = 5 means 'SignatureRequired cannot be empty.'<br />Error Code = 5 means 'Signature Required is missing.'<br/><br /> Error Code = 6 means 'Oops! Something went wrong.' <br />Error Code = 6 means 'No record found.' <br />Error Code = 6 means 'Invalid json data.' <br />Error Code = 7 means 'No json data found.' <br />Error Code = 8 means 'Either empty or no Form Data.'<br />Error Code = 9 means 'Invalid json data.'<br />Error Code = 10 means 'No detail has been found.'<br/>"
        },

		"Message": {
          "type": "string",
		  "description":"Message As Per the Error code"
        },
		 "Result": {
		 "type": "object",
          "description": "Can be ignored"}
      }
    },

   "ErrorForDeleteAppraisal":{
	  "type":"object",
	  "properties": {
	    "IsError": {
          "type": "boolean",
          "enum":[
		       "false",
		       "true"
		  ],
		  "description":"isError false means Success And isError true means Error"
        },
        "Status": {
          "type": "integer",
          "minimum": 0,
          "maximum": 10,
		  "description":" Error Code = 0 means 'Appraisal record deleted successfully.'<br />Error Code = 5 means 'API key does not exists.' <br />Error Code = 4 means 'Action cannot be empty.' <br />Error Code = 4 means 'Invalid Action'<br/><br /> Error Code = 5 means 'EmployeeId cannot be empty.' <br />Error Code = 5 means 'EmployeeId contains invalid data.'<br />Error Code = 5 means 'EmployeeId contains more than 15 characters.'<br />Error Code = 5 means 'EmployeeId is missing.' <br/><br /> Error Code = 5 means 'Appraisal Id is missing.' <br />Error Code = 5 means 'Pending authorization request exists in system for passed appraisal id.' <br />Error Code = 5 means 'Appraisal id cannot be empty'<br />Error Code = 5 means 'Appraisal Id is invalid'<br/><br /> Error Code = 5 means 'EmployeeId does not exists'<br />Error Code = 6 means 'Oops! Something went wrong.'<br />Error Code = 7 means 'No json data found.' <br />Error Code = 8 means 'Either empty or no Form Data.'<br />Error Code = 9 means 'Invalid json data.'<br />Error Code = 10 means 'No record found.'<br />Error Code = 10 means 'No Json data found.'<br/> "
               },
		"Message": {
           "type": "string",
		   "description":"Message As Per the Error code"
        },
		 "Result": {
		 "type": "object",
          "description": "Can be ignored"}
      }
	 },

	"ErrorForAddNewDrivingLicense": {
      "type": "object",
      "properties": {
	  "IsError": {
          "type": "boolean",
		  "description":"isError = false means success and isError = true means error ",
		   "enum":[
		     "false",
			 "true"
		   ]
         },
		 "Status": {
          "type": "integer",
          "minimum": 0,
          "maximum": 9,
		  "description":"Error Code = 0 means 'Driving Licence record added successfully.'<br />Error Code = 2 means 'Invalid API Key.'<br />Error Code = 4 means 'Action cannot be empty.'<br />Error Code = 4 means 'Invalid Action.'<br />Error Code = 5 means 'API key does not exists.'<br />Error Code = 5 means 'EmployeeId contains invalid data.'<br />Error Code = 5 means 'EmployeeId contains more than 15 characters.'<br />Error Code = 5 means 'EmployeeId cannot be empty.'<br />Error Code = 5 means 'EmployeeId is missing.'<br />Error Code = 5 means 'EmployeeId does not exists.'<br />Error Code = 5 means 'License Number contains invalid data.'<br />Error Code = 5 means 'License Number contains more than 50 characters.'<br />Error Code = 5 means 'License Number is missing.'<br />Error Code = 5 means 'License Type contains invalid data.'<br />Error Code = 5 means 'License Type contains more than 100 characters.'<br />Error Code = 5 means 'Expiry Date field contains invalid data'<br />Error Code = 5 means 'Comments contains invalid data.'<br />Error Code = 5 means 'Comments contains more than 256 characters.'<br />Error Code = 5 means 'Custom column with name not exists'<br />Error Code = 5 means 'Custom column name should not be empty'<br />Error Code = 5 means 'ColumnName is missing.'<br />Error Code = 5 means 'ColumnValue is missing.'<br />Error Code = 5 means 'ColumnName contains invalid data'<br />Error Code = 5 means 'ColumnName contains more than characters.'<br />Error Code = 5 means 'ColumnName field contains invalid data'<br />Error Code = 5 means 'ColumnName is mandatory'<br />Error Code = 5 means 'CustomColumnName column already addded.'<br />Error Code = 5 means 'customColumnName column does not exists on screen'<br/><br />Error Code = 5 means 'Custom column name contains more than 100 characters.'<br/><br />Error Code = 5 means 'One or more mandatory fields are missing'<br />Error Code = 5 means 'File type is not supported'<br />Error Code = 5 means 'DocumentName cannot be empty.'<br />Error Code = 5 means 'DocumentName is missing.'<br />Error Code = 5 means 'File contains invalid data.'<br />Error Code = 5 means 'File is missing.'<br />Error Code = 5 means 'Comment contains invalid data.'<br />Error Code = 5 means 'Comment contains more than 1024 characters.'<br />Error Code = 5 means 'DocumentCategory contains invalid data.'<br />Error Code = 5 means 'DocumentCategory contains more than 100 characters.'<br />Error Code = 5 means 'DocumentCategory cannot be empty.'<br />Error Code = 5 means 'DocumentCategory is missing.'<br />Error Code = 5 means 'SignatureRequired Can only Contain True Or False.'<br />Error Code = 5 means 'SignatureRequired cannot be empty.'<br />Error Code = 6 means 'Unknown error occured.'<br />Error Code = 6 means 'Oops! Something went wrong.' <br />Error Code = 7 means 'No json data found.' <br />Error Code = 8 means 'Either empty or no Form Data.'<br />Error Code = 9 means 'Invalid json data.'<br/>"
        },

		"Message": {
          "type": "string",
		  "description":"Message show as per error code"
        },
	    "Result": {
		  "type": "object",
          "description": "Can be ignored"
        }

      }
    },

	"ErrorForUpdateDrivingLicense" :{
      "type": "object",
      "properties": {
	  "IsError": {
          "type": "boolean",
		  "description":"isError = false means success and isError = true means error ",
		   "enum":[
		     "false",
			 "true"
		   ]
         },
		 "Status": {
          "type": "integer",
          "minimum": 0,
          "maximum": 10,
		  "description":"Error Code = 0 means 'Driving Licence record updated successfully.'<br />Error Code = 2 means 'Invalid API Key.'<br />Error Code = 4 means 'Action cannot be empty.' <br />Error Code = 4 means 'Invalid Action.' <br />Error Code = 5 means 'API key does not exists.' <br />Error Code = 5 means 'EmployeeId contains invalid data.'<br />Error Code = 5 means 'EmployeeId contains more than 15 characters.'<br />Error Code = 5 means 'EmployeeId cannot be empty.'<br />Error Code = 5 means 'EmployeeId is missing.'<br />Error Code = 5 means 'EmployeeId does not exists.'<br />Error Code = 5 means 'No record found.'<br />Error Code = 5 means 'Pending authorization request exists in system for passed Driving id.'<br />Error Code = 5 means 'DrivingId is invalid'<br />Error Code = 5 means 'valid DrivingId Cannot be Empty'<br />Error Code = 5 means 'driving Id is missing.'<br />Error Code = 5 means 'License Number contains invalid data.'<br />Error Code = 5 means 'License Number contains more than 50 characters.'<br />Error Code = 5 means 'License Number is missing.'<br />Error Code = 5 means 'License Number is missing.'<br />Error Code = 5 means 'License Type contains invalid data.'<br />Error Code = 5 means 'License Type contains more than 100 characters.'<br />Error Code = 5 means 'Expiry Date field contains invalid data'<br />Error Code = 5 means 'Comments contains invalid data.'<br />Error Code = 5 means 'Comments contains more than 256 characters.'<br />Error Code = 5 means 'Custom column with name not exists'<br />Error Code = 5 means 'Custom column name should not be empty'<br />Error Code = 5 means 'ColumnName is missing.'<br />Error Code = 5 means 'ColumnValue is missing.'<br />Error Code = 5 means 'ColumnName contains invalid data'<br />Error Code = 5 means 'ColumnName contains more than characters.'<br />Error Code = 5 means 'ColumnName field contains invalid data'<br />Error Code = 5 means 'ColumnName is mandatory'<br />Error Code = 5 means 'CustomColumnName column already addded.'<br />Error Code = 5 means 'customColumnName column does not exists on screen'<br/><br />Error Code = 5 means 'Custom column name contains more than 100 characters.'<br/><br />Error Code = 5 means 'One or more mandatory fields are missing'<br />Error Code = 5 means 'File type is not supported'<br />Error Code = 5 means 'DocumentName cannot be empty.'<br />Error Code = 5 means 'DocumentName is missing.'<br />Error Code = 5 means 'File contains invalid data.'<br />Error Code = 5 means 'File is missing.'<br />Error Code = 5 means 'Comment contains invalid data.'<br />Error Code = 5 means 'Comment contains more than 1024 characters.'<br />Error Code = 5 means 'DocumentCategory contains invalid data.'<br />Error Code = 5 means 'DocumentCategory contains more than 100 characters.'<br />Error Code = 5 means 'DocumentCategory cannot be empty.'<br />Error Code = 5 means 'DocumentCategory is missing.'<br />Error Code = 5 means 'SignatureRequired Can only Contain True Or False.'<br />Error Code = 5 means 'SignatureRequired cannot be empty.'<br />Error Code = 6 means 'Oops! Something went wrong.' <br />Error Code = 6 means 'Unknown error occured.'<br />Error Code = 7 means 'No json data found.' <br />Error Code = 8 means 'Either empty or no Form Data.'<br />Error Code = 9 means 'Invalid json data.'<br />Error Code = 10 means 'No detail has been found.'<br/>"
        },

		"Message": {
          "type": "string",
		  "description":"Message show as per error code"
        },
	    "Result": {
		  "type": "object",
          "description": "Can be ignored"
        }

      }
    },

	"ErrorForGetDrivingLicenseByEmployeeId":{

      "type": "object",
      "properties": {
	  "IsError": {
          "type": "boolean",
		  "description":"isError = false means success and isError = true means error ",
		   "enum":[
		     "false",
			 "true"
		   ]
         },
		 "Status": {
          "type": "integer",
          "minimum": 0,
          "maximum": 10,
		  "description":
		                "Error Code = 0 means 'The request processed successfully.'<br />Error Code = 2 means 'Invalid API Key.'<br />Error Code = 4 means 'Action cannot be empty.' <br />Error Code = 4 means 'Invalid Action.' <br />Error Code = 5 means 'API key does not exists.' <br />Error Code = 5 means 'EmployeeId contains invalid data.'<br />Error Code = 5 means 'EmployeeId contains more than 15 characters.'<br />Error Code = 5 means 'EmployeeId cannot be empty.'<br />Error Code = 6 means 'Oops! Something went wrong.' <br />Error Code = 5 means 'EmployeeId does not exists.'<br />Error Code = 5 means 'EmployeeId is missing.'<br />Error Code = 7 means 'No json data found.' <br />Error Code = 8 means 'Either empty or no Form Data.'<br />Error Code = 9 means 'Invalid json data.'<br />Error Code = 10 means 'No detail has been found.'<br/>"
        },

		"Message": {
          "type": "string",
		  "description":"Message show as per error code"
        },
		"Result": {

    "description": "Result value",

    "allOf": [
            {
			  "$ref": "#/definitions/ResultForGetDrivingLicenseByEmployeeId"
            }
          ]
        }}
    },

	"ErrorForGetDrivingLicenseByDrivingId":{
      "type": "object",
      "properties": {
	  "IsError": {
          "type": "boolean",
		  "description":"isError = false means success and isError = true means error ",
		   "enum":[
		     "false",
			 "true"
		   ]
         },
	  "Status": {
          "type": "integer",
          "minimum": 0,
          "maximum": 10,
		  "description":
		                "Error Code = 0 means 'The request processed successfully.'<br />Error Code = 2 means 'Invalid API Key.'<br />Error Code = 4 means 'Action cannot be empty.' <br />Error Code = 4 means 'Invalid Action.' <br />Error Code = 5 means 'API key does not exists.' <br />Error Code = 5 means 'EmployeeId does not exists.'<br />Error Code = 5 means 'EmployeeId contains invalid data.'<br />Error Code = 5 means 'EmployeeId contains more than 15 characters.'<br />Error Code = 5 means 'EmployeeId cannot be empty.'<br />Error Code = 5 means 'EmployeeId is missing.'<br />Error Code = 5 means 'DrivingId is invalid'<br />Error Code = 5 means 'DrivingId cannot be empty.'<br />Error Code = 5 means 'Driving Id is missing.'<br />Error Code = 6 means 'Oops! Something went wrong.' <br />Error Code = 7 means 'No json data found.' <br />Error Code = 8 means 'Either empty or no Form Data.'<br />Error Code = 9 means 'Invalid json data.'<br />Error Code = 10 means 'No detail has been found.'<br/>"
        },
	  "Message": {
          "type": "string",
		  "description":"Message show as per error code"
        },
	  "Result": {

				"description": "Result value",

				"allOf": [
					{
					  "$ref": "#/definitions/ResultForGetDrivingLicenseByDrivingIdObject"
				    }
				]
        }}
    },

	"ErrorForDeleteDrivingLicense": {
      "type": "object",
      "properties": {
	  "IsError": {
          "type": "boolean",
		  "description":"isError = false means success and isError = true means error ",
		   "enum":[
		     "false",
			 "true"
		   ]
         },
		 "Status": {
          "type": "integer",
          "minimum": 0,
          "maximum": 10,
		  "description":"Error Code = 0 means 'Driving Licence record deleted successfully.'<br />Error Code = 2 means 'Invalid API Key.'<br />Error Code = 4 means 'Action cannot be empty.' <br />Error Code = 4 means 'Invalid Action.' <br />Error Code = 5 means 'API key does not exists.' <br />Error Code = 5 means 'EmployeeId does not exists.'<br />Error Code = 5 means 'EmployeeId contains invalid data.'<br />Error Code = 5 means 'EmployeeId contains more than 15 characters.'<br />Error Code = 5 means 'EmployeeId cannot be empty.'<br />Error Code = 5 means 'EmployeeId is missing.'<br />Error Code = 5 means 'DrivingId is invalid'<br />Error Code = 5 means 'DrivingId cannot be empty.'<br />Error Code = 5 means 'Driving Id is missing.'<br />Error Code = 6 means 'Oops! Something went wrong.' <br />Error Code = 7 means 'No json data found.' <br />Error Code = 8 means 'Either empty or no Form Data.'<br />Error Code = 9 means 'Invalid json data.'<br />Error Code = 10 means 'No detail has been found.'<br/>"
        },

		"Message": {
          "type": "string",
		  "description":"Message show as per error code"
        },
	    "Result": {
		  "type": "object",
          "description": "Can be ignored"
        }

      }
    },

	"ErrorForGetQualificationByEmployeeId":{
      "type": "object",
      "properties": {
	  "IsError": {
          "type": "boolean",
		  "description":"isError = false means success and isError = true means error ",
		   "enum":[
		     "false",
			 "true"
		   ]
        },
      "Status": {
          "type": "integer",
          "minimum": 0,
          "maximum": 10,
		  "description":"Error Code = 0 means 'The request processed successfully.'<br />Error Code = 2 means 'Invalid API Key.'<br />Error Code = 3 means 'Action is missing.' <br />Error Code = 4 means 'Action cannot be empty.' <br />Error Code = 4 means 'Invalid Action.' <br />Error Code = 5 means 'API key does not exists.' <br />Error Code = 5 means 'EmployeeId does not exists.'<br />Error Code = 5 means 'EmployeeId cannot be empty.'<br />Error code = 5 means 'EmployeeId contains more than 15 characters.'<br />Error Code = 5 means 'EmployeeId contains invalid data.' <br />Error Code = 5 means 'EmployeeId does not exists.' <br />Error Code = 5 means 'EmployeeId is missing.' <br />Error Code = 6 means 'Oops! Something went wrong.' <br />Error Code = 7 means 'No json data found.' <br />Error Code = 8 means 'Either empty or no Form Data.'<br />Error Code = 9 means 'Invalid json data.'<br />Error Code = 10 means 'No detail has been found.' <br/>"
        },
	  "Message": {
          "type": "string",
		  "description":"Message show as per error code"
        },
	  "Result": {
         "description": "Result value",
		 "allOf": [
				{
				  "$ref": "#/definitions/ResultForGetQualificationByEmployeeId"
				}
			  ]
        }}
    },

	"ErrorForGetQualificationByQualificationId":{
      "type": "object",
      "properties": {
	  "IsError": {
          "type": "boolean",
		  "description":"isError = false means success and isError = true means error ",
		   "enum":[
		     "false",
			 "true"
		   ]
        },
        "Status": {
          "type": "integer",
          "minimum": 0,
          "maximum": 10,
		  "description":"Error Code = 0 means 'The request processed successfully.'<br />Error Code = 2 means 'Invalid API Key.'<br />Error Code = 3 means 'Action is missing.' <br />Error Code = 4 means 'Action cannot be empty.' <br />Error Code = 4 means 'Invalid Action.' <br />Error Code = 5 means 'API key does not exists.' <br />Error Code = 5 means 'EmployeeId cannot be empty.'<br />Error code = 5 means 'EmployeeId contains more than 15 characters.'<br />Error Code = 5 means 'EmployeeId contains invalid data.' <br />Error Code = 5 means 'EmployeeId does not exists.' <br />Error Code = 5 means 'EmployeeId is missing.' <br />Error Code = 5 means 'QualificationId is invalid' <br />Error Code = 5 means 'QualificationId cannot be empty.' <br />Error Code = 5 means 'Qualification Id is missing.' <br />Error Code = 6 means 'Oops! Something went wrong.' <br />Error Code = 7 means 'No json data found.' <br />Error Code = 8 means 'Either empty or no Form Data.'<br />Error Code = 9 means 'Invalid json data.'<br />Error Code = 10 means 'No detail has been found.' <br/>"
        },
		"Message": {
          "type": "string",
		  "description":"Message show as per error code"
        },
		"Result": {

			"description": "Result value",

			"allOf": [
					{
					  "$ref": "#/definitions/ResultForGetQualificationByQualificationIdObject"
					}
				  ]
        }}
    },

	"ErrorForAddNewQualification": {
      "type": "object",
      "properties": {
	   "IsError": {
          "type": "boolean",
		  "description":"isError = false means success and isError = true means error ",
		   "enum":[
		     "false",
			 "true"
		   ]
        },
        "Status": {
          "type": "integer",
          "minimum": 0,
          "maximum": 9,
		  "description":"Error Code = 0 means 'qualification inserted successfully.'<br />Error Code = 2 means 'Invalid API Key.'<br />Error Code = 4 means 'Action cannot be empty.' <br />Error Code = 4 means 'Invalid Action.' <br />Error Code = 5 means 'API key does not exists.'<br />Error Code = 5 means 'EmployeeId is missing.'<br />Error Code = 5 means 'EmployeeId cannot be empty'.<br />Error Code = 5 means 'EmployeeId does not exists.'<br />Error Code = 5 means 'EmployeeId contains invalid data.'<br />Error Code = 5 means 'EmployeeId contains more than 15 characters'.<br />Error Code = 5 means 'Qualification contains invalid data.'<br />Error Code = 5 means 'Qualification contains more than 100 characters.'<br />Error Code = 5 means 'Qualification is missing.'<br />Error Code = 5 means 'Subject contains invalid data.'<br />Error Code = 5 means 'Subject contains more than 100 characters.'<br />Error Code = 5 means 'DatePassed field contains invalid data'<br />Error Code = 5 means 'Expiry Date field contains invalid data'<br />Error Code = 5 means 'Custom column name not exists'<br />Error Code = 5 means 'Custom column name should not be empty'<br />Error Code = 5 means 'Custom column name is missing.'<br />Error Code = 5 means 'Custom column name already addded.'<br />Error Code = 5 means 'Custom column name does not exists on screen'<br />Error Code = 5 means 'Column Value is missing.'<br />Error Code = 5 means 'Column Value contains invalid data'<br />Error Code = 5 means 'Column Value contains more than 100 characters.'<br />Error Code = 5 means 'Column Value field contains invalid data'<br />Error Code = 5 means 'Column Value is mandatory'<br/><br />Error Code = 5 means 'Custom column name contains more than 100 characters.'<br/><br />Error Code = 5 means 'One or more mandatory fields are missing'<br />Error Code = 5 means 'File type is not supported'<br />Error Code = 5 means 'DocumentName cannot be empty.'<br />Error Code = 5 means 'Document Name contains more than 100 characters.'<br />Error Code = 5 means 'DocumentName is missing.'<br />Error Code = 5 means 'File contains invalid data.'<br />Error Code = 5 means 'File is missing.'<br />Error Code = 5 means 'Comment contains invalid data.'<br />Error Code = 5 means 'Comment contains more than 256 characters.'<br />Error Code = 5 means 'DocumentCategory contains invalid data.'<br />Error Code = 5 means 'DocumentCategory contains more than 100 characters.'<br />Error Code = 5 means 'DocumentCategory cannot be empty.'<br />Error Code = 5 means 'DocumentCategory is missing.'<br />Error Code = 5 means 'SignatureRequired Can only Contain True Or False.'<br />Error Code = 5 means 'SignatureRequired cannot be empty.'<br />Error Code = 5 means 'Signature Required is missing.'<br />Error Code = 6 means 'Oops! Something went wrong.'<br />Error Code = 7 means 'No json data found.' <br />Error Code = 8 means 'Either empty or no Form Data.'<br />Error Code = 9 means 'Invalid json data.'<br/>"
        },
		"Message": {
          "type": "string",
		  "description":"Message show as per error code"
        },
		"Result": {
          "type": "object",
		  "description":"Can be ignored"
        }
      }
    },

	"ErrorForUpdateQualification": {
      "type": "object",
      "properties": {
	   "IsError": {
          "type": "boolean",
		  "description":"isError = false means success and isError = true means error ",
		   "enum":[
		     "false",
			 "true"
		   ]
        },
        "Status": {
          "type": "integer",
          "minimum": 0,
          "maximum": 9,
		  "description":"Error Code = 0 means 'Qualification record updated successfully.'<br />Error Code = 2 means 'Invalid API Key.'<br />Error Code = 4 means 'Action cannot be empty.' <br />Error Code = 4 means 'Invalid Action.' <br />Error Code = 5 means 'API key does not exists.'<br />Error Code = 5 means 'EmployeeId is missing.'<br />Error Code = 5 means 'EmployeeId cannot be empty'.<br />Error Code = 5 means 'EmployeeId does not exists.'<br />Error Code = 5 means 'EmployeeId contains invalid data.'<br />Error Code = 5 means 'EmployeeId contains more than 15 characters.'<br />Error Code = 5 means 'qualification Id is missing.'<br />Error Code = 5 means 'Pending authorization request exists in system for passed Qualification id.'<br />Error Code = 5 means 'QualificationId is invalid'<br />Error Code = 5 means 'valid QualificationId Cannot be Empty'<br />Error Code = 5 means 'Qualification contains invalid data.'<br />Error Code = 5 means 'Qualification contains more than 100 characters.'<br />Error Code = 5 means 'Qualification is missing.'<br />Error Code = 5 means 'Subject contains invalid data.'<br />Error Code = 5 means 'Subject contains more than 100 characters.'<br />Error Code = 5 means 'DatePassed field contains invalid data'<br />Error Code = 5 means 'Expiry Date field contains invalid data'<br />Error Code = 5 means 'Custom column name not exists'<br />Error Code = 5 means 'Custom column name should not be empty'<br />Error Code = 5 means 'Custom column name is missing.'<br />Error Code = 5 means 'Custom column name already addded.'<br />Error Code = 5 means 'Custom column name does not exists on screen'<br />Error Code = 5 means 'Column Value is missing.'<br />Error Code = 5 means 'Column Value contains invalid data'<br />Error Code = 5 means 'Column Value contains more than 100 characters.'<br />Error Code = 5 means 'Column Value field contains invalid data'<br />Error Code = 5 means 'Column Value is mandatory'<br/><br />Error Code = 5 means 'Custom column name contains more than 100 characters.'<br/><br />Error Code = 5 means 'One or more mandatory fields are missing'<br/><br />Error Code = 5 means 'File type is not supported'<br />Error Code = 5 means 'DocumentName cannot be empty.'<br />Error Code = 5 means 'Document Name contains more than 100 characters.'<br />Error Code = 5 means 'DocumentName is missing.'<br />Error Code = 5 means 'File contains invalid data.'<br />Error Code = 5 means 'File is missing.'<br />Error Code = 5 means 'Comment contains invalid data.'<br />Error Code = 5 means 'Comment contains more than 256 characters.'<br />Error Code = 5 means 'DocumentCategory contains invalid data.'<br />Error Code = 5 means 'DocumentCategory contains more than 100 characters.'<br />Error Code = 5 means 'DocumentCategory cannot be empty.'<br />Error Code = 5 means 'DocumentCategory is missing.'<br />Error Code = 5 means 'SignatureRequired Can only Contain True Or False.'<br />Error Code = 5 means 'SignatureRequired cannot be empty.'<br />Error Code = 5 means 'Signature Required is missing.'<br />Error Code = 6 means 'Oops! Something went wrong.'<br />Error Code = 6 means 'No record found.'<br />Error Code = 7 means 'No json data found.' <br />Error Code = 8 means 'Either empty or no Form Data.'<br />Error Code = 9 means 'Invalid json data.'<br/>"
        },
		"Message": {
          "type": "string",
		  "description":"Message show as per error code"
        },
		"Result": {
          "type": "object",
		  "description":"Can be ignored"
        }
      }
    },

   "ErrorForDeleteQualification": {
      "type": "object",
      "properties": {
	   "IsError": {
          "type": "boolean",
		  "description":"isError = false means success and isError = true means error ",
		   "enum":[
		     "false",
			 "true"
		   ]
        },
        "Status": {
          "type": "integer",
          "minimum": 0,
          "maximum": 9,
		  "description":"Error Code = 0 means 'Qualification record deleted successfully.'<br />Error Code = 2 means 'Invalid API Key.'<br />Error Code = 4 means 'Action cannot be empty.' <br />Error Code = 4 means 'Invalid Action.' <br />Error Code = 5 means 'API key does not exists.'<br />Error Code = 5 means 'EmployeeId is missing.'<br />Error Code = 5 means 'EmployeeId cannot be empty'.<br />Error Code = 5 means 'EmployeeId does not exists.'<br />Error Code = 5 means 'EmployeeId contains invalid data.'<br />Error Code = 5 means 'EmployeeId contains more than 15 characters'.<br />Error Code = 5 means 'Pending authorization request exists in system for passed Qualification id.'<br />Error Code = 5 means 'QualificationId is invalid'<br />Error Code = 5 means 'valid QualificationId Cannot be Empty'<br />Error Code = 5 means 'Qualification Id is missing.'<br />Error Code = 6 means 'No record found.'<br />Error Code = 7 means 'No json data found.' <br />Error Code = 8 means 'Either empty or no Form Data.'<br />Error Code = 9 means 'Invalid json data.'<br/>"
        },
		"Message": {
          "type": "string",
		  "description":"Message show as per error code"
        },
		"Result": {
          "type": "object",
		  "description":"Can be ignored"
        }
      }
    },

	"ErrorForGetTrainingDetail":{
      "type": "object",
      "properties": {
	  "IsError": {
          "type": "boolean",
		  "description":"isError = false means success and isError = true means error ",
		   "enum":[
		     "false",
			 "true"
		   ]
        },
        "Status": {
          "type": "integer",
          "minimum": 0,
          "maximum": 10,
		  "description":"Error Code = 0 means 'The request processed successfully.'<br />Error Code = 2 means 'Invalid API Key.'<br />Error Code = 3 means 'Action is missing.' <br />Error Code = 4 means 'Action cannot be empty.' <br />Error Code = 5 means 'API key does not exists.' <br />Error Code = 5 means 'EmployeeId cannot be empty.'<br />Error code = 5 means 'EmployeeId contains more than 15 characters.'<br />Error Code = 5 means 'EmployeeId contains invalid data.' <br />Error Code = 5 means 'EmployeeId does not exists.' <br />Error Code = 5 means 'EmployeeId is missing.' <br />Error Code = 6 means 'Oops! Something went wrong.' <br />Error Code = 7 means 'No json data found.' <br />Error Code = 8 means 'Either empty or no Form Data.'<br />Error Code = 9 means 'Invalid json data.'<br />Error Code = 10 means 'No detail has been found.'"


        },
		"Message": {
          "type": "string",
		  "description":"Message show as per error code"
        },
		"Result": {

    "description": "Result value",

    "allOf": [
            {
              "$ref": "#/definitions/ResultForGetTrainingDetail"
            }
          ]
        }}
    },

	"ErrorForAddTrainingDetail": {
      "type": "object",
      "properties": {
	  "IsError": {
          "type": "boolean",
		  "description":"isError = false means success and isError = true means error ",
		   "enum":[
		     "false",
			 "true"
		   ]
        },
        "Status": {
          "type": "integer",
          "minimum": 0,
          "maximum": 9,
		  "description":"Error Code = 0 means 'Training detail inserted successfully.'<br />Error Code = 2 means 'Invalid API Key.'<br />Error Code = 3 means 'Action is missing.' <br />Error Code = 4 means 'Action cannot be empty.' <br />Error Code = 5 means 'API key does not exists.' <br />Error Code = 5 means 'EmployeeId does not exists.'<br />Error Code = 5 means 'EmployeeId contains invalid data.'<br />Error Code = 5 means 'EmployeeId contains more than 15 characters.'<br />Error Code = 5 means 'EmployeeId cannot be empty.'<br />Error Code = 5 means 'EmployeeId is missing.'<br />Error Code = 5 means 'TrainingType contains invalid data.'<br />Error Code = 5 means 'TrainingType contains more than 100 characters.'<br />Error Code = 5 means 'TrainingType cannot be empty.'<br />Error Code = 5 means 'TrainingType is missing.'<br />Error Code = 5 means 'Description contains invalid data.'<br />Error Code = 5 means 'Description contains more than 512 characters.'<br />Error Code = 5 means 'Description cannot be empty.'<br />Error Code = 5 means 'Invalid!!!! Importance value 1 : Mandatory and 2 : Optional'<br />Error Code = 5 means 'Importance contains invalid data.'<br />Error Code = 5 means 'Importance cannot be empty.'<br />Error Code = 5 means 'Importance field value is missing.'<br />Error Code = 5 means 'Status detail is not valid'<br />Error Code = 5 means 'Status contains invalid data.'<br />Error Code = 5 means 'Status cannot be empty.'<br />Error Code = 5 means 'Status field value is missing.'<br />Error Code = 5 means 'InProgress values should be multiple of 10 and less than 100'<br />Error Code = 5 means 'InProgress contains invalid data.'<br />Error Code = 5 means 'InProgress cannot be empty.'<br />Error Code = 5 means 'TrainingDate field contains invalid data'<br />Error Code = 5 means 'TrainindEndDate field contains invalid data'<br />Error Code = 5 means 'TrainingExpiryDate field contains invalid data'<br />Error Code = 5 means 'Cost contains invalid data.'<br />Error Code = 5 means 'Provider contains invalid data.'<br />Error Code = 5 means 'Provider contains more than 256 characters.'<br />Error Code = 5 means 'Note contains invalid data.'<br />Error Code = 5 means 'Note contains more than 256 characters.'<br />Error Code = 5 means 'Custom column with name not exists'<br />Error Code = 5 means 'Custom column name should not be empty'<br />Error Code = 5 means 'ColumnName is missing.'<br />Error Code = 5 means 'ColumnValue is missing.'<br />Error Code = 5 means 'ColumnName contains invalid data'<br />Error Code = 5 means 'ColumnName contains more than characters.'<br />Error Code = 5 means 'ColumnName field contains invalid data'<br />Error Code = 5 means 'ColumnName is mandatory'<br />Error Code = 5 means 'CustomColumnName  already addded.'<br />Error Code = 5 means 'customColumnName  does not exists on screen'<br/><br />Error Code = 5 means 'Custom column name contains more than 100 characters.'<br/><br />Error Code = 5 means 'One or more mandatory fields are missing'<br />Error Code = 5 means 'One or more custom fields are mandatory'<br />Error Code = 5 means 'File type is not supported'<br />Error Code = 5 means 'DocumentName cannot be empty.'<br />Error Code = 5 means 'DocumentName is missing.'<br />Error Code = 5 means 'File contains invalid data.'<br />Error Code = 5 means 'File is missing.'<br />Error Code = 5 means 'Comment contains invalid data.'<br />Error Code = 5 means 'Comment contains more than 1024 characters.'<br />Error Code = 5 means 'DocumentCategory contains invalid data.'<br />Error Code = 5 means 'DocumentCategory contains more than 100 characters.'<br />Error Code = 5 means 'DocumentCategory cannot be empty.'<br />Error Code = 5 means 'DocumentCategory is missing.'<br />Error Code = 5 means 'SignatureRequired Can only Contain True Or False.'<br />Error Code = 5 means 'SignatureRequired cannot be empty.'<br />Error Code = 6 means 'Unknown error occured.'<br />Error Code = 6 means 'Oops! Something went wrong.' <br />Error Code = 7 means 'No json data found.' <br />Error Code = 8 means 'Either empty or no Form Data.'<br />Error Code = 9 means 'Invalid json data.'<br/>"
        },
		"Message": {
          "type": "string",
		  "description":"Message show as per error code"
        },
		"Result": {
          "type": "object",
		  "description":"Can be ignored"
        }
      }
    },

	"ErrorForUpdateTrainingDetail":{
      "type": "object",
      "properties": {
	  "IsError": {
          "type": "boolean",
		  "description":"isError = false means success and isError = true means error ",
		   "enum":[
		     "false",
			 "true"
		   ]
        },
        "Status": {
          "type": "integer",
          "minimum": 0,
          "maximum": 9,
		  "description":"Error Code = 0 means 'Training detail updated successfully.'<br />Error Code = 2 means 'Invalid API Key.'<br />Error Code = 3 means 'Action is missing.' <br />Error Code = 4 means 'Action cannot be empty.' <br />Error Code = 4 means 'Invalid Action.' <br />Error Code = 5 means 'API key does not exists.' <br />Error Code = 5 means 'EmployeeId cannot be empty.'<br />Error code = 5 means 'EmployeeId contains more than 15 characters.'<br />Error Code = 5 means 'EmployeeId contains invalid data.' <br />Error Code = 5 means 'EmployeeId does not exists.' <br />Error Code = 5 means 'EmployeeId is missing.' <br />Error Code = 5 means 'Pending authorization request exists in system for passed vehicle id.'<br />Error Code = 5 means 'TrainingDetailId is invalid'<br />Error Code = 5 means 'TrainingDetailId Cannot be Empty'<br />Error Code = 5 means 'Training Id is missing.'<br />Error Code = 5 means 'TrainingType contains invalid data.'<br />Error Code = 5 means 'TrainingType cannot be empty.'<br />Error Code = 5 means 'Description contains invalid data.'<br />Error Code = 5 means 'Description contains more than 512 characters.'<br />Error Code = 5 means 'Description cannot be empty.'<br />Error Code = 5 means 'Invalid!!!! Importance value 1 : Mandatory and 2 : Optional '<br />Error Code = 5 means 'Importance contains invalid data.'<br />Error Code = 5 means 'Importance cannot be empty.'<br />Error Code = 5 means 'Status detail is not valid'<br />Error Code = 5 means 'Status contains invalid data'<br />Error Code = 5 means 'Status cannot be empty.'<br />Error Code = 5 means 'TrainingDate field contains invalid data'<br />Error Code = 5 means 'TrainindEndDate field contains invalid data'<br />Error Code = 5 means 'TrainingExpiryDate field contains invalid data'<br />Error Code = 5 means 'Progress values should be multiple of 10 and less than 100 .'<br />Error Code = 5 means 'Progress contains invalid data.'<br />Error Code = 5 means 'Progress cannot be empty.'<br />Error Code = 5 means 'Cost contains invalid data.'<br />Error Code = 5 means 'Provider contains invalid data.'<br />Error Code = 5 means 'Provider contains more than 256 characters.'<br />Error Code = 5 means 'Note contains invalid data.'<br />Error Code = 5 means 'Note contains more than 256 characters.'<br />Error Code = 5 means 'Custom column with name not exists'<br />Error Code = 5 means 'Custom column name should not be empty'<br />Error Code = 5 means 'ColumnName is missing.'<br />Error Code = 5 means 'ColumnValue is missing.'<br />Error Code = 5 means 'ColumnName contains invalid data'<br />Error Code = 5 means 'ColumnName contains more than characters.'<br />Error Code = 5 means 'ColumnName field contains invalid data'<br />Error Code = 5 means 'ColumnName is mandatory'<br />Error Code = 5 means 'CustomColumnName column already addded.'<br />Error Code = 5 means 'customColumnName column does not exists on screen'<br/><br />Error Code = 5 means 'Custom column name contains more than 100 characters.'<br/><br />Error Code = 5 means 'One or more mandatory fields are missing'<br />Error Code = 5 means 'One or more custom fields are mandatory'<br />Error Code = 5 means 'File type is not supported'<br />Error Code = 5 means 'DocumentName cannot be empty.'<br />Error Code = 5 means 'DocumentName is missing.'<br />Error Code = 5 means 'File contains invalid data.'<br />Error Code = 5 means 'File is missing.'<br />Error Code = 5 means 'Comment contains invalid data.'<br />Error Code = 5 means 'Comment contains more than 1024 characters.'<br />Error Code = 5 means 'DocumentCategory contains invalid data.'<br />Error Code = 5 means 'DocumentCategory contains more than 100 characters.'<br />Error Code = 5 means 'DocumentCategory cannot be empty.'<br />Error Code = 5 means 'DocumentCategory is missing.'<br />Error Code = 5 means 'SignatureRequired Can only Contain True Or False.'<br />Error Code = 5 means 'SignatureRequired cannot be empty.'<br />Error Code = 6 means 'Unknown error occured.'<br />Error Code = 6 means 'Oops! Something went wrong.' <br />Error Code = 6 means 'No record found.'<br />Error Code = 7 means 'No json data found.' <br />Error Code = 8 means 'Either empty or no Form Data.'<br />Error Code = 9 means 'Invalid json data.'<br/>"
        },
		"Message": {
          "type": "string",
		  "description":"Message show as per error code"
        },
		"Result": {
          "type": "object",
		  "description":"Can be ignored"
        }
      }
    },

   "ErrorFordeletetrainingdetail": {
      "type": "object",
      "properties": {
	   "IsError": {
          "type": "boolean",
		  "description":"isError = false means success and isError = true means error ",
		   "enum":[
		     "false",
			 "true"
		   ]
        },
        "Status": {
          "type": "integer",
          "minimum": 0,
          "maximum": 9,
		  "description":"Error Code = 0 means 'Training detail deleted successfully.'<br />Error Code = 2 means 'Invalid API Key.'<br />Error Code = 4 means 'Action cannot be empty.' <br />Error Code = 4 means 'Invalid Action.' <br />Error Code = 5 means 'API key does not exists.'<br />Error Code = 5 means 'EmployeeId is missing.'<br />Error Code = 5 means 'EmployeeId cannot be empty'.<br />Error Code = 5 means 'EmployeeId does not exists.'<br />Error Code = 5 means 'EmployeeId contains invalid data.'<br />Error Code = 5 means 'EmployeeId contains more than 15 characters'.<br />Error Code = 5 means 'Pending authorization request exists in system for passed vehicle id.'<br />Error Code = 5 means 'TrainingDetailId is invalid'<br />Error Code = 5 means 'TrainingDetailId Cannot be Empty'<br />Error Code = 6 means 'No record found.'<br />Error Code = 7 means 'No json data found.' <br />Error Code = 8 means 'Either empty or no Form Data.'<br />Error Code = 9 means 'Invalid json data.'<br/>"
        },
		"Message": {
          "type": "string",
		  "description":"Message show as per error code"
        },
		"Result": {
          "type": "object",
		  "description":"Can be ignored"
        }
      }
    },

	"ErrorForAddNewVehicleDetail": {
        "type": "object",
	    "properties": {
		   "IsError": {
			  "type": "boolean",
			  "enum":[
				   "false",
				   "true"
			  ],
			  "description":"isError false means Success And isError true means Error"
			},
		  "Status": {
				  "type": "integer",
				  "minimum": 0,
				  "maximum": 9,
				  "description":"Error Code = 0 means 'Vehicle record added successfully'\n<br /> Error Code = 2 means 'Invalid API Key.'<br /> Error Code = 5 means 'API key does not exists.' <br /> Error Code = 4 means 'Action cannot be empty.' <br /> Error Code = 4 means 'Invalid Action.' <br /> Error Code = 5 means 'EmployeeId does not exists.' <br /> Error Code = 5 means 'EmployeeId contains invalid data.' <br /> Error Code = 5 means 'EmployeeId contains more than 15 characters.' <br /> Error Code = 5 means 'EmployeeId cannot be empty.' <br /> Error Code = 5 means 'EmployeeId is missing.' <br />Error Code = 5 means 'Registration is missing.' <br /> Error Code = 5 means 'Registration cannot be empty.' <br /> Error Code = 5 means 'Registration contains invalid data.' <br /> Error Code = 5 means 'Registration contains more than 100 characters.' <br />Error Code = 5 means 'Make contains invalid data.' <br /> Error Code = 5 means 'Make contains more than 100 characters.' <br />Error Code = 5 means 'Model contains invalid data.' <br /> Error Code = 5 means 'Model contains more than 100 characters.' <br />Error Code = 5 means 'Colour contains invalid data.' <br /> Error Code = 5 means 'Colour contains more than 50 characters.' <br />Error Code = 5 means 'EngineSize contains invalid data.' <br /> Error Code = 5 means 'EngineSize contains more than 50 characters.' <br />Error Code = 5 means 'FuelType contains invalid data.' <br /> Error Code = 5 means 'FuelType contains more than 50 characters.' <br />Error Code = 5 means 'InsuranceCompany contains invalid data.' <br /> Error Code = 5 means 'InsuranceCompany contains more than 100 characters.' <br />Error Code = 5 means 'PolicyNumber contains invalid data.' <br /> Error Code = 5 means 'PolicyNumber contains more than 100 characters.' <br />Error Code = 5 means 'MOTExpiryDate field contains invalid data.' <br />Error Code = 5 means 'InsuranceExpiryDate field contains invalid data.' <br /> Error Code = 5 means 'InsuranceExpiryDate field cannot be empty.' <br />Error Code = 5 means 'Comments contains invalid data.' <br /> Error Code = 5 means 'Comments contains more than 256 characters.' <br />Error Code = 5 means 'Custom column name not exists.' <br /> Error Code = 5 means 'Custom column name should not be empty.' <br /> Error Code = 5 means 'ColumnName is missing.' <br /> Error Code = 5 means 'ColumnValue is missing.' <br /> Error Code = 5 means 'Custom  column name contains invalid data.' <br /> Error Code = 5 means 'Custom column already added.' <br /> Error Code = 5 means 'Custom column does not exists on screen.' <br />Error Code = 5 means 'Custom column name contains more than 100 characters.'<br />Error Code = 5 means 'One or more mandatory fields are missing.' <br /> Error Code = 5 means 'One or more custom fields are mandatory.' <br />Error Code = 5 means 'Invalid file type. This file type is not supported.' <br /> Error Code = 5 means 'DocumentName cannot be empty.' <br /> Error Code = 5 means 'Document Name contains more than 100 characters.' <br /> Error Code = 5 means 'Document Name is missing.' <br />Error Code = 5 means 'File contains invalid data.' <br /> Error Code = 5 means 'File is missing.' <br />Error Code = 5 means 'Description contains invalid data.' <br /> Error Code = 5 means 'Description contains more than 256 characters.' <br />Error Code = 5 means 'Document Category is missing.' <br /> Error Code = 5 means 'Document Category contains invalid data.' <br /> Error Code = 5 means 'Document Category contains more than 100 characters.' <br /> Error Code = 5 means 'Document Category cannot be empty.' <br />Error Code = 5 means 'Signature Required is missing.' <br /> Error Code = 5 means 'SignatureRequired cannot be empty.' <br /> Error Code = 5 means 'SignatureRequired Can only Contain True Or False.' <br />Error Code = 6 means 'Oops! Something went wrong.'<br /> Error Code = 6 means 'No record found.' <br /> Error Code = 7 means 'No json data found.' <br /> Error Code = 8 means 'Either empty or no Form Data.'<br /> Error Code = 9 means 'Invalid json data.'<br/>"


			},
		 "Message": {
			  "type": "string",
			  "description":"Message As Per the Error code"
           },
		 "Result": {
          "type": "object",
		  "description":"Can be ignored"
        }

      }
    },

	"ErrorForUpdateVehicleDetail": {
        "type": "object",
	    "properties": {
		   "IsError": {
			  "type": "boolean",
			  "enum":[
				   "false",
				   "true"
			  ],
			  "description":"isError false means Success And isError true means Error"
			},
		  "Status": {
				  "type": "integer",
				  "minimum": 0,
				  "maximum": 9,
				  "description":"Error Code = 0 means 'Vehicle record updated successfully.'\n<br /> Error Code = 2 means 'Invalid API Key.'<br /> Error Code = 5 means 'API key does not exists.' <br /> Error Code = 4 means 'Action cannot be empty.' <br /> Error Code = 4 means 'Invalid Action.' <br />Error Code = 5 means 'EmployeeId does not exists.' <br /> Error Code = 5 means 'EmployeeId contains invalid data.' <br /> Error Code = 5 means 'EmployeeId contains more than 15 characters.' <br /> Error Code = 5 means 'EmployeeId cannot be empty.' <br /> Error Code = 5 means 'EmployeeId is missing.' <br />Error Code = 5 means 'Registration is missing.' <br /> Error Code = 5 means 'Registration cannot be empty.' <br /> Error Code = 5 means 'Registration contains invalid data.' <br /> Error Code = 5 means 'Registration contains more than 100 characters.' <br />Error Code = 5 means 'Make contains invalid data.' <br /> Error Code = 5 means 'Make contains more than 100 characters.' <br />Error Code = 5 means 'Model contains invalid data.' <br /> Error Code = 5 means 'Model contains more than 100 characters.' <br />Error Code = 5 means 'Colour contains invalid data.' <br /> Error Code = 5 means 'Colour contains more than 50 characters.' <br />Error Code = 5 means 'EngineSize contains invalid data.' <br /> Error Code = 5 means 'EngineSize contains more than 50 characters.' <br />Error Code = 5 means 'FuelType contains invalid data.' <br /> Error Code = 5 means 'FuelType contains more than 50 characters.' <br />Error Code = 5 means 'InsuranceCompany contains invalid data.' <br /> Error Code = 5 means 'InsuranceCompany contains more than 100 characters.' <br />Error Code = 5 means 'PolicyNumber contains invalid data.' <br /> Error Code = 5 means 'PolicyNumber contains more than 100 characters.' <br />Error Code = 5 means 'MOTExpiryDate field contains invalid data.' <br />Error Code = 5 means 'InsuranceExpiryDate field contains invalid data.' <br /> Error Code = 5 means 'InsuranceExpiryDate field cannot be empty.' <br />Error Code = 5 means 'Comments contains invalid data.' <br /> Error Code = 5 means 'Comments contains more than 256 characters.' <br />Error Code = 5 means 'This Custom column name not exists.' <br /> Error Code = 5 means 'Custom column name should not be empty.' <br /> Error Code = 5 means 'ColumnName is missing.' <br /> Error Code = 5 means 'ColumnValue is missing.' <br /> Error Code = 5 means 'Custom column name contains invalid data.' <br /> Error Code = 5 means 'Custom column already added.' <br /> Error Code = 5 means 'Custom column does not exists on screen.' <br /> Error Code = 5 means 'One or more mandatory fields are missing.' <br /> Error Code = 5 means 'One or more custom fields are mandatory.' <br />Error Code = 5 means 'Custom column name contains more than 100 characters.'<br />Error Code = 5 means 'Invalid file type. This file type is not supported.' <br /> Error Code = 5 means 'DocumentName cannot be empty.' <br /> Error Code = 5 means 'Document Name contains more than 100 characters.' <br /> Error Code = 5 means 'Document Name is missing.' <br />Error Code = 5 means 'File contains invalid data.' <br /> Error Code = 5 means 'File is missing.' <br />Error Code = 5 means 'Description contains invalid data.' <br /> Error Code = 5 means 'Description contains more than 256 characters.' <br />Error Code = 5 means 'Document Category is missing.' <br /> Error Code = 5 means 'Document Category contains invalid data.' <br /> Error Code = 5 means 'Document Category contains more than 100 characters.' <br /> Error Code = 5 means 'Document Category cannot be empty.' <br />Error Code = 5 means 'Signature Required is missing.' <br /> Error Code = 5 means 'SignatureRequired cannot be empty.' <br /> Error Code = 5 means 'SignatureRequired Can only Contain True Or False.' <br />Error Code = 6 means 'Oops! Something went wrong.'<br /> Error Code = 6 means 'No record found.' <br /> Error Code = 7 means 'No json data found.' <br /> Error Code = 8 means 'Either empty or no Form Data.'<br />Error Code = 9 means 'Invalid json data.'<br/>"


			},
		 "Message": {
			  "type": "string",
			  "description":"Message As Per the Error code"
           },
		 "Result": {
          "type": "object",
		  "description":"Can be ignored"
        }

      }
    },
	"ErrorForDeleteVehicleDetail": {
        "type": "object",
	    "properties": {
		   "IsError": {
			  "type": "boolean",
			  "enum":[
				   "false",
				   "true"
			  ],
			  "description":"isError false means Success And isError true means Error"
			},
		  "Status": {
				  "type": "integer",
				  "minimum": 0,
				  "maximum": 9,
				  "description":"Error Code = 0 means 'Vehicle record deleted  successfully.'\n<br /> Error Code = 2 means 'Invalid API Key.'<br /> Error Code = 5 means 'API key does not exists.' <br /> Error Code = 4 means 'Action cannot be empty.' <br /> Error Code = 4 means 'Invalid Action.' <br />Error Code = 5 means 'EmployeeId does not exists.' <br /> Error Code = 5 means 'EmployeeId contains invalid data.' <br /> Error Code = 5 means 'EmployeeId contains more than 15 characters.' <br /> Error Code = 5 means 'EmployeeId cannot be empty.' <br /> Error Code = 5 means 'EmployeeId is missing.' <br /> Error Code = 5 means 'Vehicle Id can not be empty.' <br /> Error Code = 5 means 'Vehicle Id is invalid.' <br /> Error Code = 5 means 'Pending authorization request exists in system for passed vehicle id.' <br /> Error Code = 6 means 'No record found.' <br /> Error Code = 7 means 'No json data found.' <br /> Error Code = 8 means 'Either empty or no Form Data.'<br />Error Code = 9 means 'Invalid json data.'<br/>"

			},
		 "Message": {
			  "type": "string",
			  "description":"Message As Per the Error code"
           },
		 "Result": {
          "type": "object",
		  "description":"Can be ignored"
        }

      }
    },

	"ErrorForGetVehicleDetailByVehicleId": {
        "type": "object",
	    "properties": {
		   "IsError": {
			  "type": "boolean",
			  "enum":[
				   "false",
				   "true"
			  ],
			  "description":"isError false means Success And isError true means Error"
			},
		  "Status": {
				  "type": "integer",
				  "minimum": 0,
				  "maximum": 10,
				  "description":"Error Code = 0 means 'The request processed successfully.'\n<br /> Error Code = 2 means 'Invalid API Key.'<br /> Error Code = 5 means 'API key does not exists.' <br /> Error Code = 4 means 'Action cannot be empty.' <br /> Error Code = 4 means 'Invalid Action.' <br />Error Code = 5 means 'EmployeeId does not exists.' <br /> Error Code = 5 means 'EmployeeId contains invalid data.' <br /> Error Code = 5 means 'EmployeeId contains more than 15 characters.' <br /> Error Code = 5 means 'EmployeeId cannot be empty.' <br /> Error Code = 5 means 'EmployeeId is missing.' <br />Error Code = 5 means 'Vehicle Id can not be empty.' <br /> Error Code = 5 means 'Vehicle Id is invalid.' <br />Error Code = 5 means 'Vehicle Id is missing.' <br />Error Code = 7 means 'No json data found.' <br /> Error Code = 8 means 'Either empty or no Form Data.'<br />       Error Code = 9 means 'Invalid json data.'<br /> Error Code = 10 means 'No detail has been found.' <br/>"


			},
		 "Message": {
			  "type": "string",
			  "description":"Message As Per the Error code"
           },
		 "Result": {
          "description": "Result value",

		  "allOf": [
            {
              "$ref": "#/definitions/ResultGetVehicleDetailByVehicleIdObject"
            }
          ]

        }

      }
    },


	"ErrorForGetVehicleDetailByEmployeeId": {
        "type": "object",
	    "properties": {
		   "IsError": {
			  "type": "boolean",
			  "enum":[
				   "false",
				   "true"
			  ],
			  "description":"isError false means Success And isError true means Error"
			},
		  "Status": {
				  "type": "integer",
				  "minimum": 0,
				  "maximum": 9,
				  "description":"Error Code = 0 means 'The request processed successfully.'\n<br /> Error Code = 2 means 'Invalid API Key.'<br /> Error Code = 5 means 'API key does not exists.' <br /> Error Code = 4 means 'Action cannot be empty.' <br /> Error Code = 4 means 'Invalid Action.' <br />Error Code = 5 means 'EmployeeId does not exists.' <br /> Error Code = 5 means 'EmployeeId contains invalid data.' <br /> Error Code = 5 means 'EmployeeId contains more than 15 characters.' <br /> Error Code = 5 means 'EmployeeId cannot be empty.' <br /> Error Code = 5 means 'EmployeeId is missing.' <br />Error Code = 5 means 'No json data found.' <br /> Error Code = 7 means 'No json data found.' <br /> Error Code = 8 means 'Either empty or no Form Data.'<br />       Error Code = 9 means 'Invalid json data.'<br/>"


			},
		 "Message": {
			  "type": "string",
			  "description":"Message As Per the Error code"
           },
		 "Result": {
          "description": "Result value",

		  "allOf": [
            {
              "$ref": "#/definitions/ResultGetVehicleDetailByEmployeeIdArray"
            }
          ]

        }

      }
    },

	"ErrorForGetByMaternityPaternityId": {
     "type": "object",
     "properties": {
	    "IsError": {
          "type": "boolean",
		  "description":"isError = false means success and isError = true means error ",
		   "enum":[
		     "false",
			 "true"
		   ]
        },
        "Status": {
          "type": "integer",
          "minimum": 0,
          "maximum": 10,
		  "description":"Error Code = 0 means 'The request processed successfully.'<br />Error Code = 2 means 'Invalid API Key.'<br />Error Code = 5 means 'API key does not exists.' <br />Error Code = 4 means 'Action cannot be empty.' <br />Error Code = 4 means 'Invalid Action.' <br />Error Code = 5 means 'EmployeeId cannot be empty.'<br />Error code = 5 means 'EmployeeId contains more than 15 characters.'<br />Error Code = 5 means 'EmployeeId contains invalid data.' <br />Error Code = 5 means 'EmployeeId does not exists.' <br />Error Code = 5 means 'EmployeeId is missing.' <br />Error Code = 5 means 'MaternityPaternityTxnId is missing.' <br />Error Code = 5 means 'MaternityPaternityTxnId cannot be empty.' <br />Error Code = 5 means 'MaternityPaternityTxnId contains invalid data.' <br />Error Code = 5 means 'No access on late schema.' <br />Error Code = 7 means 'No json data found.' <br />Error Code = 8 means 'Either empty or no Form Data.'<br />Error Code = 9 means 'Invalid json data.'<br />Error Code = 10 means 'No detail has been found.'"
        },
		"Message": {
          "type": "string",
		  "description":"Message show as per error code"
        },
		"Result": {
          "description": "Result value",

		  "allOf": [
            {
              "$ref": "#/definitions/ResultForGetByMaternityPaternityId"
            }
          ]

        }}
    },

	"ErrorForGetByMaternityPaternityByEmpId": {
     "type": "object",
     "properties": {
	    "IsError": {
          "type": "boolean",
		  "description":"isError = false means success and isError = true means error ",
		   "enum":[
		     "false",
			 "true"
		   ]
        },
        "Status": {
          "type": "integer",
          "minimum": 0,
          "maximum": 10,
		  "description":"Error Code = 0 means 'The request processed successfully.'<br />Error Code = 2 means 'Invalid API Key.'<br />Error Code = 5 means 'API key does not exists.' <br />Error Code = 4 means 'Action cannot be empty.' <br />Error Code = 4 means 'Invalid Action.' <br />Error Code = 5 means 'EmployeeId cannot be empty.'<br />Error code = 5 means 'EmployeeId contains more than 15 characters.'<br />Error Code = 5 means 'EmployeeId contains invalid data.' <br />Error Code = 5 means 'EmployeeId does not exists.' <br />Error Code = 5 means 'EmployeeId is missing.' <br />Error Code = 5 means 'ActualStartDate field contains invalid data' <br />Error Code = 5 means 'Actual Start Date contains invalid data.' <br />Error Code = 5 means 'ActualEndDate field contains invalid data' <br />Error Code = 5 means 'Actual End Date must be later than or equal to actual start date.' <br />Error Code = 5 means 'Actual End Date contains invalid data.' <br />Error Code = 5 means 'No access on late schema.' <br />Error Code = 7 means 'No json data found.' <br />Error Code = 8 means 'Either empty or no Form Data.'<br />Error Code = 9 means 'Invalid json data.'<br />Error Code = 10 means 'No detail has been found.'"
        },
		"Message": {
          "type": "string",
		  "description":"Message show as per error code"
        },
		"Result": {
          "description": "Result value",

		  "allOf": [
            {
              "$ref": "#/definitions/ResultForGetByMaternityPaternityId"
            }
          ]

        }}
    },
	"ErrorForAddNewMaternityPaternityApi":{
      "type":"object",
      "properties": {
	    "IsError": {
          "type": "boolean",
          "enum":[
		       "false",
		       "true"
		  ],
		  "description":"isError false means Success And isError true means Error"
        },

        "Status": {
          "type": "integer",
          "minimum": 0,
          "maximum": 10,
		  "description":"Error Code = 0 means 'Maternity Paternity record added successfully.'<br/><br />Error Code = 2 means 'Invalid API Key.'<br />Error Code = 4 means 'Invalid Action'<br />Error Code = 4 means 'Action cannot be empty'<br/><br />Error Code = 5 means 'API key does not exists' .<br/><br />Error Code = 5 means 'EmployeeId is missing.' <br />Error Code = 5 means 'EmployeeId does not exists..' <br />Error Code = 5 means 'EmployeeId contains invalid data.' <br />Error Code = 5 means 'EmployeeId contains more than 15 characters.' <br />Error Code = 5 means 'EmployeeId cannot be empty.' <br/><br />Error Code = 5 means 'DueDate contains invalid data.' <br />Error Code = 5 means 'DueDate is missing.' <br />Error Code = 5 means 'DueDate cannot be empty.' <br/><br />Error Code = 5 means 'Actual Start Date contains invalid data.' <br />Error Code = 5 means 'Actual end date must be later than or equal to actual start date .' <br />Error Code = 5 means 'Actual End Date contains invalid data.' <br />Error Code = 5 means 'Actual Start Date must be after employee start date.' <br />Error Code = 5 means 'There is already has an existing maternity paternity record during the period requested.' <br />Error Code = 5 means 'Maternity Paternity is too far into the future.' <br />Error Code = 5 means 'comments  contains invalid data.' <br />Error Code = 5 means 'comments contains more than 1024 characters' <br/><br />Error Code = 5 means 'Document Name contains more than 100 characters.' <br />Error Code = 5 means 'DocumentName is missing.' <br/><br />Error Code = 5 means 'Description contains invalid data.'<br />Error Code = 5 means 'Description contains more than 256 characters.'<br/><br />Error Code = 5 means 'File contains invalid data.' <br />Error Code = 5 means 'File is missing.' <br />Error Code = 5 means 'Invalid file type.File type is not supported.'<br/><br />Error Code = 6 means 'Oops! Something went wrong.' <br />Error Code = 5 means 'No access on late schema.'<br />Error Code = 5 means 'No json data found.'<br />Error Code = 8 means 'Either empty or no Form Data.'<br />Error Code = 9 means 'Invalid json data.'<br />Error Code = 10 means 'No detail has been found.'<br/>"

        },

		"Message": {
          "type": "string",
		  "description":"Message As Per the Error code"
        },

		 "Result": {
		 "type": "object",
          "description": "Result Value",
         	 "allOf": [
            {
              "$ref": "#/definitions/ResultMaternityPaternityTxnIdObject"
            }
          ]

        }}
    },
	 "ResultMaternityPaternityTxnIdObject": {
      "description": " Result Array",
      "type": "object",
        "properties": {
          "MaternityPaternityTxnId": {
            "description": "Maternity paternity txn id value",
            "type": "integer",
              "example":340
          }
        }
      },

	 "ErrorForUpdateMaternityPaternityApi":{
	    "type":"object",
	    "properties": {
	    "IsError": {
          "type": "boolean",
          "enum":[
		       "false",
		       "true"
		  ],
		  "description":"isError false means Success And isError true means Error"
        },

        "Status": {
          "type": "integer",
          "minimum": 0,
          "maximum": 10,
		  "description":"Error Code = 0 means 'Maternity Paternity record updated successfully.'<br/><br />Error Code = 2 means 'Invalid API Key.'<br />Error Code = 4 means  'Invalid Action'<br />Error Code = 4 means  'Action cannot be empty'<br/><br />Error Code = 5 means 'API key does not exists' .<br/><br />Error Code = 5 means 'EmployeeId is missing.' <br />Error Code = 5 means 'EmployeeId does not exists..' <br />Error Code = 5 means 'EmployeeId contains invalid data.' <br />Error Code = 5 means 'EmployeeId contains more than 15 characters.' <br />Error Code = 5 means 'EmployeeId cannot be empty.' <br/><br />Error Code = 5 means 'DueDate contains invalid data.' <br />Error Code = 5 means 'DueDate is missing.' <br />Error Code = 5 means 'DueDate cannot be empty.' <br/><br />Error Code = 5 means 'Actual Start Date contains invalid data.' <br />Error Code = 5 means 'Actual end date must be later than or equal to actual start date .' <br />Error Code = 5 means 'Actual End Date contains invalid data.' <br />Error Code = 5 means 'Actual Start Date must be after employee start date.' <br />Error Code = 5 means 'There is already has an existing maternity paternity record during the period requested.' <br />Error Code = 5 means 'Maternity Paternity is too far into the future.' <br />Error Code = 5 means 'comments  contains invalid data.' <br />Error Code = 5 means 'comments contains more than 1024 characters' <br/><br />Error Code = 5 means 'Document Name contains more than 100 characters.' <br />Error Code = 5 means 'DocumentName is missing.' <br/><br />Error Code = 5 means 'Description contains invalid data.'<br />Error Code = 5 means 'Description contains more than 256 characters.'<br/><br />Error Code = 5 means 'File contains invalid data.' <br />Error Code = 5 means 'File is missing.' <br />Error Code = 5 means 'Invalid file type.File type is not supported.'<br/><br />Error Code = 5 means 'Maternity Paternity TxnId is missing.' <br />Error Code = 5 means 'MaternityPaternity Id can not be empty.' <br />Error Code = 5 means 'MaternityPaternity Id is invalid.' <br/><br />Error Code = 6 means 'Oops! Something went wrong.' <br />Error Code = 5 means 'No access on late schema.'<br />Error Code = 5 means 'No json data found.'<br />Error Code = 6 means 'Invalid json data.' <br />Error Code = 7 means 'No json data found.' <br />Error Code = 8 means 'Either empty or no Form Data.'<br />Error Code = 9 means 'Invalid json data.'<br />Error Code = 10 means 'No detail has been found.'<br/> "
        },

		"Message": {
          "type": "string",
		  "description":"Message As Per the Error code"
        },

		 "Result": {
		  "type": "object",
          "description": "Can be ignored"}
      }
	 },

	  "ErrorForDeleteMaternityPaternity":{
	    "type":"object",
	    "properties": {
	    "IsError": {
          "type": "boolean",
          "enum":[
		       "false",
		       "true"
		  ],
		  "description":"isError false means Success And isError true means Error"
        },

        "status": {
          "type": "integer",
          "minimum": 0,
          "maximum": 9,
		  "description":"Error Code = 0 means 'Maternity/Paternity detail deleted successfully.'<br/><br />Error Code = 2 means 'Invalid API Key.'<br />Error Code = 4 means 'Invalid Action'<br />Error Code = 4 means 'Action cannot be empty'<br/><br />Error Code = 5 means 'API key does not exists' .<br />Error Code = 5 means 'EmployeeId is missing.' <br />Error Code = 5 means 'EmployeeId does not exists..' <br />Error Code = 5 means 'EmployeeId contains invalid data.' <br />Error Code = 5 means 'EmployeeId contains more than 15 characters.' <br />Error Code = 5 means 'EmployeeId cannot be empty.' <br />Error Code = 5 means 'Maternity Paternity TxnId is missing.' <br />Error Code = 5 means 'Maternity Paternity Id is invalid.' <br />Error Code = 5 means 'MaternityPaternity Id can not be empty.' <br />Error Code = 6 means 'Oops! Something went wrong.' <br />Error Code = 6 means 'No record found.'<br />Error Code = 5 means 'No json data found.'<br />Error Code = 8 means 'Either empty or no Form Data.'<br />Error Code = 9 means 'Invalid json data.'<br/> "

        },
		"Message": {
          "type": "string",
		  "description":"Message As Per the Error code"
        },
		 "Result": {
		  "type": "object",
          "description": "Can be ignored"}
      }
	 },

	 "ErrorForGetProjectTimesheetDetail": {
      "type": "object",
      "properties": {
	    "IsError": {
          "type": "boolean",
		  "description":"isError = false means success and isError = true means error ",
		   "enum":[
		     "false",
			 "true"
		   ]
        },
        "Status": {
          "type": "integer",
          "minimum": 0,
          "maximum": 10,
		  "description":"Error Code = 0 means 'The requested processed successfully.'<br />Error Code = 2 means 'Invalid API Key.'<br />Error Code = 5 means 'API key does not exists.' <br />Error Code = 4 means 'Action cannot be empty.' <br />Error Code = 4 means 'Invalid Action.' <br />Error Code = 5 means 'EmployeeId cannot be empty.'<br />Error code = 5 means 'EmployeeId contains more than 15 characters.'<br />Error Code = 5 means 'EmployeeId contains invalid data.' <br />Error Code = 5 means 'EmployeeId does not exists.' <br />Error Code = 5 means 'EmployeeId is missing.' <br />Error Code = 5 means 'StartDate contains invalid data.' <br />Error Code = 5 means 'EndDate contains invalid data.' <br />Error Code = 5 means 'StartDate should be before or equal to EndDate' <br />Error Code = 5 means 'No access on Timesheet schema.' <br />Error Code = 7 means 'No json data found.' <br />Error Code = 8 means 'Either empty or no Form Data.'<br />Error Code = 9 means 'Invalid json data.'<br />Error Code = 10 means 'No record found.'"
        },
		"Message": {
          "type": "string",
		  "description":"Message show as per error code"
        },
		"Result": {
          "description": "Result value",

		  "allOf": [
            {
              "$ref": "#/definitions/ResultForGetProjectTimesheetDetail"
            }
          ]

        }}
    },

	"ErrorForGetProjectTimesheetByTransactionId": {
      "type": "object",
      "properties": {
	    "IsError": {
          "type": "boolean",
		  "description":"isError = false means success and isError = true means error ",
		   "enum":[
		     "false",
			 "true"
		   ]
        },
        "Status": {
          "type": "integer",
          "minimum": 0,
          "maximum": 10,
		  "description":"Error Code = 0 means 'The requested processed successfully.'<br />Error Code = 2 means 'Invalid API Key.'<br />Error Code = 5 means 'API key does not exists.' <br />Error Code = 4 means 'Action cannot be empty.' <br />Error Code = 4 means 'Invalid Action.' <br />Error Code = 5 means 'EmployeeId cannot be empty.'<br />Error code = 5 means 'EmployeeId contains more than 15 characters.'<br />Error Code = 5 means 'EmployeeId contains invalid data.' <br />Error Code = 5 means 'EmployeeId does not exists.' <br />Error Code = 5 means 'EmployeeId is missing.' <br />Error Code = 5 means 'TransactionId cannot be empty.'<br />Error Code = 5 means 'TransactionId is invalid.' <br />Error Code = 5 means 'TransactionId is missing.' <br />Error Code = 5 means 'No access on Timesheet schema.' <br />Error Code = 7 means 'No json data found.' <br />Error Code = 8 means 'Either empty or no Form Data.'<br />Error Code = 9 means 'Invalid json data.'<br />Error Code = 10 means 'No record found.'"
        },
		"Message": {
          "type": "string",
		  "description":"Message show as per error code"
        },
		"Result": {
          "description": "Result value",

		  "allOf": [
            {
              "$ref": "#/definitions/ResultGetProjectTimesheetByTransactionIdObject"
            }
          ]

        }}
    },

	 "ErrorForCreateProjectTimesheet": {
     "type": "object",
     "properties": {
	    "IsError": {
          "type": "boolean",
		  "description":"isError = false means success and isError = true means error ",
		   "enum":[
		     "false",
			 "true"
		   ]
        },
        "Status": {
          "type": "integer",
          "minimum": 0,
          "maximum": 10,
		  "description":"Error Code = 0 means 'ProjectTimesheet record inserted successfully.'<br />Error Code = 2 means 'Invalid API Key.'<br />Error Code = 5 means 'API key does not exists.' <br />Error Code = 4 means 'Action cannot be empty.' <br />Error Code = 4 means 'Invalid Action.' <br />Error Code = 5 means 'EmployeeId cannot be empty.'<br />Error code = 5 means 'EmployeeId contains more than 15 characters.'<br />Error Code = 5 means 'EmployeeId contains invalid data.' <br />Error Code = 5 means 'EmployeeId does not exists.' <br />Error Code = 5 means 'EmployeeId is missing.' <br />Error Code = 5 means 'ProjectTimesheetDate contains invalid data.'<br />Error Code = 5 means 'ProjectTimesheetDate cannot be empty.'<br />Error Code = 5 means 'TimesheetProject cannot be empty.'<br />Error Code = 5 means 'TimesheetProject contains more than 100 characters.'<br />Error Code = 5 means 'TimesheetProject contains invalid data.'<br />Error Code = 5 means 'TimesheetTask contains more than 100 characters.'<br />Error Code = 5 means 'TimesheetTask contains invalid data.'<br />Error Code = 5 means 'TimesheetDetail contains more than 100 characters.'<br />Error Code = 5 means 'TimesheetDetail contains invalid data.'<br />Error Code = 5 means 'TimesheetProject and TimesheetTask are mandatory, if TimesheetDetail is entered.'<br />Error Code = 5 means 'TimesheetProject is mandatory.'<br />Error Code = 5 means 'TimesheetTask is mandatory, as TimesheetDetail has been entered.'<br />Error Code = 5 means 'StartTime cannot be empty.'<br />Error Code = 5 means 'StartTime contains invalid data.'<br />Error Code = 5 means 'EndTime cannot be empty.'<br />Error Code = 5 means 'EndTime contains invalid data.'<br />Error Code = 5 means 'Timesheet EndTime is mandatory, as StartTime has been entered.'<br />Error Code = 5 means 'Timesheet StartTime is mandatory, as EndTime has been entered.'<br />Error Code = 5 means 'Timesheet StartTime cannot be later than EndTime.'<br />Error Code = 5 means 'TotalHours cannot be empty.'<br />Error Code = 5 means 'TotalHours should be in HH:MM format.'<br />Error Code = 5 means 'Please ensure TotalHours matches Start and End times.'<br />Error Code = 5 means 'Quantity cannot be empty.'<br />Error Code = 5 means 'Quantity contains invalid data.'<br />Error Code = 5 means 'Either of a) StartTime and EndTime  b) TotalHours or c) Quantity is mandatory.'<br />Error Code = 5 means 'Notes contains invalid data.'<br />Error Code = 5 means 'Notes contains more than 1024 characters.'<br />Error Code = 5 means 'No access on Timesheet schema.' <br />Error Code = 7 means 'No json data found.' <br />Error Code = 8 means 'Either empty or no Form Data.'<br />Error Code = 9 means 'Invalid json data.'<br />Error Code = 10 means 'No record found.'"
        },
		"Message": {
          "type": "string",
		  "description":"Message show as per error code"
        },
		"Result": {
          "description": "Result value",
		   "allOf": [
            {
              "$ref": "#/definitions/ResultForCreateProjectTimesheet"
            }
          ]
        }}
    },

	 "ErrorForUpdateProjectTimesheet": {
     "type": "object",
     "properties": {
	    "IsError": {
          "type": "boolean",
		  "description":"isError = false means success and isError = true means error ",
		   "enum":[
		     "false",
			 "true"
		   ]
        },
        "Status": {
          "type": "integer",
          "minimum": 0,
          "maximum": 10,
		  "description":"Error Code = 0 means 'ProjectTimesheet record updated successfully.'<br />Error Code = 2 means 'Invalid API Key.'<br />Error Code = 5 means 'API key does not exists.' <br />Error Code = 4 means 'Action cannot be empty.' <br />Error Code = 4 means 'Invalid Action.' <br />Error Code = 5 means 'EmployeeId cannot be empty.'<br />Error code = 5 means 'EmployeeId contains more than 15 characters.'<br />Error Code = 5 means 'EmployeeId contains invalid data.' <br />Error Code = 5 means 'EmployeeId does not exists.' <br />Error Code = 5 means 'EmployeeId is missing.' <br />Error Code = 5 means 'TransactionId is missing.'<br />Error Code = 5 means 'TransactionId is invalid.' <br />Error Code = 5 means 'TransactionId cannot be empty.' <br />Error Code = 10 means 'No records found.' <br />Error Code = 5 means 'TimesheetProject cannot be empty.'<br />Error Code = 5 means 'TimesheetProject contains more than 100 characters.'<br />Error Code = 5 means 'TimesheetProject contains invalid data.'<br />Error Code = 5 means 'TimesheetTask contains more than 100 characters.'<br />Error Code = 5 means 'TimesheetTask contains invalid data.'<br />Error Code = 5 means 'TimesheetDetail contains more than 100 characters.'<br />Error Code = 5 means 'TimesheetDetail contains invalid data.'<br />Error Code = 5 means 'TimesheetProject and TimesheetTask are mandatory, if TimesheetDetail is entered.'<br />Error Code = 5 means 'TimesheetProject is mandatory.'<br />Error Code = 5 means 'TimesheetTask is mandatory, as TimesheetDetail has been entered.'<br />Error Code = 5 means 'StartTime cannot be empty.'<br />Error Code = 5 means 'StartTime contains invalid data.'<br />Error Code = 5 means 'EndTime cannot be empty.'<br />Error Code = 5 means 'EndTime contains invalid data.'<br />Error Code = 5 means 'Timesheet EndTime is mandatory, as StartTime has been entered.'<br />Error Code = 5 means 'Timesheet StartTime is mandatory, as EndTime has been entered.'<br />Error Code = 5 means 'Timesheet StartTime cannot be later than EndTime.'<br />Error Code = 5 means 'TotalHours cannot be empty.'<br />Error Code = 5 means 'TotalHours should be in HH:MM format.'<br />Error Code = 5 means 'Please ensure TotalHours matches Start and End times.'<br />Error Code = 5 means 'Quantity cannot be empty.'<br />Error Code = 5 means 'Quantity contains invalid data.'<br />Error Code = 5 means 'Either of a) StartTime and EndTime  b) TotalHours or c) Quantity is mandatory.'<br />Error Code = 5 means 'Notes contains invalid data.'<br />Error Code = 5 means 'Notes contains more than 1024 characters.'<br />Error Code = 5 means 'No access on Timesheet schema.' <br />Error Code = 7 means 'No json data found.' <br />Error Code = 8 means 'Either empty or no Form Data.'<br />Error Code = 9 means 'Invalid json data.'<br />Error Code = 10 means 'No record found.'"
        },
		"Message": {
          "type": "string",
		  "description":"Message show as per error code"
        },
		"Result": {
          "type": "object",
		  "description":"Can be ignored"
        }
      }
    },

    "ErrorForDeleteProjectTimesheet": {
      "type": "object",
      "properties": {
	    "IsError": {
          "type": "boolean",
		  "description":"isError = false means success and isError = true means error ",
		   "enum":[
		     "false",
			 "true"
		   ]
        },
        "Status": {
          "type": "integer",
          "minimum": 0,
          "maximum": 10,
		  "description":"Error Code = 0 means 'ProjectTimesheet record deleted successfully.'<br />Error Code = 2 means 'Invalid API Key.'<br />Error Code = 5 means 'API key does not exists.' <br />Error Code = 4 means 'Action cannot be empty.' <br />Error Code = 4 means 'Invalid Action.' <br />Error Code = 5 means 'EmployeeId cannot be empty.'<br />Error code = 5 means 'EmployeeId contains more than 15 characters.'<br />Error Code = 5 means 'EmployeeId contains invalid data.' <br />Error Code = 5 means 'EmployeeId does not exists.' <br />Error Code = 5 means 'EmployeeId is missing.' <br />Error Code = 5 means 'TransactionId cannot be empty.'<br />Error Code = 5 means 'TransactionId is invalid.' <br />Error Code = 5 means 'TransactionId is missing.' <br />Error Code = 5 means 'No access on Timesheet schema.' <br />Error Code = 7 means 'No json data found.' <br />Error Code = 8 means 'Either empty or no Form Data.'<br />Error Code = 9 means 'Invalid json data.'<br />Error Code = 10 means 'No records found.' <br />"
        },
		"Message": {
          "type": "string",
		  "description":"Message show as per error code"
        },
		"Result": {
          "type": "object",
		  "description":"Can be ignored"
        }
      }
    },

	"ErrorForGetAllTimesheetProject": {
      "type": "object",
      "properties": {
	    "IsError": {
          "type": "boolean",
		  "description":"isError = false means success and isError = true means error ",
		   "enum":[
		     "false",
			 "true"
		   ]
        },
        "Status": {
          "type": "integer",
          "minimum": 0,
          "maximum": 10,
		  "description":"Error Code = 0 means 'The requested processed successfully.'<br />Error Code = 2 means 'Invalid API Key.'<br />Error Code = 5 means 'API key does not exists.' <br />Error Code = 4 means 'Action cannot be empty.' <br />Error Code = 4 means 'Invalid Action.' <br />Error code = 5 means 'Project Name contains more than 100 characters.'<br />Error Code = 5 means 'Project Name contains invalid data.' <br />Error Code = 5 means 'No access on Timesheet schema.' <br />Error Code = 7 means 'No json data found.' <br />Error Code = 8 means 'Either empty or no Form Data.'<br />Error Code = 9 means 'Invalid json data.'<br />Error Code = 10 means 'No record found.'"
        },
		"Message": {
          "type": "string",
		  "description":"Message show as per error code"
        },
		"Result": {
          "description": "Result value",

		  "allOf": [
            {
              "$ref": "#/definitions/ResultForGetAllTimesheetProjectObject"
            }
          ]

        }}
    },

    "ErrorForAddNewProject": {
     "type": "object",
     "properties": {
	    "IsError": {
          "type": "boolean",
		  "description":"isError = false means success and isError = true means error ",
		   "enum":[
		     "false",
			 "true"
		   ]
        },
        "Status": {
          "type": "integer",
          "minimum": 0,
          "maximum": 10,
		  "description":"Error Code = 0 means 'Assignment Project added successfully.'<br/><br />Error Code = 0 means 'The Project code you have entered matches an existing Project code.'<br />Error Code = 2 means 'Invalid API Key.'<br />Error Code = 5 means 'API key does not exists.' <br />Error Code = 4 means 'Action cannot be empty.' <br />Error Code = 4 means 'Invalid Action.' <br />Error Code = 5 means 'Project Name contains invalid data.'<br />Error code = 5 means 'Project Name contains more than 100 characters.'<br />Error Code = 5 means 'Project Name cannot be empty.' <br />Error Code = 5 means 'Project Name is Empty.' <br />Error Code = 5 means 'Project Name is missing.' <br />Error Code = 5 means 'In Use Can only Contain Yes Or No.'<br />Error Code = 5 means 'In Use cannot be empty.'<br />Error Code = 5 means 'No access on Timesheet schema.'<br />Error Code = 6 means 'Oops! Something went wrong.'<br />Error Code = 7 means 'No json data found.' <br />Error Code = 8 means 'Either empty or no Form Data.'<br />Error Code = 9 means 'Invalid json data.'<br />Error Code = 10 means 'No records found'"
        },
		"Message": {
          "type": "string",
		  "description":"Message show as per error code"
        },
		"Result": {
          "type": "object",
		  "description":"Can be ignored"
        }
      }
    },

    "ErrorForEditProject": {
     "type": "object",
     "properties": {
	    "IsError": {
          "type": "boolean",
		  "description":"isError = false means success and isError = true means error ",
		   "enum":[
		     "false",
			 "true"
		   ]
        },
        "Status": {
          "type": "integer",
          "minimum": 0,
          "maximum": 10,
		  "description":"Error Code = 0 means 'Assignment Project updated successfully.'<br/><br />Error Code = 0 means 'The Project code you have entered matches an existing Project code.'<br />Error Code = 2 means 'Invalid API Key.'<br />Error Code = 5 means 'API key does not exists.' <br />Error Code = 4 means 'Action cannot be empty.' <br />Error Code = 4 means 'Invalid Action.' <br />Error Code = 5 means 'Project Name contains invalid data.'<br />Error code = 5 means 'Project Name contains more than 100 characters.'<br />Error Code = 5 means 'Project Name cannot be empty.' <br />Error Code = 5 means 'The Project Name you have entered not matches an existing Project code.'<br />Error Code = 5 means 'Project Name is Empty.' <br />Error Code = 5 means 'Project Name is missing.' <br />Error Code = 5 means 'New Project Name contains invalid data.'<br />Error code = 5 means 'New Project Name contains more than 100 characters.'<br />Error Code = 5 means 'New Project Name cannot be empty.' <br />Error Code = 5 means 'New Project Name is Empty.' <br />Error Code = 5 means 'In Use Can only Contain Yes Or No.'<br />Error Code = 5 means 'In Use cannot be empty.'<br />Error Code = 5 means 'Mention atleast one field to Update.'<br />Error Code = 5 means 'Oops! Something went wrong.'<br />Error Code = 5 means 'No access on Timesheet schema.'<br />Error Code = 7 means 'No json data found.' <br />Error Code = 8 means 'Either empty or no Form Data.'<br />Error Code = 9 means 'Invalid json data.'<br />Error Code = 10 means 'No records found'"
        },
		"Message": {
          "type": "string",
		  "description":"Message show as per error code"
        },
		"Result": {
          "type": "object",
		  "description":"Can be ignored"
        }
      }
    },

	"ErrorForGetAllProjectTask": {
     "type": "object",
     "properties": {
	    "IsError": {
          "type": "boolean",
		  "description":"isError = false means success and isError = true means error ",
		   "enum":[
		     "false",
			 "true"
		   ]
        },
        "Status": {
          "type": "integer",
          "minimum": 0,
          "maximum": 9,
		  "description":"Error Code = 0 means 'The request processed successfully.'<br/><br />Error Code = 0 means 'No record found.'<br />Error Code = 2 means 'Invalid API Key.'<br />Error Code = 5 means 'API key does not exists.' <br />Error Code = 4 means 'Action cannot be empty.' <br />Error Code = 4 means 'Invalid Action.' <br />Error Code = 5 means 'Project Task Name  contains invalid data.'<br />Error Code = 5 means 'Project Task Name contains more than 100 characters.'<br />Error Code = 5 means 'Project Task Name cannot be empty.'<br />Error Code = 5 means 'No access on Timesheet schema.'<br />Error Code = 7 means 'No json data found.' <br />Error Code = 8 means 'Either empty or no Form Data.'<br />Error Code = 9 means 'Invalid json data.'<br/>"

        },
		"Message": {
          "type": "string",
		  "description":"Message show as per error code"
        },
		"Result": {
          "description": "Result value",
		   "allOf": [
            {
              "$ref": "#/definitions/ResultForGetAllProjectTask"
            }
          ]
        }}
    },

   "ErrorForAddNewProjectTask": {
     "type": "object",
     "properties": {
	    "IsError": {
          "type": "boolean",
		  "description":"isError = false means success and isError = true means error ",
		   "enum":[
		     "false",
			 "true"
		   ]
        },
        "Status": {
          "type": "integer",
          "minimum": 0,
          "maximum": 10,
		  "description":"Error Code = 0 means 'Assignment Project Task added successfully.'<br />Error Code = 0 means 'The Project Task code you have entered matches an existing Project Task code.'<br />Error Code = 2 means 'Invalid API Key.'<br />Error Code = 5 means 'API key does not exists.' <br />Error Code = 4 means 'Action cannot be empty.' <br />Error Code = 4 means 'Invalid Action.' <br />Error Code = 5 means 'Project Task Name is Empty.'<br />Error Code = 5 means 'Project Task Name is missing.'<br />Error Code = 5 means 'Project Task Name  contains invalid data.'<br />Error Code = 5 means 'Project Task Name contains more than 100 characters.'<br />Error Code = 5 means 'Project Task Name cannot be empty.'<br />Error Code = 5 means 'In Use Can only Contain Yes Or No.'<br />Error Code = 5 means 'In Use cannot be empty.'<br />Error Code = 5 means 'No access on Timesheet schema.'<br />Error Code = 6 means 'Oops! Something went wrong.'<br />Error Code = 7 means 'No json data found.' <br />Error Code = 8 means 'Either empty or no Form Data.'<br />Error Code = 9 means 'Invalid json data.'<br />Error Code = 10 means 'No record found.'"
        },
		"Message": {
          "type": "string",
		  "description":"Message show as per error code"
        },
		"Result": {
          "type": "object",
		  "description":"Can be ignored"
        }
      }
    },

   "ErrorForEditProjectTask": {
      "type": "object",
      "properties": {
	    "IsError": {
          "type": "boolean",
		  "description":"isError = false means success and isError = true means error ",
		   "enum":[
		     "false",
			 "true"
		   ]
        },
        "Status": {
          "type": "integer",
          "minimum": 0,
          "maximum": 10,
		  "description":" Error Code = 0 means 'Assignment Project Task updated successfully.'<br />Error Code = 0 means 'The Project Task code you have entered matches an existing Project Task code.'<br />Error Code = 2 means 'Invalid API Key.'<br />Error Code = 5 means 'API key does not exists.' <br />Error Code = 4 means 'Action cannot be empty.' <br />Error Code = 4 means 'Invalid Action.' <br />Error Code = 5 means 'ProjectTaskName contains invalid data.'<br />Error code = 5 means 'ProjectTaskName contains more than 100 characters.'<br />Error Code = 5 means 'ProjectTaskName cannot be empty.' <br />Error Code = 5 means 'The Project Task Name you have entered not matches an existing Project Task code.' <br />Error Code = 5 means 'Project Task Name is Empty.' <br />Error Code = 5 means 'Project Task Name is missing.' <br />Error Code = 5 means 'New Project Task Name contains invalid data.'<br />Error code = 5 means 'New Project Task Name contains more than 100 characters.'<br />Error Code = 5 means 'New Project Task Name cannot be empty..' <br />Error Code = 5 means 'New Project Task Name is Empty.' <br />Error Code = 5 means 'In Use Can only Contain Yes Or No' <br />Error Code = 5 means 'In Use cannot be empty.' <br />Error Code = 5 means 'Mention atleast one field to Update.' <br />Error Code = 5 means 'No access on Timesheet schema.'<br />Error Code = 6 means 'Oops! Something went wrong.'<br />Error Code = 7 means 'No json data found.' <br />Error Code = 8 means 'Either empty or no Form Data.'<br />Error Code = 9 means 'Invalid json data.'<br />Error Code = 10 means 'No records found.'"
        },
		"Message": {
          "type": "string",
		  "description":"Message show as per error code"
        },
		"Result": {
          "type": "object",
		  "description":"Can be ignored"
        }
      }
    },

   "ErrorForGetAllProjectTaskDetail": {
      "type": "object",
      "properties": {
	    "IsError": {
          "type": "boolean",
		  "description":"isError = false means success and isError = true means error ",
		   "enum":[
		     "false",
			 "true"
		   ]
        },
        "Status": {
          "type": "integer",
          "minimum": 0,
          "maximum": 10,
		  "description":" Error Code = 0 means 'The request processed successfully..'<br />Error Code = 2 means 'Invalid API Key.'<br />Error Code = 5 means 'API key does not exists.' <br />Error Code = 4 means 'Action cannot be empty.' <br />Error Code = 4 means 'Invalid Action.' <br />Error Code = 5 means 'Project Task Detail Name contains invalid data.'<br />Error code = 5 means 'Project Task Detail Name contains more than 100 characters.'<br />Error Code = 5 means 'Project Task Detail Name cannot be empty.' <br />Error Code = 5 means 'No access on Timesheet schema.'<br />Error Code = 6 means 'Oops! Something went wrong.'<br />Error Code = 7 means 'No json data found.' <br />Error Code = 8 means 'Either empty or no Form Data.'<br />Error Code = 9 means 'Invalid json data.'<br />Error Code = 10 means 'No records found.'"
        },
		"Message": {
          "type": "string",
		  "description":"Message show as per error code"
        },
		"Result": {
          "description": "Result value",

		  "allOf": [
            {
              "$ref": "#/definitions/ResultForGetAllProjectTaskDetail"
            }
          ]

        }}
    },

   "ErrorForAddNewProjectTaskDetail": {
      "type": "object",
      "properties": {
	    "IsError": {
          "type": "boolean",
		  "description":"isError = false means success and isError = true means error ",
		   "enum":[
		     "false",
			 "true"
		   ]
        },
        "Status": {
          "type": "integer",
          "minimum": 0,
          "maximum": 10,
		  "description":"Error Code = 0 means 'Assignment Project Task Detail added successfully.'\n<br />Error Code = 0 means 'The Project Task Detail code you have entered matches an existing Project Task Detail code.'<br />Error Code = 2 means 'Invalid API Key.'<br />Error Code = 4 means 'Action cannot be empty.' <br />Error Code = 4 means 'Invalid Action.' <br />Error Code = 5 means 'API key does not exists.' <br />Error Code = 5 means 'Project Task Detail Name is Empty.' <br />Error Code = 5 means 'Project Task Detail Name is missing.' <br />Error Code = 5 means 'Project Task Detail Name contains invalid data.' <br />Error Code = 5 means 'Project Task Detail Name contains more than 100 characters.' <br />Error Code = 5 means 'Project Task Detail Name cannot be empty.' <br />Error Code = 5 means 'In Use Can only Contain Yes Or No.' <br />Error Code = 5 means 'In Use cannot be empty.' <br />Error Code = 5 means 'No access on Timesheet schema.' <br />Error Code = 6 means 'Oops! Something went wrong.' <br />Error Code = 7 means 'No json data found.' <br />Error Code = 8 means 'Either empty or no Form Data.'<br />Error Code = 9 means 'Invalid json data.'<br />Error Code = 10 means 'No records found'"
        },
		"Message": {
          "type": "string",
		  "description":"Message show as per error code"
        },
		"Result": {
          "type": "object",
		  "description":"Can be ignored"
        }
      }
    },
   "ErrorForEditProjectTaskDetail": {
      "type": "object",
      "properties": {
	    "IsError": {
          "type": "boolean",
		  "description":"isError = false means success and isError = true means error ",
		   "enum":[
		     "false",
			 "true"
		   ]
        },
        "Status": {
          "type": "integer",
          "minimum": 0,
          "maximum": 10,
		  "description":"Error Code = 0 means 'Assignment Project Task Detail updated successfully.'\n<br />Error Code = 0 means 'The Project Task Detail code you have entered matches an existing Project Task Detail code.'<br />Error Code = 2 means 'Invalid API Key.'<br />Error Code = 4 means 'Action cannot be empty.' <br />Error Code = 4 means 'Invalid Action.' <br />Error Code = 5 means 'API key does not exists.' <br />Error Code = 5 means 'Project Task Detail Name contains invalid data.' <br />Error Code = 5 means 'Project Task Detail Name contains more than 100 characters.' <br />Error Code = 5 means 'Project Task Detail Name cannot be empty.' <br />Error Code = 5 means 'The Project Task Detail Name you have entered not matches an existing Project Detail Task code.' <br />Error Code = 5 means 'Project Tas Detail Name is Empty.' <br />Error Code = 5 means 'Project Name Task Detail is missing.' <br />Error Code = 5 means 'New Project Task Detail Name contains invalid data.' <br />Error Code = 5 means 'New Project Task Detail Name contains more than 100 characters.' <br />Error Code = 5 means 'New Project Task Detail Name cannot be empty.' <br />Error Code = 5 means 'New Project Task Detail Name is Empty.' <br />Error Code = 5 means 'In Use Can only Contain Yes Or No.' <br />Error Code = 5 means 'In Use cannot be empty.' <br />Error Code = 5 means 'Mention atleast one field to Update.' <br />Error Code = 5 means 'No access on Timesheet schema.' <br />Error Code = 6 means 'Oops! Something went wrong.' <br />Error Code = 7 means 'No json data found.' <br />Error Code = 8 means 'Either empty or no Form Data.'<br />Error Code = 9 means 'Invalid json data.'<br />Error Code = 10 means 'No records found'"
        },
		"Message": {
          "type": "string",
		  "description":"Message show as per error code"
        },
		"Result": {
          "type": "object",
		  "description":"Can be ignored"
        }
      }
    },

	 "ErrorForGetCPDByEmployeeId": {
     "type": "object",
     "properties": {
	    "IsError": {
          "type": "boolean",
		  "description":"isError = false means success and isError = true means error ",
		   "enum":[
		     "false",
			 "true"
		   ]
        },
        "Status": {
          "type": "integer",
          "minimum": 0,
          "maximum": 10,
		  "description":"Error Code = 0 means 'The request processed successfully.'<br />Error Code = 2 means 'Invalid API Key.'<br />Error Code = 5 means 'API key does not exists.' <br />Error Code = 4 means 'Action cannot be empty.' <br />Error Code = 4 means 'Invalid Action.' <br />Error Code = 5 means 'EmployeeId cannot be empty.'<br />Error code = 5 means 'EmployeeId contains more than 15 characters.'<br />Error Code = 5 means 'EmployeeId contains invalid data.' <br />Error Code = 5 means 'EmployeeId does not exists.' <br />Error Code = 5 means 'EmployeeId is missing.' <br />Error Code = 7 means 'No json data found.' <br />Error Code = 8 means 'Either empty or no Form Data.'<br />Error Code = 9 means 'Invalid json data.'<br />Error Code = 10 means 'No detail has been found.'"
        },
		"Message": {
          "type": "string",
		  "description":"Message show as per error code"
        },
		"Result": {
          "description": "Result value",

		  "allOf": [
            {
              "$ref": "#/definitions/ResultForGetCPDByEmployeeId"
            }
          ]

        }}
    },

	"ErrorForGetByCPDId": {
     "type": "object",
     "properties": {
	    "IsError": {
          "type": "boolean",
		  "description":"isError = false means success and isError = true means error ",
		   "enum":[
		     "false",
			 "true"
		   ]
        },
        "Status": {
          "type": "integer",
          "minimum": 0,
          "maximum": 10,
		  "description":"Error Code = 0 means 'The request processed successfully.'<br />Error Code = 2 means 'Invalid API Key.'<br />Error Code = 5 means 'API key does not exists.' <br />Error Code = 4 means 'Action cannot be empty.' <br />Error Code = 4 means 'Invalid Action.' <br />Error Code = 5 means 'EmployeeId cannot be empty.'<br />Error code = 5 means 'EmployeeId contains more than 15 characters.'<br />Error Code = 5 means 'EmployeeId contains invalid data.' <br />Error Code = 5 means 'EmployeeId does not exists.' <br />Error Code = 5 means 'EmployeeId is missing.' <br />Error Code = 5 means 'CPD Id is missing.' <br />Error Code = 5 means 'CPDId cannot be empty.' <br />Error Code = 5 means 'CPDId is invalid' <br />Error Code = 7 means 'No json data found.' <br />Error Code = 8 means 'Either empty or no Form Data.'<br />Error Code = 9 means 'Invalid json data.'<br />Error Code = 10 means 'No detail has been found.'"
        },
		"Message": {
          "type": "string",
		  "description":"Message show as per error code"
        },
		"Result": {
          "description": "Result value",

		  "allOf": [
            {
              "$ref": "#/definitions/ResultForGetByCPDIdObject"
            }
          ]

        }}
    },

	 "ErrorForAddNewCPD": {
     "type": "object",
     "properties": {
	    "IsError": {
          "type": "boolean",
		  "description":"isError = false means success and isError = true means error ",
		   "enum":[
		     "false",
			 "true"
		   ]
        },
        "Status": {
          "type": "integer",
          "minimum": 0,
          "maximum": 10,
		  "description":"Error Code = 0 means 'CPD record added successfully.'<br />Error Code = 2 means 'Invalid API Key.'<br />Error Code = 5 means 'API key does not exists.' <br />Error Code = 4 means 'Action cannot be empty.' <br />Error Code = 4 means 'Invalid Action.' <br />Error Code = 5 means 'EmployeeId cannot be empty.'<br />Error code = 5 means 'EmployeeId contains more than 15 characters.'<br />Error Code = 5 means 'EmployeeId contains invalid data.' <br />Error Code = 5 means 'EmployeeId does not exists.' <br />Error Code = 5 means 'EmployeeId is missing.' <br />Error Code = 5 means 'Activity cannot be empty.'<br />Error Code = 5 means 'Activity contains more than 100 characters.'<br />Error Code = 5 means 'Activity contains invalid data.'<br />Error Code = 5 means 'Activity is missing.'<br />Error Code = 5 means 'Start Date field cannot be Empty'<br />Error Code = 5 means 'Start Date field contains invalid data'<br />Error Code = 5 means 'Start Date is Cannot be Empty.'<br />Error Code = 5 means 'Start Date Start Date is Missing.'<br />Error Code = 5 means 'End Date field contains invalid data'<br />Error Code = 5 means 'End Date should be greater than StartDate.'<br />Error Code = 5 means 'RollNumber contains more than 30 characters.'<br />Error Code = 5 means 'RollNumber contains invalid data.'<br />Error Code = 5 means 'Date Admitted field cannot be Empty.'<br />Error Code = 5 means 'Date Admitted field contains invalid data.'<br />Error Code = 5 means 'HoursRequired Contains Invalid Data.'<br />Error Code = 5 means 'Max 999 value is Allowed for HoursRequired.'<br />Error Code = 5 means 'HoursAccredited Contains Invalid Data.'<br />Error Code = 5 means 'Max 999 value is Allowed for HoursAccredited.'<br />Error Code = 5 means 'Notes contains invalid data.'<br />Error Code = 5 means 'Notes contains more than 256 characters.'<br />Error Code = 5 means 'Custom column name not exists.'<br />Error Code = 5 means 'Custom column name should not be empty.'<br />Error Code = 5 means ' ColumnName is missing.'<br />Error Code = 5 means 'ColumnName cannot be empty.'<br />Error Code = 5 means 'Custom column name already addded'<br />Error Code = 5 means 'Custom column name does not exists on screen'<br/><br />Error Code = 5 means 'ColumnName contains invalid data.'<br />Error Code = 5 means 'ColumnName field contains invalid data.'<br />Error Code = 5 means 'ColumnName is mandatory.'<br />Error Code = 5 means 'Custom column name contains more than 100 characters.'<br/><br />Error Code = 5 means 'One or more mandatory fields are missing'<br />Error Code = 5 means 'One or more custom fields are mandatory'<br />Error Code = 5 means 'ColumnValue is missing.'<br />Error Code = 5 means 'Document Name is missing.'<br />Error Code = 5 means 'Document Name contains more than 100 characters.'<br />Error Code = 5 means 'DocumentName cannot be empty.'<br />Error Code = 5 means 'Invalid file type.'<br />Error Code = 5 means 'File is missing.'<br />Error Code = 5 means 'File contains invalid data.'<br />Error Code = 5 means 'Description contains more than 256 characters.'<br />Error Code = 5 means 'Description contains invalid data.'<br />Error Code = 5 means 'DocumentCategory Type Category is missing.'<br />Error Code = 5 means 'DocumentCategory Type cannot be empty.'<br />Error Code = 5 means 'DocumentCategory Type contains more than 100 characters. '<br />Error Code = 5 means 'DocumentCategory Type contains invalid data.'<br />Error Code = 5 means 'Signature Required is missing.'<br />Error Code = 5 means 'SignatureRequired cannot be empty.'<br />Error Code = 5 means 'SignatureRequired Can only Contain True Or False.'<br />Error Code = 6 means 'Oops! Something went wrong.'<br />Error Code = 7 means 'No json data found.' <br />Error Code = 8 means 'Either empty or no Form Data.'<br />Error Code = 9 means 'Invalid json data.'<br />Error Code = 10 means 'No record found.'"
        },
		"Message": {
          "type": "string",
		  "description":"Message show as per error code"
        },
		"Result": {
          "type": "object",
		  "description":"Can be ignored"
        }
      }
    },

	 "ErrorForUpdateCPD": {
     "type": "object",
     "properties": {
	    "IsError": {
          "type": "boolean",
		  "description":"isError = false means success and isError = true means error ",
		   "enum":[
		     "false",
			 "true"
		   ]
        },
        "Status": {
          "type": "integer",
          "minimum": 0,
          "maximum": 10,
		  "description":"Error Code = 0 means 'CPD record updated successfully.'<br />Error Code = 2 means 'Invalid API Key.'<br />Error Code = 5 means 'API key does not exists.' <br />Error Code = 4 means 'Action cannot be empty.' <br />Error Code = 4 means 'Invalid Action.' <br />Error Code = 5 means 'EmployeeId cannot be empty.'<br />Error code = 5 means 'EmployeeId contains more than 15 characters.'<br />Error Code = 5 means 'EmployeeId contains invalid data.' <br />Error Code = 5 means 'EmployeeId does not exists.' <br />Error Code = 5 means 'EmployeeId is missing.' <br />Error Code = 5 means 'CPD Id is missing.'<br />Error Code = 5 means 'valid CPD Id Cannot be Empty'<br />Error Code = 5 means 'CPD Id is invalid'<br />Error Code = 5 means 'Pending authorization request exists in system for passed CPD Id.'<br />Error Code = 5 means 'No record found.'<br />Error Code = 10 means 'No detail has been found.'<br />Error Code = 5 means 'Activity cannot be empty.'<br />Error Code = 5 means 'Activity contains more than 100 characters.'<br />Error Code = 5 means 'Activity contains invalid data.'<br />Error Code = 5 means 'Start Date field cannot be Empty'<br />Error Code = 5 means 'Start Date field contains invalid data'<br />Error Code = 5 means 'Start Date is Cannot be Empty.'<br />Error Code = 5 means 'End Date field contains invalid data'<br />Error Code = 5 means 'End Date should be greater than StartDate.'<br />Error Code = 5 means 'RollNumber contains more than 30 characters.'<br />Error Code = 5 means 'RollNumber contains invalid data.'<br />Error Code = 5 means 'Date Admitted field cannot be Empty.'<br />Error Code = 5 means 'Date Admitted field contains invalid data.'<br />Error Code = 5 means 'HoursRequired Contains Invalid Data.'<br />Error Code = 5 means 'Max 999 value is Allowed for HoursRequired.'<br />Error Code = 5 means 'HoursAccredited Contains Invalid Data.'<br />Error Code = 5 means 'Max 999 value is Allowed for HoursAccredited.'<br />Error Code = 5 means 'Notes contains invalid data.'<br />Error Code = 5 means 'Notes contains more than 256 characters.'<br />Error Code = 5 means 'Custom column name not exists'<br />Error Code = 5 means 'Custom column name should not be empty'<br />Error Code = 5 means 'ColumnName cannot be empty.'<br />Error Code = 5 means 'Column already addded'<br />Error Code = 5 means 'Column does not exists on screen'<br />Error Code = 5 means 'ColumnValue is missing.'<br/><br />Error Code = 5 means 'ColumnName contains invalid data.'<br />Error Code = 5 means 'ColumnName field contains invalid data.'<br />Error Code = 5 means 'ColumnName is mandatory.'<br />Error Code = 5 means 'Custom column name contains more than 100 characters.'<br/><br />Error Code = 5 means 'Document Name is missing.'<br />Error Code = 5 means 'Document Name contains more than 100 characters.'<br />Error Code = 5 means 'DocumentName cannot be empty.'<br />Error Code = 5 means 'Invalid file type.'<br />Error Code = 5 means 'File is missing.'<br />Error Code = 5 means 'File contains invalid data.'<br />Error Code = 5 means 'Description contains more than 256 characters.'<br />Error Code = 5 means 'Description contains invalid data.'<br />Error Code = 5 means 'DocumentCategory Type Category is missing.'<br />Error Code = 5 means 'DocumentCategory Type cannot be empty.'<br />Error Code = 5 means 'DocumentCategory Type contains more than 100 characters. '<br />Error Code = 5 means 'DocumentCategory Type contains invalid data.'<br />Error Code = 5 means 'Signature Required is missing.'<br />Error Code = 5 means 'SignatureRequired cannot be empty.'<br />Error Code = 5 means 'SignatureRequired Can only Contain True Or False.'<br />Error Code = 6 means 'Oops! Something went wrong.'<br />Error Code = 7 means 'No json data found.' <br />Error Code = 8 means 'Either empty or no Form Data.'<br />Error Code = 9 means 'Invalid json data.'<br />Error Code = 10 means 'No record found.'"
        },
		"Message": {
          "type": "string",
		  "description":"Message show as per error code"
        },
		"Result": {
          "type": "object",
		  "description":"Can be ignored"
        }
      }
    },

	"ErrorForDeleteCPD": {
     "type": "object",
     "properties": {
	    "IsError": {
          "type": "boolean",
		  "description":"isError = false means success and isError = true means error ",
		   "enum":[
		     "false",
			 "true"
		   ]
        },
        "Status": {
          "type": "integer",
          "minimum": 0,
          "maximum": 10,
		  "description":"Error Code = 0 means 'CPD record deleted successfully.'<br />Error Code = 2 means 'Invalid API Key.'<br />Error Code = 5 means 'API key does not exists.' <br />Error Code = 4 means 'Action cannot be empty.' <br />Error Code = 4 means 'Invalid Action.' <br />Error Code = 5 means 'EmployeeId cannot be empty.'<br />Error code = 5 means 'EmployeeId contains more than 15 characters.'<br />Error Code = 5 means 'EmployeeId contains invalid data.' <br />Error Code = 5 means 'EmployeeId does not exists.' <br />Error Code = 5 means 'EmployeeId is missing.' <br />Error Code = 5 means 'CPD Id is missing.'<br />Error Code = 5 means 'valid CPD Id Cannot be Empty'<br />Error Code = 5 means 'CPD Id is invalid'<br />Error Code = 5 means 'Pending authorization request exists in system for passed CPD Id.'<br />Error Code = 5 means 'No record found.'<br />Error Code = 10 means 'No detail has been found.'<br />Error Code = 7 means 'No json data found.' <br />Error Code = 8 means 'Either empty or no Form Data.'<br />Error Code = 9 means 'Invalid json data.'<br />Error Code = 10 means 'No record found.'"
        },
		"Message": {
          "type": "string",
		  "description":"Message show as per error code"
        },
		"Result": {
          "type": "object",
		  "description":"Can be ignored"
        }
      }
    },

	"ResultForGetCPDByEmployeeId": {
      "description": " Result Array",
      "type": "array",
      "items": {
        "type": "object",

        "properties": {
          "CPDId": {
            "description": " CPDId Value",
            "type": "integer",
			"example":147
          },
          "Activity": {
            "description": " Activity value",
            "type": "string",
			"example":"Activity name"
          },
		  "StartDate": {
            "description": " StartDate value",
            "type": "string",
			"format":"date",
			"example":"2017-01-01"
          },
		  "EndDate": {
            "description": " EndDate value",
            "type": "string",
			"format":"date",
			"example":"2017-01-01"
          },
		  "RollNumber": {
           "description": " RollNumber value",
           "type": "string",
           "example":"11"
          },
		 "DateAdmitted": {
            "description": " DateAdmitted value",
            "type": "string",
			"format":"date",
			"example":"2017-01-01"
          },
		  "HoursRequired": {
            "description": " HoursRequired value",
            "type": "integer",
			"example":"124"
          },
		  "HoursAccredited": {
            "description": " HoursAccredited value",
            "type": "integer",
			"example":"1260"
          },
		  "Notes": {
            "description": " Notes value",
            "type": "string",
			"example":"Notes goes here"
          },
		  "Customfields": {
          "description": "Customfields for get details",
          "allOf": [
            {
             "$ref": "#/definitions/CustomFieldsArrayForGetDetail"
            }
          ]},
		"Files": {
          "description": "Files for get details",
          "allOf": [
            {
             "$ref": "#/definitions/FilesArrayForGetDetail"
            }
          ]}

        }
      }
    },

	"ResultForGetByCPDIdObject": {
      "description": " Result Array",
      "type": "object",
      "properties": {
          "CPDId": {
            "description": " CPDId Value",
            "type": "integer",
			"example":150
          },
          "Activity": {
            "description": " Activity value",
            "type": "string",
			"example":"Activity name"
          },
		  "StartDate": {
            "description": " StartDate value",
            "type": "string",
			"format":"date",
			"example":"2017-01-01"
          },
		  "EndDate": {
            "description": " EndDate value",
            "type": "string",
			"format":"date",
			"example":"2017-01-01"
          },
		  "RollNumber": {
           "description": " RollNumber value",
           "type": "string",
           "example":"11"
          },
		 "DateAdmitted": {
            "description": " DateAdmitted value",
            "type": "string",
			"format":"date",
			"example":"2017-01-01"
          },
		  "HoursRequired": {
            "description": " HoursRequired value",
            "type": "integer",
			"example":1240
          },
		  "HoursAccredited": {
            "description": " HoursAccredited value",
            "type": "integer",
			"example":1260
          },
		  "Notes": {
            "description": " Notes value",
            "type": "string",
			"example":"Notes goes here"
          },
		  "Customfields": {
          "description": "Customfields for get details",
          "allOf": [
            {
             "$ref": "#/definitions/CustomFieldsArrayForGetDetail"
            }
          ]},
		"Files": {
          "description": "Files for get details",
          "allOf": [
            {
             "$ref": "#/definitions/FilesArrayForGetDetail"
            }
          ]}

        }
     },

	  "CustomFieldsArrayForGetDetail": {
	  "type": "array",
      "required": [
        "ColumnName",
		"ColumnValue"
       ],
	   "items":
	  {
	  "type":"object",
      "properties": {
	  "ColumnName": {
          "description": " column name value",
          "type": "string",
		  "example": "Column_Name"
        },

		"ColumnValue": {
          "description": " column value value",
          "type": "string",
		  "example": "29153"
        }
	 }
	 }
   },

     "FilesArrayForGetDetail":{
	  "type": "array",
      "required": [
        "DocumentName",
		"File",
		"Description",
		"DocumentCategory",
		"SignatureRequired"
		],
	  "items":
	  {
        "type": "object",
      "properties": {
	  "DocumentName": {
          "description": " DocumentName value",
          "type": "string",
		  "example": "DocumentName.pdf"
        },
	  "Description": {
          "description": " Description value",
          "type": "string",
		  "example": "Description goes here"
        },
	  "FileUrl": {
          "description": " FileUrl value",
          "type": "string",
		  "format":"url",
		  "example": "http://localhost.net:12345/Handlers/MyDocsViewer.ashx?5fca4525-3df3-4605-aee1-1885463b3334"
        },

	  "Category": {
          "description": " category value",
          "type": "string",
		  "example": "Benefit"
        },
	 "SignatureRequired": {
          "description": " signature required value",
           "type": "boolean",
			"enum": [
					 false,
					 true
					]
        }
	 }
	 }
   },

	"ResultForCreateProjectTimesheet": {
      "description": " Result Array",
      "type": "object",

        "properties": {
          "TransactionId": {
            "description": "TransactionId value",
            "type": "number",
			"example":750
          }
        }
      },
	  "GetProjectTimesheetByTransactionId": {
      "type": "object",
      "required": [
        "APIKey",
        "Action",
		"EmployeeId",
		"TransactionId"
       ],
      "properties": {
	  "APIKey": {
          "description": "APIKey for employee api to get project time sheet detail",
          "type": "string",
		  "allOf": [
            {
              "$ref": "#/definitions/APIKey"
            }
          ]
        },
        "Action": {
          "description": "Action name = GetProjectTimesheetByTransactionId",
          "allOf": [
            {
              "$ref": "#/definitions/Action"
            }
          ],
		   "example": "GetProjectTimesheetByTransactionId"
        },
		 "EmployeeId": {
          "description": "Employee id for get project timesheet detail",
          "allOf": [
            {
              "$ref": "#/definitions/EmployeeId"
            }
          ]
        },
        "TransactionId": {
          "description": "Transaction id for get project timesheet detail",
          "allOf": [
            {
             "$ref": "#/definitions/TransactionId"
            }
          ]}

      }
    },
	"CreateProjectTimesheetParameter": {
      "type": "object",
      "required": [
        "APIKey",
        "Action",
		"EmployeeId",
		"ProjectTimesheetDate",
		"TimesheetProject",
		"TimesheetTask",
		"TimesheetDetail",
		"StartTime",
		"EndTime",
		"TotalHours",
		"Quantity"
		],
      "properties": {
	  "APIKey": {
          "description": "APIKey for employee api to get project time sheet detail",
          "type": "string",
		  "allOf": [
            {
              "$ref": "#/definitions/APIKey"
            }
          ]
        },
        "Action": {
          "description": "Action name = CreateProjectTimesheet",
          "allOf": [
            {
              "$ref": "#/definitions/Action"
            }
          ],
		    "example": "CreateProjectTimesheet"
        },
		"EmployeeId": {
          "description": "Employeeid for create project timesheet",
          "allOf": [
            {
              "$ref": "#/definitions/EmployeeId"
            }
          ]
        },

		"ProjectTimesheetDate": {
          "description": "ProjectTimesheetDate for create project timesheet",
          "allOf": [
            {
              "$ref": "#/definitions/ProjectTimesheetDate"
            }
          ]
        },
		"TimesheetProject": {
          "description": "TimesheetProject for create project timesheet",
          "allOf": [
            {
              "$ref": "#/definitions/TimesheetProject"
            }
          ]
        },
		"TimesheetTask": {
          "description": "TimesheetTask for create project timesheet",
          "allOf": [
            {
              "$ref": "#/definitions/TimesheetTask"
            }
          ]
        },

		"TimesheetDetail": {
          "description": "TimesheetDetail for create project timesheet",
          "allOf": [
            {
              "$ref": "#/definitions/TimesheetDetail"
            }
          ]
        },
		"StartTime": {
          "description": "StartTime for create project timesheet",
          "allOf": [
            {
              "$ref": "#/definitions/StartTime"
            }
          ]
        },
		"EndTime": {
          "description": "EndTime for create project timesheet",
          "allOf": [
            {
              "$ref": "#/definitions/EndTime"
            }
          ]
        },
		"TotalHours": {
          "description": "TotalHours for create project timesheet",
          "allOf": [
            {
              "$ref": "#/definitions/TotalHours"
            }
          ]
        },
		"Quantity": {
          "description": "Quantity for create project timesheet",
          "allOf": [
            {
              "$ref": "#/definitions/Quantity"
            }
          ]
        },

        "Notes": {
          "description": "Notes for create project timesheet",
          "allOf": [
            {
             "$ref": "#/definitions/Notes"
            }
          ]}

      }
    },
	"UpdateProjectTimesheetParameter": {
      "type": "object",
      "required": [
        "APIKey",
        "Action",
		"EmployeeId",
		"TransactionId",
		"TimesheetProject",
		"TimesheetTask",
		"TimesheetDetail",
		"StartTime",
		"EndTime",
		"TotalHours",
		"Quantity"
		],
      "properties": {
	  "APIKey": {
          "description": "APIKey for employee api to get project time sheet detail",
          "type": "string",
		  "allOf": [
            {
              "$ref": "#/definitions/APIKey"
            }
          ]
        },
        "Action": {
          "description": "Action name = UpdateProjectTimesheet",
          "allOf": [
            {
              "$ref": "#/definitions/Action"
            }
          ],
		   "example": "UpdateProjectTimesheet"
        },
		"EmployeeId": {
          "description": "Employeeid for update project timesheet",
          "allOf": [
            {
              "$ref": "#/definitions/EmployeeId"
            }
          ]
        },

		"TransactionId": {
          "description": "TransactionId for update project timesheet",
          "allOf": [
            {
              "$ref": "#/definitions/TransactionId"
            }
          ]
        },
		"TimesheetProject": {
          "description": "TimesheetProject for update project timesheet",
          "allOf": [
            {
              "$ref": "#/definitions/TimesheetProject"
            }
          ]
        },
		"TimesheetTask": {
          "description": "TimesheetTask for update project timesheet",
          "allOf": [
            {
              "$ref": "#/definitions/TimesheetTask"
            }
          ]
        },

		"TimesheetDetail": {
          "description": "TimesheetDetail for update project timesheet",
          "allOf": [
            {
              "$ref": "#/definitions/TimesheetDetail"
            }
          ]
        },
		"StartTime": {
          "description": "StartTime for update project timesheet",
          "allOf": [
            {
              "$ref": "#/definitions/StartTime"
            }
          ]
        },
		"EndTime": {
          "description": "EndTime for update project timesheet",
          "allOf": [
            {
              "$ref": "#/definitions/EndTime"
            }
          ]
        },
		"TotalHours": {
          "description": "TotalHours for update project timesheet",
          "allOf": [
            {
              "$ref": "#/definitions/TotalHours"
            }
          ]
        },
		"Quantity": {
          "description": "Quantity for update project timesheet",
          "allOf": [
            {
              "$ref": "#/definitions/Quantity"
            }
          ]
        },

        "Notes": {
          "description": "Notes for update project timesheet",
          "allOf": [
            {
             "$ref": "#/definitions/Notes"
            }
          ]}

      }
    },
	"DeleteProjectTimesheetParameter": {
      "type": "object",
      "required": [
        "APIKey",
        "Action",
		"EmployeeId",
		"TransactionId"
       ],
      "properties": {
	  "APIKey": {
          "description": "APIKey for employee api to get project time sheet detail",
          "type": "string",
		  "allOf": [
            {
              "$ref": "#/definitions/APIKey"
            }
          ]
        },
        "Action": {
          "description": "Action name = DeleteProjectTimesheet",
          "allOf": [
            {
              "$ref": "#/definitions/Action"
            }
          ],
		  "example": "DeleteProjectTimesheet"
        },
		 "EmployeeId": {
          "description": "Employee id for delete project timesheet detail",
          "allOf": [
            {
              "$ref": "#/definitions/EmployeeId"
            }
          ]
        },
        "TransactionId": {
          "description": "Transaction id for delete project timesheet detail",
          "allOf": [
            {
             "$ref": "#/definitions/TransactionId"
            }
          ]}

      }
    },

    "GetAllTimesheetProjectParameter": {
      "type": "object",
      "required": [
        "APIKey",
        "Action"
       ],
      "properties": {
	  "APIKey": {
          "description": "APIKey for employee api to get all project time sheet detail",
          "type": "string",
		  "allOf": [
            {
              "$ref": "#/definitions/APIKey"
            }
          ]
        },
        "Action": {
          "description": "Action name = GetAllTimesheetProject",
          "allOf": [
            {
              "$ref": "#/definitions/Action"
            }
          ],
		  "example": "GetAllTimesheetProject"
        },
		 "ProjectName": {
          "description": "Project name for get all timesheet project detail",
          "allOf": [
            {
              "$ref": "#/definitions/ProjectName"
            }
          ]
        }

      }
    },

	"AddNewProjectParameter":
	{
	 "type": "object",
      "required": [
        "APIKey",
        "Action",
        "ProjectName",
		"InUse"],
	"properties": {
	  "APIKey": {
          "description": "APIKey for employee api to add new project",
          "type": "string",
		  "allOf": [
            {
              "$ref": "#/definitions/APIKey"
            }
          ]
        },
        "Action": {
          "description": "Action name = AddNewProject",
          "allOf": [
            {
              "$ref": "#/definitions/Action"
            }
          ],
		   "example": "AddNewProject"
        },
        "ProjectName": {
          "description": "ProjectName for add new project",
          "allOf": [
            {
             "$ref": "#/definitions/ProjectName"
            }
          ]
        },
		 "InUse": {
          "description": "InUse for add new project",
          "allOf": [
            {
             "$ref": "#/definitions/InUse"
            }
          ],
		  "enum":["Yes","No"]
        }}
	},

	"EditProjectParameter":
	{
	 "type": "object",
      "required": [
        "APIKey",
        "Action",
        "ProjectName",
		"NewProjectName",
		"InUse"],
	"properties": {
	  "APIKey": {
          "description": "APIKey for employee api to edit project",
          "type": "string",
		  "allOf": [
            {
              "$ref": "#/definitions/APIKey"
            }
          ]
        },
        "Action": {
          "description": "Action name = EditProject",
          "allOf": [
            {
              "$ref": "#/definitions/Action"
            }
          ],
		   "example": "EditProject"
        },
        "ProjectName": {
          "description": "ProjectName for edit project",
          "allOf": [
            {
             "$ref": "#/definitions/ProjectName"
            }
          ]
        },
		 "NewProjectName": {
          "description": "NewProjectName for edit project",
          "allOf": [
            {
             "$ref": "#/definitions/NewProjectName"
            }
          ]
        },
		 "InUse": {
          "description": "InUse for edit project",
          "allOf": [
            {
             "$ref": "#/definitions/InUse"
            }
          ],
		  "enum":["Yes","No"]
        }}
	},

	"GetAllProjectTaskParameter": {
      "type": "object",
      "required": [
        "APIKey",
        "Action"
		],
      "properties": {
	  "APIKey": {
          "description": "APIKey for employee api to get all project task",
          "type": "string",
		  "allOf": [
            {
              "$ref": "#/definitions/APIKey"
            }
          ]
        },
        "Action": {
          "description": "Action name = GetAllProjectTask",
          "allOf": [
            {
              "$ref": "#/definitions/Action"
            }
          ],
		    "example": "GetAllProjectTask"
        },

        "ProjectTaskName": {
          "description": "Task Name to get all Project task",
          "allOf": [
            {
             "$ref": "#/definitions/ProjectTaskName"
            }
          ]}


      }
    },

	"AddNewProjectTaskParameter": {
      "type": "object",
      "required": [
        "APIKey",
        "Action",
		"ProjectTaskName",
		"InUse"
		],
      "properties": {
	  "APIKey": {
          "description": "APIKey for employee api to add new project task",
          "type": "string",
		  "allOf": [
            {
              "$ref": "#/definitions/APIKey"
            }
          ]
        },
        "Action": {
          "description": "Action name = AddNewProjectTask",
          "allOf": [
            {
              "$ref": "#/definitions/Action"
            }
          ],
		    "example": "AddNewProjectTask"
        },

        "ProjectTaskName": {
          "description": "Task Name for new project task detail",
          "allOf": [
            {
             "$ref": "#/definitions/ProjectTaskName"
            }
          ]},
		 "InUse": {
          "description": "InUse for new project task detail",
          "allOf": [
            {
             "$ref": "#/definitions/InUse"
            }
          ],
		 "enum":["Yes","No"]
		}}
    },

	"EditProjectTaskParameter": {
      "type": "object",
      "required": [
        "APIKey",
        "Action",
		"ProjectTaskName",
		"New_ProjectTaskName",
		"InUse"
       ],
      "properties": {
	  "APIKey": {
          "description": "APIKey for employee Project timesheet api to edit project task detail",
          "type": "string",
		  "allOf": [
            {
              "$ref": "#/definitions/APIKey"
            }
          ]
        },
        "Action": {
          "description": "Action name = EditProjectTask",
          "allOf": [
            {
              "$ref": "#/definitions/Action"
            }
          ],
		  "example": "EditProjectTask"
        },
		 "ProjectTaskName": {
          "description": "Project Task Name for edit project task detail",
          "allOf": [
            {
              "$ref": "#/definitions/ProjectTaskName"
            }
          ]
        },
        "New_ProjectTaskName": {
          "description": "New_ProjectTaskName for edit project task detail",
          "allOf": [
            {
             "$ref": "#/definitions/New_ProjectTaskName"
            }
          ]},
		 "InUse": {
          "description": "InUse for edit project task detail",
          "allOf": [
            {
             "$ref": "#/definitions/InUse"
            }
          ],
		  "enum":["Yes","No"]
		}

      }
    },

	"GetAllProjectTaskDetailParameter": {
      "type": "object",
      "required": [
        "APIKey",
        "Action"
       ],
      "properties": {
	  "APIKey": {
          "description": "APIKey for employee Project timesheet api to get all project task detail",
          "type": "string",
		  "allOf": [
            {
              "$ref": "#/definitions/APIKey"
            }
          ]
        },
        "Action": {
          "description": "Action name = GetAllProjectTaskDetail",
          "allOf": [
            {
              "$ref": "#/definitions/Action"
            }
          ],
		  "example": "GetAllProjectTaskDetail"
        },
		 "ProjectTaskDetailName": {
          "description": "Project task name for get all project task detail  ",
          "allOf": [
            {
              "$ref": "#/definitions/ProjectTaskDetailName"
            }
          ]
        }}
    },

	"AddNewProjectTaskDetailParameter": {
      "type": "object",
      "required": [
        "APIKey",
        "Action",
		"ProjectTaskDetailName",
		"InUse"
       ],
      "properties": {
	  "APIKey": {
          "description": "APIKey for employee api to add new project task detail",
          "type": "string",
		  "allOf": [
            {
              "$ref": "#/definitions/APIKey"
            }
          ]
        },
        "Action": {
          "description": "Action name = AddNewProjectTaskDetail",
          "allOf": [
            {
              "$ref": "#/definitions/Action"
            }
          ],
		  "example": "AddNewProjectTaskDetail"
        },
		 "ProjectTaskDetailName": {
          "description": "Project task detail name for add new project task detail",
          "allOf": [
            {
              "$ref": "#/definitions/ProjectTaskDetailName"
            }
          ]
        },
        "InUse": {
          "description": "In use for add new project task detail",
          "allOf": [
            {
             "$ref": "#/definitions/InUse"
            }
          ],
		  "enum":["Yes","No"]
		}

      }
    },
	"EditProjectTaskDetailParameter": {
      "type": "object",
      "required": [
        "APIKey",
        "Action",
		"ProjectTaskDetailName",
		"New_ProjectTaskDetailName",
		"InUse"
       ],
      "properties": {
	  "APIKey": {
          "description": "APIKey for employee api to edit project task detail",
          "type": "string",
		  "allOf": [
            {
              "$ref": "#/definitions/APIKey"
            }
          ]
        },
        "Action": {
          "description": "Action name = EditProjectTaskDetail",
          "allOf": [
            {
              "$ref": "#/definitions/Action"
            }
          ],
		  "example": "EditProjectTaskDetail"
        },
		 "ProjectTaskDetailName": {
          "description": "Project task detail name for edit project task detail",
          "allOf": [
            {
              "$ref": "#/definitions/ProjectTaskDetailName"
            }
          ]
        },
		"New_ProjectTaskDetailName": {
          "description": "New Project task detail name for edit project task detail",
          "allOf": [
            {
              "$ref": "#/definitions/New_ProjectTaskDetailName"
            }
          ]
        },
        "InUse": {
          "description": "InUse for edit project task detail",
          "allOf": [
            {
             "$ref": "#/definitions/InUse"
            }
          ],
		  "enum":["Yes","No"]
		}

      }
    },
   "ResultGetProjectTimesheetByTransactionIdObject": {
      "description": " Result Array",
      "type": "object",

        "properties": {
          "TransactionId": {
            "description": " TransactionId Value",
            "type": "string",
			"example":"496"
          },
          "ProjectTimesheetDate": {
            "description": " ProjectTimesheetDate value",
            "type": "string",
			"format":"date",
			"example":"2014-07-04"
          },
		  "TimesheetProject": {
            "description": " TimesheetProject value",
            "type": "string",
			"example":"ProjectABC"
          },
		  "TimesheetTask": {
           "description": " TimesheetTask value",
           "type": "string",
           "example":"Tasks goes here"
          },
		  "TimesheetDetail": {
            "description": " TimesheetDetail value",
			"type": "string",
            "example":"Detail"
          },
		  "StartTime": {
            "description": " StartTime value",
            "type": "string",
			"format":"timespan",
			"example":"05:00"
          },
		  "EndTime": {
            "description": " EndTime value",
            "type": "string",
			"format":"timespan",
			"example":"09:00"
          },
          "TotalHours": {
            "description": " TotalHours value",
            "type": "string",
			"format":"timespan",
			"example":"04:00"
          },
		  "Quantity": {
            "description": " Quantity value",
            "type": "integer",
			"format":"double",
			"example":"565.00"
          },
		  "Notes": {
            "description": " Notes value",
            "type": "string",
			"example":"Notes goes here"
          }}

    },
   "ResultForGetProjectTimesheetDetail": {
      "description": " Result Array",
      "type": "array",
      "items": {
        "type": "object",

        "properties": {
          "TransactionId": {
            "description": " TransactionId Value",
            "type": "string",
			"example":"561"
          },
          "ProjectTimesheetDate": {
            "description": " ProjectTimesheetDate value",
            "type": "string",
			"format":"date",
			"example":"2014-11-03"
          },
		  "TimesheetProject": {
            "description": " TimesheetProject value",
            "type": "string",
			"example":"Project"
          },
		  "TimesheetTask": {
           "description": " TimesheetTask value",
           "type": "string",
           "example":"Task"
          },
		  "TimesheetDetail": {
            "description": " TimesheetDetail value",
			"type": "string",
            "example":"Detail"
          },
		  "StartTime": {
            "description": " StartTime value",
            "type": "string",
			"format":"timespan",
			"example":"05:00"
          },
		  "EndTime": {
            "description": " EndTime value",
            "type": "string",
			"format":"timespan",
			"example":"09:00"
          },
          "TotalHours": {
            "description": " TotalHours value",
            "type": "string",
			"format":"timespan",
			"example":"04:00"
          },
		  "Quantity": {
            "description": " Quantity value",
            "type": "integer",
			"format":"double",
			"example":"0.00"
          },
		  "Notes": {
            "description": " Notes value",
            "type": "string",
			"example":"Notes show here.."
          },
		  "ChangedDate": {
          "description": " ChangedDate value",
          "type": "string",
		  "format":"date",
		  "example":"2014-11-03"
          }

        }
      }
    },

   "ResultForGetAllTimesheetProjectObject": {
      "description": " Result Array",
      "type": "array",
      "items": {
        "type": "object",

        "properties": {
          "ProjectId": {
            "description": " ProjectId Value",
            "type": "integer",
			"example":80946
          },
          "ProjectName": {
            "description": " ProjectName value",
            "type": "string",
			"example":"Test API Project los"
          },
		  "Status": {
            "description": " Status value",
            "type": "boolean",
			"example":true,
			"enum":["false","true"]
          },
		  "CompanyName": {
           "description": " CompanyName value",
           "type": "string",
           "example":"Location, REPORT TO"
          },
		  "LocationName": {
            "description": " LocationName value",
			"type": "string",
            "example":"Head Office, Mumbai, Location"
          },
		  "DepartmentName": {
            "description": " DepartmentName value",
            "type": "string",
			"example":"Administration, Finance, Human Service"
          },
		  "EmploymentType": {
            "description": " EmploymentType value",
            "type": "string",
			"example":"All"
          },
          "SpecificEmployee": {
            "description": " SpecificEmployee value",
            "type": "string",
			"example":"Na"
          },
		  "JobRoleType": {
            "description": " JobRoleType value",
            "type": "string",
			"example":"Accountant, Administrator, CEO"
          }

        }
      }
    },

   "ResultForGetAllProjectTask": {
      "description": " Result Array",
      "type": "array",
      "items": {
        "type": "object",

          "properties": {
          "ProjectTaskId": {
            "description": " ProjectTaskId Value",
            "type": "integer",
			"example":80980
          },
          "ProjectTaskName": {
            "description": " ProjectTaskName value",
            "type": "string",
			"example":"ProjectTaskName name"
          },
		  "Status": {
            "description": "Status value",
            "type": "boolean",
			"example":true,
			"enum":["false","true"]
          },
		  "ProjectName": {
            "description": " ProjectName value",
            "type": "string",
			"example":"ProjectName goes here"
          }

        }
      }
    },

	"ResultForGetAllProjectTaskDetail": {
      "description": " Result Array",
      "type": "array",
      "items": {
        "type": "object",
         "properties": {
          "ProjectTaskDetailId": {
            "description": " ProjectTaskDetailId Value",
            "type": "integer",
			"example":80961
          },
          "ProjectTaskDetailName": {
            "description": " ProjectTaskDetailName value",
            "type": "string",
			"example":"Task details goes here"
          },
		  "Status": {
            "description": " Status value",
            "type": "boolean",
			"enum":[
		     "false",
			 "true"
		   ],
			"example":false
          },
		  "ProjectTaskName": {
            "description": " ProjectTaskName value",
            "type": "string",
			"example":"All"
          }

        }
      }
    },

	"ResultForGetByMaternityPaternityId": {
      "description": " Result Array",
      "type": "array",
      "items": {
        "type": "object",

        "properties": {
          "MaternityPaternityTxnId": {
            "description": " CPDId Value",
            "type": "integer",
			"example":339
          },
          "ExpectedDate": {
            "description": " ExpectedDate value",
            "type": "string",
			"format":"date",
			"example":"2017-05-20"
          },
		  "DueWeekStartDate": {
            "description": " DueWeekStartDate value",
            "type": "string",
			"format":"date",
			"example":"2017-05-14"
          },
		  "DueWeekEndDate": {
            "description": " DueWeekEndDate value",
            "type": "string",
			"format":"date",
			"example":"2017-05-20"
          },
		  "EarliestStartDate": {
            "description": " EarliestStartDate value",
            "type": "string",
			"format":"date",
			"example":"2017-02-26"
          },
		  "ContinousWeeksService": {
            "description": " ContinousWeeksService value",
            "type": "string",
			"format":"decimal",
			"example":"10.22"
          },
		  "OrdinaryLeaveStartDate": {
            "description": " OrdinaryLeaveStartDate value",
            "type": "string",
			"format":"date",
			"example":"2017-05-14"
          },
		  "OrdinaryLeaveEndDate": {
            "description": " OrdinaryLeaveEndDate value",
            "type": "string",
			"format":"date",
			"example":"2017-11-12"
          },
		  "AdditionalLeaveStartDate": {
            "description": " AdditionalLeaveStartDate value",
            "type": "string",
			"format":"date",
			"example":"2017-11-13"
          },
		  "AdditionalLeaveEndDate": {
            "description": " AdditionalLeaveEndDate value",
            "type": "string",
			"format":"date",
			"example":"2018-05-14"
          },
		  "ActualStartDate": {
            "description": " ActualStartDate value",
            "type": "string",
			"format":"date",
			"example":"2017-05-20"
          },
		  "ActualEndDate": {
            "description": " ActualEndDate value",
            "type": "string",
			"format":"date",
			"example":"2017-05-21"
          },
		  "Comments": {
          "description": "Comments for get details",
          "allOf": [
            {
             "$ref": "#/definitions/CommentssArrayForGetDetail"
            }
          ]},
		"Files": {
          "description": "Files for get details",
          "allOf": [
            {
             "$ref": "#/definitions/FilesArrayForMaternityPaternity"
            }
          ]},

     "ReferenceId": {
            "description": "ReferenceId value",
            "type": "string",
			"example":"1"
          }

        }
      }
    },
	"CommentssArrayForGetDetail": {
	  "type": "array",
      "items":
	  {
	  "type":"object",
      "properties": {
	  "CommentId": {
          "description": " CommentId value",
          "type": "integer",
		  "example": 200
        },
		"Comments": {
          "description": " comments value",
          "type": "string",
		  "example": "comments here"
        },
		"PostedBy": {
          "description": " PostedBy value",
          "type": "string",
		  "example": "John Miller"
        }
	 }
	 }
   },

    "FilesArrayForMaternityPaternity":{
	  "type": "array",
      "items":
	  {
        "type": "object",
      "properties": {
	  "DocumentName": {
          "description": " DocumentName value",
          "type": "string",
		  "example": "DocumentName.pdf"
        },
	  "Url": {
          "description": " FileUrl value",
          "type": "string",
		  "format":"url",
		  "example": "http://reportsto.localhost.net:12345/Handlers/MyDocsViewer.ashx?395685e4-3114-4ad4-a84d-87d04064e67a"
        },
	  "Comments": {
          "description": " comments value",
          "type": "string",
		  "example": "Comments.."
        }

	 }
	 }
   },

	"ResultGetVehicleDetailByEmployeeIdArray": {
      "description": " Result Array",
      "type": "array",
      "items": {
        "type": "object",

        "properties": {
        "VehicleId": {
          "description": "Vehicle Id Value",
          "allOf": [
            {
              "$ref": "#/definitions/VehicleId"
            }
          ]
        },
		"Registration": {
          "description": "Registration Value",
          "allOf": [
            {
              "$ref": "#/definitions/Registration"
            }
          ]
        },

		"Make": {
          "description": "Make Value",
          "allOf": [
            {
              "$ref": "#/definitions/Make"
            }
          ]
        },
		"Model": {
          "description": "Model Value",
          "allOf": [
            {
              "$ref": "#/definitions/Model"
            }
          ]
        },
		"Color": {
          "description": "Color Value",
          "allOf": [
            {
              "$ref": "#/definitions/Colour"
            }
          ]
        },

		"EngineSize": {
          "description": "EngineSize Value",
          "allOf": [
            {
              "$ref": "#/definitions/EngineSize"
            }
          ]
        },

		"FuelType": {
          "description": "FuelType Value",
          "allOf": [
            {
              "$ref": "#/definitions/FuelType"
            }
          ]
        },

		"InsuranceCompany": {
          "description": "InsuranceCompany Value",
          "allOf": [
            {
              "$ref": "#/definitions/InsuranceCompany"
            }
          ]
        },
		"PolicyNumber": {
          "description": "PolicyNumber Value",
          "allOf": [
            {
              "$ref": "#/definitions/PolicyNumber"
            }
          ]
        },

		"MOTExpiryDate": {
          "description": "MOTExpiryDate Value",
          "allOf": [
            {
              "$ref": "#/definitions/MOTExpiryDate"
            }
          ]
        },
		"InsuranceExpiryDate": {
          "description": "InsuranceExpiryDate Value",
          "allOf": [
            {
              "$ref": "#/definitions/InsuranceExpiryDate"
            }
          ]
        },
		"Comments": {
          "description": "Comments Value",
          "allOf": [
            {
              "$ref": "#/definitions/Comments"
            }
          ]
        },
		"CustomColumns":{
			"description": "CustomColumns to get vehicle detail",
          "allOf": [
            {
             "$ref": "#/definitions/CustomColumnsForGetVehicleByIdArray"
            }
          ]

		},
		"AddFiles":{
			"description": "AddFiles to get vehicle detail",
          "allOf": [
            {
             "$ref": "#/definitions/AddFilesForGetVehicleByIdArray"
            }
          ]

		}

		}
	  }
	},

	"ResultGetVehicleDetailByVehicleIdObject": {
      "description": " Result Array",
        "type": "object",

        "properties": {
        "VehicleId": {
          "description": "Vehicle Id Value",
          "allOf": [
            {
              "$ref": "#/definitions/VehicleId"
            }
          ]
        },
		"Registration": {
          "description": "Registration Value",
          "allOf": [
            {
              "$ref": "#/definitions/Registration"
            }
          ]
        },

		"Make": {
          "description": "Make Value",
          "allOf": [
            {
              "$ref": "#/definitions/Make"
            }
          ]
        },
		"Model": {
          "description": "Model Value",
          "allOf": [
            {
              "$ref": "#/definitions/Model"
            }
          ]
        },
		"Color": {
          "description": "Color Value",
          "allOf": [
            {
              "$ref": "#/definitions/Colour"
            }
          ]
        },

		"EngineSize": {
          "description": "EngineSize Value",
          "allOf": [
            {
              "$ref": "#/definitions/EngineSize"
            }
          ]
        },

		"FuelType": {
          "description": "FuelType Value",
          "allOf": [
            {
              "$ref": "#/definitions/FuelType"
            }
          ]
        },

		"InsuranceCompany": {
          "description": "InsuranceCompany Value",
          "allOf": [
            {
              "$ref": "#/definitions/InsuranceCompany"
            }
          ]
        },
		"PolicyNumber": {
          "description": "PolicyNumber Value",
          "allOf": [
            {
              "$ref": "#/definitions/PolicyNumber"
            }
          ]
        },

		"MOTExpiryDate": {
          "description": "MOTExpiryDate Value",
          "allOf": [
            {
              "$ref": "#/definitions/MOTExpiryDate"
            }
          ]
        },
		"InsuranceExpiryDate": {
          "description": "InsuranceExpiryDate Value",
          "allOf": [
            {
              "$ref": "#/definitions/InsuranceExpiryDate"
            }
          ]
        },
		"Comments": {
          "description": "Comments Value",
          "allOf": [
            {
              "$ref": "#/definitions/Comments"
            }
          ]
        },
		"CustomColumns":{
			"description": "CustomColumns to get vehicle detail",
          "allOf": [
            {
             "$ref": "#/definitions/CustomColumnsForGetVehicleByIdArray"
            }
          ]

		},
		"AddFiles":{
			"description": "AddFiles to get vehicle detail",
          "allOf": [
            {
             "$ref": "#/definitions/AddFilesForGetVehicleByIdArray"
            }
          ]

		}

		}

	},


    "CustomColumnsForGetVehicleByIdArray":{
	   "description": " CustomColumns Result Array",
	          "type": "array",
        "items":{
		"type": "object",
        "properties": {
          "ColumnName": {
            "description": "Column name",
            "type": "string",
			"example":"Vehicle 1"
          },
          "ColumnValue": {
            "description": "Column value",
            "type": "string",
			"example":"ABC"
          }}
		}
	},

	"AddFilesForGetVehicleByIdArray":{
	   "description": "AddFiles Result Array",
	          "type": "array",
			  "items":{
			   "type":"object",

        "properties": {
          "DocumentName": {
            "description": "Document name value",
            "type": "string",
			"example":"my.txt"
          },
          "FileUrl": {
            "description": "FileUrl value",
            "type": "string",
			"example":"http://reportsto.localhost.net:12345/Handlers/MyDocsViewer.ashx?a7897690-633a-46df-aefd-bc4ae479c5b7"
          },
		  "Descriptions": {
            "description": "Descriptions value",
            "type": "string",
			"example":"Descriptions goes here"
          },
		  "Category": {
            "description": "category value",
            "type": "string",
			"example":"Custom Catagory"
          },
		   "SignatureRequired": {
            "description": "Signature required value",
            "type": "string",
			"format":"boolean",
			"enum": [
					 "false",
					 "true"
				],
			"example":false
          }}
		}
	},

   "AddNewQualificationParameter": {
      "type": "object",
      "required": [
        "APIKey",
        "Action",
		"EmployeeId",
		"Qualification"],
      "properties": {
	  "APIKey": {
          "description": "APIKey for add new qualification",
          "type": "string",
		  "allOf": [
            {
			  "$ref": "#/definitions/APIKey"
            }
          ]
        },
        "Action": {
          "description": "Action name = AddNewQualification",
          "allOf": [
            {
			  "$ref": "#/definitions/Action"
            }
          ],
		  "example":"AddNewQualification"
        },
		 "EmployeeId": {
          "description": "Employee id for add new qualification",
          "allOf": [
            {
			  "$ref": "#/definitions/EmployeeId"
            }
          ]
        },
         "Qualification": {
          "description": "Qualification for add new qualification",
          "allOf": [
            {
			  "$ref": "#/definitions/Qualification"
            }
          ]
        },
       "Subject": {
          "description": "Subject for add new qualification",
          "allOf": [
            {
			  "$ref": "#/definitions/Subject"
            }
          ]
        },
		 "DatePassed": {
          "description": "Date passed for add new qualification",
          "allOf": [
            {
			  "$ref": "#/definitions/DatePassed"
            }
          ]
        },
         "ExpiryDate": {
          "description": "Expiry date for add new qualification",
          "allOf": [
            {
			  "$ref": "#/definitions/ExpiryDate"
            }
          ]
        },
		"Comments": {
          "description": "Comments for add new qualification",
          "allOf": [
            {
			  "$ref": "#/definitions/Comments"
            }
          ],
		   "maxLength":"256"
        },
		"CustomColumns": {
          "description": "CustomColumns for add new qualification",
          "allOf": [
            {
			 "$ref": "#/definitions/CustomColumnsForEmployeeQualification"
            }
          ]
        },
		"AddFiles": {
          "description": "AddFiles for add new qualification",
          "allOf": [
            {
			 "$ref": "#/definitions/AddFilesForEmployeeQualification"
            }
          ]
        }}
    },

   "UpdateQualificationParameter": {
      "type": "object",
      "required": [
        "APIKey",
        "Action",
		"EmployeeId",
		"QualificationId",
		"Qualification"],
      "properties": {
	  "APIKey": {
          "description": "APIKey for update qualification",
          "type": "string",
		  "allOf": [
            {
              "$ref": "#/definitions/APIKey"
            }
          ]
        },
        "Action": {
          "description": "Action name = UpdateQualification",
          "allOf": [
            {
              "$ref": "#/definitions/Action"
            }
          ],
		  "example":"UpdateQualification"
        },
		 "EmployeeId": {
          "description": "Employee id for update qualification",
          "allOf": [
            {
              "$ref": "#/definitions/EmployeeId"
            }
          ]
        },

		"QualificationId": {
          "description": "Qualification Id for update qualification",
          "allOf": [
            {
			  "$ref": "#/definitions/QualificationId"
            }
          ]
        },

         "Qualification": {
          "description": "Qualification for update qualification",
          "allOf": [
            {
              "$ref": "#/definitions/Qualification"
            }
          ]
        },
       "Subject": {
          "description": "Subject for update qualification",
          "allOf": [
            {
              "$ref": "#/definitions/Subject"
            }
          ]
        },
		 "DatePassed": {
          "description": "Date passed for update qualification",
          "allOf": [
            {
              "$ref": "#/definitions/DatePassed"
            }
          ]
        },
         "ExpiryDate": {
          "description": "Expiry date for update qualification",
          "allOf": [
            {
              "$ref": "#/definitions/ExpiryDate"
            }
          ]
        },
		"Comments": {
          "description": "Comments for update qualification",
          "allOf": [
            {
              "$ref": "#/definitions/Comments"
            }
          ],
		   "maxLength":"256"
        },
		"CustomColumns": {
          "description": "Custom columns",
          "allOf": [
            {
             "$ref": "#/definitions/CustomColumnsForEmployeeQualification"
            }
          ]
        },
		"AddFiles": {
          "description": "Add files",
          "allOf": [
            {
             "$ref": "#/definitions/AddFilesForEmployeeQualification"
            }
          ]
        }}
    },

   "DeleteQualificationParameter": {
      "type": "object",
      "required": [
        "APIKey",
        "Action",
		"EmployeeId",
		"QualificationId"],
      "properties": {
	  "APIKey": {
          "description": "APIKey for delete qualification",
          "type": "string",
		  "allOf": [
            {
			  "$ref": "#/definitions/APIKey"
            }
          ]
        },
        "Action": {
          "description": "Action name = DeleteQualification",
          "allOf": [
            {
			  "$ref": "#/definitions/Action"
            }
          ],
		 "example" : "DeleteQualification"
        },
		 "EmployeeId": {
          "description": "Employee id for delete qualification",
          "allOf": [
            {
			  "$ref": "#/definitions/EmployeeId"
            }
          ]
        },
         "QualificationId": {
          "description": "QualificationId for delete qualification",
          "allOf": [
            {
			  "$ref": "#/definitions/QualificationId"
            }
          ]
        }}
    },

   "DeleteTrainingDetailParameter": {
      "type": "object",
      "required": [
        "APIKey",
        "Action",
		"EmployeeId",
		"TrainingId"],
      "properties": {
	  "APIKey": {
          "description": "APIKey for delete training detail",
          "type": "string",
		  "allOf": [
            {
			  "$ref": "#/definitions/APIKey"
            }
          ]
        },
        "Action": {
          "description": "Action name = deletetrainingdetail",
          "allOf": [
            {
			  "$ref": "#/definitions/Action"
            }
          ],
		   "example": "deletetrainingdetail"
        },
		 "EmployeeId": {
          "description": "Employee id for delete training detail",
          "allOf": [
            {
			  "$ref": "#/definitions/EmployeeId"
            }
          ]
        },
         "TrainingId": {
          "description": "Training Id for delete training detail",
          "allOf": [
            {
			  "$ref": "#/definitions/TrainingId"
            }
          ]
        }}
    },

   "ResultForGetQualificationByQualificationIdObject": {
      "description": "The Result For Get Qualification By QualificationId Result Array",
        "type": "object",
        "properties": {
	   "QualificationId": {
          "description": "QualificationId Value",
          "type": "integer",
          "example": 1

        },
        "Qualification": {
          "description": "Qualification Value",
           "type": "string",
           "example": "MSC"

        },
		"Subject": {
          "description": "Subject Value",
          "type": "string",
          "example": "Computer science"

        },
		"DatePassed": {
          "description": "DatePassed Value",
          "type": "string",
	      "format":"date",
          "example": "2017-05-01"

        },
		"ExpiryDate": {
          "description": "ExpiryDate Value",
          "type": "string",
	      "format":"date",
          "example": "2018-07-07"

        },
		"Comments": {
          "description": "Comments Value",
           "type": "string",
           "example": "Comments goes here"

        },
		"Customfields": {
          "description": "Custom fields array",
          "allOf": [
            {
			 "$ref": "#/definitions/CustomColumnsForGetEmployeeQualification"
            }
          ]
        },
		"Files": {
          "description": "Files array",
          "allOf": [
            {
			 "$ref": "#/definitions/AddFilesForGetEmployeeQualification"
            }
          ]
        }}},

   "ResultForGetQualificationByEmployeeId": {
      "description": " Result Array",
      "type": "array",
      "items": {
        "type": "object",
        "properties": {

	   "QualificationId": {
          "description": "QualificationId value",
           "type": "integer",
          "example": 1

        },
        "Qualification": {
          "description": "Qualification value",
          "type": "string",
          "example": "MSC"

        },
		"Subject": {
          "description": "Subject value",
           "type": "string",
          "example": "Computer science"

        },
		"DatePassed": {
          "description": "DatePassed value",
          "type": "string",
	      "format":"date",
          "example": "2017-05-01"

        },
		"ExpiryDate": {
          "description": "ExpiryDate value",
          "type": "string",
	      "format":"date",
          "example": "2018-07-07"

        },
		"Comments": {
          "description": "Comments value",
          "type": "string",
          "example": "Comments goes here"

        },
		"Customfields": {
          "description": "Customfields array",
          "allOf": [
            {
			 "$ref": "#/definitions/CustomColumnsForGetEmployeeQualification"
            }
          ]
        },
		"Files": {
          "description": "Files array",
          "allOf": [
            {
			 "$ref": "#/definitions/AddFilesForGetEmployeeQualification"
            }
          ]
        }}}

    },

   "ResultForGetDrivingLicenseByEmployeeId": {
      "description": " Result Array",
      "type": "array",
      "items": {
            "type": "object",
			"properties": {

			   "DrivingId": {
				  "description": "DrivingId value",
				   "type": "integer",
				   "example": 2

				},
				"LicenseNumber": {
				  "description": "LicenseNumber value",
				  "type": "string",
				  "example": "Li555"

				},
				"LicenseType": {
				  "description": "LicenseType value",
				 "type": "string",
				 "example": "2 wheeler"

				},
				"ExpiryDate": {
				  "description": "ExpiryDate value",
				  "type": "string",
				  "format":"date",
				  "example": "2018-07-07"

				},
				"Comments": {
				  "description": "Comments value",
				  "type": "string",
				  "example": "Comments goes here"

				},
				"Customfields": {
				  "description": "Custom fields array",
				  "allOf": [
					{
					 "$ref": "#/definitions/CustomColumnsForGetEmployeeDriving"
					}
				  ]
				},
				"Files": {
				  "description": "Files array",
				  "allOf": [
					{
					 "$ref": "#/definitions/AddFilesForGetEmployeeDriving"
					}
				  ]
				}}}

    },

   "ResultForGetDrivingLicenseByDrivingIdObject": {
      "description": " Result Array",
      "type": "object",
      "properties": {
		   "DrivingId": {
			  "description": "DrivingId value",
			   "type": "integer",
			   "example": 2
			},
			"LicenseNumber": {
			  "description": "LicenseNumber value",
			  "type": "string",
			  "example": "Li555"

			},
			"LicenseType": {
			  "description": "LicenseType value",
			 "type": "string",
			 "example": "2 wheeler"

			},
			"ExpiryDate": {
			  "description": "ExpiryDate value",
			  "type": "string",
			  "format":"date",
			  "example": "2018-07-07"

			},
			"Comments": {
			  "description": "Comments value",
			   "type": "string",
			  "example": "Comments goes here"

			},
			"Customfields": {
			  "description": "Customfields array",
			  "allOf": [
				{
				 "$ref": "#/definitions/CustomColumnsForGetEmployeeDriving"
				}
			  ]
			},
			"Files": {
			  "description": "Files array",
			  "allOf": [
				{
				 "$ref": "#/definitions/AddFilesForGetEmployeeDriving"
				}
			  ]
			}}},

   "CustomColumnsForEmployeeQualification":{
	   "description": " Result Array",
	          "type": "array",
		"items":{
		"type": "object",
		"required": [
          "ColumnName"],
		"properties": {
          "ColumnName": {
            "description": "ColumnName for employee qualification",
            "type": "string",
			"maxLength": 100,
			"example":"Vehicle 1"
          },
          "ColumnValue": {
            "description": "ColumnValue for employee qualification",
            "type": "string",
			"example":"ABC"
          }}
		}
	},

   "AddFilesForEmployeeQualification":{
	   "description": " Result Array",
	          "type": "array",

		"items":{
		"type": "object",
		"required": [
          "DocumentName",
          "File",
		  "DocumentCategory",
		  "SignatureRequired"
        ],
		 "properties": {
          "DocumentName": {
            "description": "DocumentName for employee qualification",
            "type": "string",
			"maxLength": 100,
			"example":"my.txt"
          },
          "File": {
            "description": "File for employee qualification",
            "type": "string",
			"example":"Base 64 code"
          },
		  "Descriptions": {
            "description": "Descriptions for employee qualification",
            "type": "string",
			"maxLength": 256,
			"example":"Descriptions goes here"
          },
		  "DocumentCategory": {
            "description": "DocumentCategory for employee qualification",
            "type": "string",
			"maxLength": 100,
			"example":"Custom Catagory"
          },
		   "SignatureRequired": {
            "description": "SignatureRequired for employee qualification",
            "type": "string",
			"format":"boolean",
			"enum": [
				 "false",
				 "true"
          ],
			"example":"False"
          }}
		 }
	},

  "ResultForGetTrainingDetail": {
      "description": " Result Array",
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
		"TrainingId": {
          "description": "TrainingId Value",
		  "type": "integer",
          "example": 565

        },
	   "TrainingType": {
          "description": "Training type Value",
          "type": "string",
         "example": "Java"

        },
        "Description": {
          "description": "Description Value",
           "type": "string",
           "example": "Opps Concepts"

        },
		"Importance": {
          "description": "Importance Value",
           "type": "integer",
           "example": 1

        },
		"Status": {
          "description": "Status Value",
          "type": "integer",
          "example": 2

        },
		"PercentComplete": {
          "description": "Percent complete Value",
          "type": "integer",
	      "format":"decimal",
          "example": 0.01

        },
		"TrainingDate": {
          "description": "Training date Value",
           "type": "string",
	       "format":"date",
           "example": "2017-10-10"

        },
		"TrainingEndDate": {
          "description": "TrainingEndDate Value",
          "type": "string",
	      "format":"date",
          "example": "2015-10-11"

        },
		"TrainingExpiryDate": {
          "description": "TrainingExpiryDate Value",
          "type": "string",
	      "format":"date",
          "example": "2015-10-12"

        },
		"Provider": {
          "description": "Provider Value",
          "type": "string",
          "example": "John"

        },
		"Cost": {
          "description": "Cost Value",
          "type": "string",
	      "format":"decimal",
          "example": 0.01

        },
		"Note": {
          "description": "Note Value",
          "type": "string",
          "example": "Note goes here"

        },
		"CustomColumns": {
          "description": "CustomColumns Value",
          "allOf": [
            {
			 "$ref": "#/definitions/CustomColumnsForGetTrainingDetail"
            }
          ]
        }}}

  },

   "ResultGetByAppraisalIdObject": {
      "description": " Result Array",
        "type": "object",

        "properties": {
          "AppraisalId": {
            "description": " appraisal id value",
            "type": "number",
			"format":"integer",
			"example":383
          },
          "AppraisalReviewDate": {
            "description": " appraisal review date value",
            "type": "string",
			"format":"date",
			"example":"2017-05-01"
          },
		   "Reviewer": {
            "description": " Reviewer value",
            "type": "string",
			"example":"Krushna Bapat"
          },
		  "Note": {
            "description": "note value",
             "type": "string",
			 "example":"Notes goes here"
          },
		   "ActionPlan": {
            "description": " action plan value",
			 "type": "string",
			 "example":"11"
          },
		   "Objectives": {
            "description": " Objectives value",
            "type": "string",
			"example":"121"
          },
		  "Customfields": {
            "description": " Custom fields value",
            "allOf": [
            {
               "$ref": "#/definitions/ArrayForGetByAppraisalIdArray"
            }
          ]
          },
          "Files": {
            "description": " Files ",
             "allOf": [
            {
               "$ref": "#/definitions/ArrayForGetAppraisalByIdFile"
            }
          ]}}

    },

   "GetEmployeeByIdArray": {
      "description": " Result Array",
      "type": "array",
      "items": {
        "type": "object",

        "properties": {
          "AppraisalId": {
            "description": " appraisal id value",
            "type": "number",
			"format":"integer",
			"example":355
          },
          "AppraisalReviewDate": {
            "description": " appraisal review date value",
            "type": "string",
			"format":"date",
			"example":"2017-05-01"
          },
		   "Reviewer": {
            "description": " Reviewer value",
            "type": "string",
			"example":"Notification 1 Admin"
          },
		  "Note": {
            "description": "Note value",
             "type": "string",
			 "example":"Notes goes here"
          },
		   "ActionPlan": {
            "description": "Action plan value",
			 "type": "string",
			 "example":"11"
          },
		   "Objectives": {
            "description": " Objectives value",
            "type": "string",
			"example":"121"
          },
		  "Customfields": {
            "description": " Custom fields value",
           "allOf": [
            {
               "$ref": "#/definitions/ArrayForGetByAppraisalIdArray"
            }
          ]
          },
          "Files": {
            "description":"Files",
             "allOf": [
            {
               "$ref": "#/definitions/ArrayForGetAppraisalByIdFile"
            }
          ]}
        }
      }
    },

   "ArrayForGetByAppraisalIdArray":{
	 "type": "array",
	  "items" :{

	  "type":"object",
      "properties": {
        "ColumnName": {
          "description": "ColumnName value",
          "type": "string",
		  "example":"MNO"
        },
		"ColumnValue": {
          "description": "Column Value",
          "type": "string",
		  "example":"file"
        }
      }
	  }
	},
   "ArrayForGetAppraisalByIdFile":{
	 "type": "array",
	  "items" :{

	  "type":"object",
      "properties": {
        "DocumentName": {
          "description": "DocumentName value",
          "type": "string",
		  "example":"filelode.pdf"
        },
		"Description": {
          "description": "Description value",
          "type": "string",
		  "example":"dsddsds"
        } ,
		"FileUrl": {
          "description": "FileUrl value",
          "type": "string",
		  "format":"url",
		  "example":"http://reportsto.localhost.net:12345/Handlers/MyDocsViewer.ashx?bf26a772-3891-449e-b8f6-a06248b455b3"
        } ,
		"Category": {
          "description": "Category value",
          "type": "string",
		  "example":"catagory"
        } ,
		"SignatureRequired": {
          "description": "SignatureRequired value",
          "type": "string",
		  "enum":
		    [
			   "false",
			   "true"
			],
			"example":"false"
        }
      }
	  }
	},

   "ResultCreateNewApplicant" :{
	  	"type":"object",
       "properties": {
        "IsDuplicate": {
          "type": "boolean",
		  "description": "Is duplicate value ",
		  "example": "true",
		  "enum":["false","true"]
         },
		 "ApplicantId": {
          "type": "integer",
		  "description": "ApplicantId value ",
		  "example": 4
         }
		}
	 },

   "ResultCheckDuplicateApplicant" :{
	  	"type":"object",
       "properties": {
        "IsDuplicate": {
          "type": "boolean",
		  "description": "IsDuplicate value ",
		  "example": "true",
		  "enum":["false","true"]
         }
		}
	 },

   "ResultWorkPatternApplicant" :{
	 "description": " Result Array",
      "type": "array",
      "items": {
        "type": "object",
			"properties": {

				"WorkPatternId": {
				  "type": "integer",
				  "description": "Work pattern id value",
				  "example": 2
				 },
				 "WorkPatternName": {
				  "type": "string",
				  "description": "Work pattern name value",
				  "example": "Monday to Friday 9am to 5.30pm (37.5 Hrs)"
				},
				"Week":{
				 "description": "Array of Week",
				 "allOf": [
					{
					  "$ref": "#/definitions/WeekArrayForWorkPattern"
					}
				]
				},

				"AssignedTo":{
				 "description": "Array of assignee to",
				 "allOf": [
					{
					  "$ref": "#/definitions/AssignedToArrayForWorkPattern"
					}
				]
				}
			}
		}
	 },

   "AssignedToArrayForWorkPattern" :{
	  "type": "array",
	   "description":"Result array",
	  "items": {
        "type": "object",
		   "properties": {
				 "EmployeeId": {
				  "type": "string",
				  "description": "Employee Id value",
				  "example": "PW66"
				 },

				  "FirstName": {
				  "type": "string",
				  "description": "First name  value",
				  "example": "Vaibhavi"
				 },

				"LastName": {
				  "type": "string",
				  "description": "Last name value",
				  "example": "Desai"
				 }}
		}
	 },
   "WeekArrayForWorkPattern" :{
      "type": "array",
	   "description":"Result array",
	   "items": {
        "type": "object",
		   "properties": {
				 "WeekNumber": {
				  "type": "integer",
				  "description": "Week number value",
				  "example": 2
				 },

				"WeekDetail":{
				"description": "Array For Work Detail",
				 "allOf": [
					{
					  "$ref": "#/definitions/WeekDetailArrayForWorkPattern"
					}
				]
				}

			}
		}
	 },

   "WeekDetailArrayForWorkPattern" :{
	  "type": "array",
	   "description":"Result array",
	   "items": {
        "type": "object",
		   "properties": {
				 "WeekNumber": {
				  "type": "integer",
				  "description": "Week number value",
				  "example": 2
				 },

				"WorkPatternDay":{
				"type":"string",
				"description": "Week detail contains array For work pattren",
				 "example": "Monday",
				 "enum":[
				 "Monday",
				 "Tuesday",
				 "Wednesday",
				 "Thursday",
				 "Friday",
				 "Saturday",
				 "Sunday"

				 ]

				},

				"TotalWorkingDays":{
                            "type": "integer",
                            "format": "double",
				"description": "Total working days value",
				 "example":  "1.00"
				},

				"TotalWorkingMins":{
				"type":"integer",
				"description": "Total working days value",
				 "example": "450"
				},

				"ShiftStartTime":{
				"type":"string",
				"description": "Shift start time value",
				 "example": "9.30"
				},

				"ShiftEndTime":{
				"type":"string",
				"description": "Shift end time value",
				 "example": "6.30"
				},

				"BreakTime":{
				"type":"string",
				"description": " break time value",
				 "example": "1.30pm"
				}}
		}
	 },

   "ResultGetLateByEmployeeId": {
      "description": " Result Array",
      "type": "array",
      "items": {
      "type": "object",
			"properties": {

					"EmployeeId": {"type": "integer","description": "Employee id value ","example": 22957},
				   "LateDate": {"type": "string","format":"date","description": "Late Date value ","example": "2017-07-18"
						},
				  "LateMinutes": {"type": "integer","description": "Late minutes value ","example": 10
						},
				  "Comments": {"type": "string","description": "Comments  value ","example": "Comments goes here" }
			}
		}

    },

   "ResultGetVacancyObject": {
      "description": " Result Array",
      "type": "object",

        "properties": {

		"VacancyName": {
          "description": "Vacancy name value",
          "type": "string",
          "example": "IT Programmer"
        },
		"VacancyDescription": {
          "description": "Vacancy description value",
          "type": "string",
          "example": "IT Programmer"
        },
		"Company": {
          "description": "Company name value",
          "type": "string",
         "example": "Company name"
        },
		"Location": {
          "description": "Location value",
          "type": "string",
          "example": "Mumbai"
        },
		"Department": {
          "description": "Department value",
          "type": "string",
          "example": "IT"
        },
		"Status": {
          "description": "Status value",
           "type": "integer",
           "example": 2
        },
		"ClosingDate": {
          "description": "Closing date value",
          "type": "string",
	      "format": "date",
          "example": "2016-07-31"
        },
		"Reference": {
          "description": "Reference value",
          "type": "string",
          "example": "VA4"
        },

		"SalaryRange": {
          "description": "Salary range value",
          "type": "string",
          "example": "10000"
        },
		"JobDescription": {
          "description": "Job description value",
          "type": "string",
          "example": "Job Description"
        },
		"IsHideSalary": {
          "description": "IsHideSalary value",
           "type": "boolean",
           "example": false,
	       "enum":["false","true"]
        },
		"JobTitle": {
          "description": "Job title value",
          "type": "string",
          "example": "Software Engineer"
        },
		"VacancyType": {
          "description": "Vacancy type value",
          "type": "string",
          "example": "Internal",
		  "enum":[
			  "External",
			  "Internal",
			  "Both"
			]
        },
		"City": {
          "description": "City value",
          "type": "string",
          "example": "Mumbai"
        },
		"Country": {
          "description": "Country value",
          "type": "string",
          "example": "India"
        },
		"Experience": {
          "description": "Experience value",
          "type": "string",
          "example": "4 Year"
        },
		"JobBordUrl": {
          "description": "JobBordUrl value",
          "type": "string",
	      "format":"url",
          "example": "http://itgpeoplehr.localhost.net:12345/Pages/JobBoard/Opening.aspx?v=b3df0ea6-69ec-458e-a045-a85c92de6514"
        },

		 "AdditionalQuestions": {
          "description": "Additional questions array list",
          "allOf": [
            {
              "$ref": "#/definitions/ResultAdditionalQuestionsArrayobject"
            }
          ]
        },

		 "InternalQuestions": {
          "description": "Internal questions array list",
          "allOf": [
            {
              "$ref": "#/definitions/ResultInternalQuestionsArrayobject"
            }
          ]
        }}

    },

   "ResultGetAllVacancyObject": {
      "description": " Result Array",
      "type": "array",
      "items": {
        "type": "object",
			"properties": {

			"VacancyName": {
			  "description": "Vacancy name value",
			  "type": "string",
              "example": "IT Programmer"
			},
			"VacancyDescription": {
			  "description": "Vacancy description value",
			  "type": "string",
              "example": "IT Programmer"
			},
			"Company": {
			  "description": "Company name value",
			  "type": "string",
              "example": "Company name"
			},
			"Location": {
			  "description": "Location value",
			  "type": "string",
              "example": "Mumbai"
			},
			"Department": {
			  "description": "Department value",
			  "type": "string",
              "example": "IT"
			},
			"Status": {
			  "description": "Status value",
			  "type": "integer",
              "example": 2
			},
			"ClosingDate": {
			  "description": "Closing date value",
			  "type": "string",
	          "format": "date",
              "example": "2016-07-31"
			},
			"Reference": {
			  "description": "Reference value",
			  "type": "string",
              "example": "VA4"
			},

			"SalaryRange": {
			  "description": "Salary range value",
			  "type": "string",
              "example": "10000"
			},
			"JobDescription": {
			  "description": "Job description value",
			  "type": "string",
              "example": "Job Description"
			},
			"IsHideSalary": {
			  "description": "IsHideSalary value",
			  "type": "boolean",
              "example": false,
	          "enum":["false","true"]
			},
			"JobTitle": {
			  "description": "Job title value",
			  "type": "string",
              "example": "Software Engineer"
			},
			"VacancyType": {
			  "description": "Vacancy type value",
			  "type": "string",
			  "example": "Internal",
			  "enum":[
				  "External",
				  "Internal",
				  "Both"
			    ]
			},
			"City": {
			  "description": "City value",
			  "type": "string",
              "example": "Mumbai"
			},
			"Country": {
			  "description": "Country value",
			  "type": "string",
              "example": "India"
			},
			"Experience": {
			  "description": "Experience value",
			  "type": "string",
              "example": "4 Year"
			},
			"JobBordUrl": {
			  "description": "JobBordUrl value",
			  "type": "string",
	          "format":"url",
              "example": "http://itgpeoplehr.localhost.net:12345/Pages/JobBoard/Opening.aspx?v=b3df0ea6-69ec-458e-a045-a85c92de6514"
			},

			 "AdditionalQuestions": {
			  "description": "Additional questions array list",
			  "allOf": [
				{
				  "$ref": "#/definitions/ResultAdditionalQuestionsArrayobject"
				}
			  ]
			},

			 "InternalQuestions": {
			  "description": "Internal questions array list",
			  "allOf": [
				{
				  "$ref": "#/definitions/ResultInternalQuestionsArrayobject"
				}
			  ]
			}}

		}

    },

   "ResultInternalQuestionsArrayobject": {
      "type": "array",
	  "items" :{
	  "type":"object",
      "properties": {
        "QuestionId": {
          "type": "string",
		  "description": "Question id value ",
		  "example": "2"
        },
		"QuestionType": {
          "type": "string",
		  "description": "Question type value ",
		  "example": "1"
        },
		"IsMandatory": {
          "type": "boolean",
		  "description": "Is mandatory type value ",
		  "example": "true",
		  "enum":["true","false"]
        },
		"Question": {
          "type": "string",
		  "description": "Question type value ",
		  "example": "Please indicate your gender"
        },
		"AdditionalOrInternalType": {
          "type": "integer",
		  "description": "Additional or internal type value ",
		  "example": "1"
        },

		"QuestionOptions": {
          "description": "Question options list value",
          "allOf": [
            {
             "$ref": "#/definitions/ResultlstInternalQuestions"
            }
          ]
        }}
	  }
    },

	"ResultlstInternalQuestions": {
      "description": "Question options list",
      "type": "array",
	  "items":{
	    "type": "object",
           "properties": {

		     "QuestionOptions": {
			    "type": "string",
			    "description": "QuestionOptions value"}

        }
	  }

    },

	"Result1GetTimesheetArray": {
      "description": " Result Array",
      "type": "array",
      "items": {
        "type": "object",

        "properties": {
		   "TimesheetDate": {
				  "type": "string",
				   "format": "date",
				  "description": "timesheetDate default value ",
				  "example": "2014-01-01"
			},
			"TimeIn1": {
				  "type": "string",
				  "format": "timespan",
				   "description": "TimeIn1 value ",
				  "example": "09:35"

				},
		    "TimeOut1": {
				  "type": "string",
				  "format": "timespan",
				  "description": "TimeOut1 value ",
				  "example": "04:00"
				},
			"TimeIn2": {
				  "type": "string",
				  "format": "timespan",
				 "description": "TimeIn2 value ",
				  "example": "09:45"
				},
		"TimeOut2": {
                  "type": "string",
				  "format": "timespan",
				  "description": "TimeOut2 value ",
				  "example": "04:00"
         },
		"TimeIn3": {
				"type": "string",
				  "format": "timespan",
				 "description": "TimeIn3 value ",
				  "example": "09:45"
        },
		"TimeOut3": {
				  "type": "string",
				  "format": "timespan",
				  "description": "TimeOut3 value ",
				  "example": "04:00"
        },
		"TimeIn4": {
				 "type": "string",
				  "format": "timespan",
				 "description": "TimeIn4 value ",
				  "example": "09:45"
        },
		"TimeOut4": {
				 "type": "string",
				  "format": "timespan",
				  "description": "TimeOut4 value ",
				  "example": "04:00"
           },
		"TimeIn5": {
                  "type": "string",
				  "format": "timespan",
				 "description": "TimeIn5 value ",
				  "example": "09:45"
         },
		"TimeOut5": {
           "type": "string",
				  "format": "timespan",
				  "description": "TimeOut5 value ",
				  "example": "04:00"
        },
		"TimeIn6": {
         "type": "string",
				  "format": "timespan",
				 "description": "TimeIn6 value ",
				  "example": "09:45"
        },
		"TimeOut6": {
				"type": "string",
				  "format": "timespan",
				  "description": "TimeOut6 value ",
				  "example": "04:00"
        },
		"TimeIn7": {
				"type": "string",
				  "format": "timespan",
				 "description": "TimeIn7 value ",
				  "example": "09:45"
        },
		"TimeOut7": {
				"type": "string",
				  "format": "timespan",
				  "description": "TimeOut7 value ",
				  "example": "04:00"
        },
		"TimeIn8": {
				 "type": "string",
				  "format": "timespan",
				 "description": "TimeIn8 value ",
				  "example": "09:45"
        },
		"TimeOut8": {
				"type": "string",
				  "format": "timespan",
				  "description": "TimeOut8 value ",
				  "example": "04:00"
        },
		"TimeIn9": {
				"type": "string",
				  "format": "timespan",
				 "description": "TimeIn9 value ",
				  "example": "09:45"
        },
		"TimeOut9": {
          "type": "string",
				  "format": "timespan",
				  "description": "TimeOut9 value ",
				  "example": "04:00"
        },
		"TimeIn10": {
          "type": "string",
				  "format": "timespan",
				 "description": "TimeIn10 value ",
				  "example": "09:45"
        },
		"TimeOut10": {
          "type": "string",
				  "format": "timespan",
				  "description": "TimeOut10 value ",
				  "example": "04:00"
        },
		"TimeIn11": {
				"type": "string",
				  "format": "timespan",
				 "description": "TimeIn11 value ",
				  "example": "09:45"
        },
		"TimeOut11": {
         "type": "string",
				  "format": "timespan",
				  "description": "TimeOut11 value ",
				  "example": "04:00"
        },
		"TimeIn12": {
          "type": "string",
				  "format": "timespan",
				 "description": "TimeIn12 value ",
				  "example": "09:45"
        },
		"TimeOut12": {
				"type": "string",
				  "format": "timespan",
				  "description": "TimeOut12 value ",
				  "example": "04:00"
        },
		"TimeIn13": {
          "type": "string",
				  "format": "timespan",
				 "description": "TimeIn13 value ",
				  "example": "09:45"
        },
		"TimeOut13": {
				"type": "string",
				  "format": "timespan",
				  "description": "TimeOut13 value ",
				  "example": "04:00"
        },
		"TimeIn14": {
				"type": "string",
				  "format": "timespan",
				 "description": "TimeIn14 value ",
				  "example": "09:45"
        },
		"TimeOut14": {
         "type": "string",
				  "format": "timespan",
				  "description": "TimeOut14 value ",
				  "example": "04:00"
        },
		"TimeIn15": {
				"type": "string",
				  "format": "timespan",
				 "description": "TimeIn15 value ",
				  "example": "09:45"
        },
		"TimeOut15": {
          "type": "string",
				  "format": "timespan",
				  "description": "TimeOut15 value ",
				  "example": "04:00"
        },

		"TotalTimeWorkedTodayInMins": {
           "type": "string",
			"description": "Total time worked today in mins value",
			"example": "405"
        },
		"TotalTimeWorkedThisWeekInMins": {
           "type": "string",
		   "description": "Total time worked this week in mins value",
          "example": "405"
        },

		"TotalTimeWorkedThisMonthInMins": {
           "type": "string",
		   "description": "Total time worked this month in mins value",
		  "example": "405"
        },

		"IPAddressTimeIn1": {
           "type": "string",
			"description": "IP address time in 1 value",
			"example": "192.168.0.156"
        },
		"IPAddressTimeIn2": {
          "type": "string",
		  "description": "IP address time in 2 value",
		  "example": "192.168.0.156"
        },
		"IPAddressTimeIn3": {
          "type": "string",
		  "description": "IP address time in 3 value",
		  "example": "192.168.0.156"
        },
		"IPAddressTimeIn4": {
         "type": "string",
		  "description": "IP address time in 4 value",
		  "example": "192.168.0.156"
        },
		"IPAddressTimeIn5": {
         "type": "string",
		  "description": "IP address time in 5 value",
		  "example": "192.168.0.156"
        },
		"IPAddressTimeIn6": {
         "type": "string",
		  "description": "IP address time in 6 value",
		  "example": "192.168.0.156"
        },
		"IPAddressTimeIn7": {
          "type": "string",
		  "description": "IP address time in 7 value",
		  "example": "192.168.0.156"
        },
		"IPAddressTimeIn8": {
         "type": "string",
		  "description": "IP address time in 8 value",
		  "example": "192.168.0.156"
        },
		"IPAddressTimeIn9": {
         "type": "string",
		  "description": "IP address time in 9 value",
		  "example": "192.168.0.156"
        },
		"IPAddressTimeIn10": {
          "type": "string",
		  "description": "IP address time in 10 value",
		  "example": "192.168.0.156"
        },
		"IPAddressTimeIn11": {
          "type": "string",
		  "description": "IP address time in 11 value",
		  "example": "192.168.0.156"
        },
		"IPAddressTimeIn12": {
         "type": "string",
		  "description": "IP address time in 12 value",
		  "example": "192.168.0.156"
        },
		"IPAddressTimeIn13": {
          "type": "string",
		  "description": "IP address time in 13 value",
		  "example": "192.168.0.156"
        },
		"IPAddressTimeIn14": {
          "type": "string",
		  "description": "IP address time in 14 value",
		  "example": "192.168.0.156"
        },
		"IPAddressTimeIn15": {
          "type": "string",
		  "description": "IP address time in 15 value",
		  "example": "192.168.0.156"
        },

		"IPAddressTimeOut1": {
           "type": "string",
			"description": "IP address time out 1 value",
			"example": "192.168.0.156"
        },

		"IPAddressTimeOut2": {
          "type": "string",
			"description": "IP address time out 2 value",
			"example": "192.168.0.156"
        },
		"IPAddressTimeOut3": {
        "type": "string",
			"description": "IP address time out 3 value",
			"example": "192.168.0.156"
        },
		"IPAddressTimeOut4": {
          "type": "string",
			"description": "IP address time out 4 value",
			"example": "192.168.0.156"
        },
		"IPAddressTimeOut5": {
          "type": "string",
			"description": "IP address time out 5 value",
			"example": "192.168.0.156"
        },
		"IPAddressTimeOut6": {
          "type": "string",
			"description": "IP address time out 6 value",
			"example": "192.168.0.156"
        },
		"IPAddressTimeOut7": {
          "type": "string",
			"description": "IP address time out 7 value",
			"example": "192.168.0.156"
        },
		"IPAddressTimeOut8": {
          "type": "string",
			"description": "IP address time out 8 value",
			"example": "192.168.0.156"
        },
		"IPAddressTimeOut9": {
          "type": "string",
			"description": "IP address time out 9 value",
			"example": "192.168.0.156"
        },
		"IPAddressTimeOut10": {
          "type": "string",
			"description": "IP address time out 10 value",
			"example": "192.168.0.156"
        },
		"IPAddressTimeOut11": {
          "type": "string",
			"description": "IP address time out 11 value",
			"example": "192.168.0.156"
        },
		"IPAddressTimeOut12": {
          "type": "string",
			"description": "IP address time out 12 value",
			"example": "192.168.0.156"
        },
		"IPAddressTimeOut13": {
         "type": "string",
			"description": "IP address time out 13 value",
			"example": "192.168.0.156"
        },
		"IPAddressTimeOut14": {
         "type": "string",
			"description": "IP address time out 14 value",
			"example": "192.168.0.156"
        },
		"IPAddressTimeOut15": {
         "type": "string",
			"description": "IP address time out 15 value",
			"example": "192.168.0.156"
        },
		"TimesheetState": {
          "type": "string",
		  "format": "date",
          "description": "TimesheetState value ",
          "example": "Complete"
        },
		"Comments": {
           "type": "string",
			"description": "Comments value",
			"example": "Complete"
        },
		"ChangedDate": {
          "type": "string",
		  "format": "date",
		  "description": "ChangedDate value",
		  "example": "2017-07-19"
        }


        }

      }
    },

	"Result1GetHolidayDetailArray": {
      "description": " Result Array",
      "type": "array",
      "items": {
        "type": "object",

        "properties": {

		"StartDate": {
          "description": "Start date value",
              "type": "string",
			   "format":"date",
			  "example": "2016-07-27"
        },
		"EndDate": {
          "description": "End date value",
          "type": "string",
		  "format":"date",
		  "example": "2017-07-27"
        },
		"DurationType": {
          "description": "DurationType value",
          "type": "integer",
          "example": 1
        },
		"DurationInDays": {
          "description": "DurationInDays value",
           "type": "integer",
	       "format":"decimal",
           "example": 1.00
        },
		"DurationInMinutes": {
          "description": "DurationInMinutes value",
          "type": "integer",
		  "example": 450
        },

		"DurationInDaysThisPeriod": {
          "description": "DurationInDaysThisPeriod value",
           "type": "integer",
	       "format":"decimal",
           "example": 1.00
        },
		"DurationInMinutesThisPeriod": {
          "description": "DurationInMinutesThisPeriod value",
          "type": "integer",
		  "example": 450
        },

		"PartOfDay": {
          "description": "PartOfDay value",
          "type": "string",
		  "enum": [
				   "AM",
				   "PM"
			],
		 "example": "AM"
        },
		"RequesterComments": {
          "description": "RequesterComments value",
          "type": "string",
          "example": "asach test 20"
        },
		"ApproverComments": {
          "description": "ApproverComments value",
           "type": "string",
           "example": "Auto Approved"
        },
		"Approver": {
          "description": "Approver value",
          "type": "string",
		  "example": "Vaibhavi Desai"
        },
		"Status": {
          "description": "Status value",
          "type": "string",
	      "enum": [
			   "Submitted",
		       "Approved",
		       "Rejected"],
         "example": "Approved"
        },
		"LastActionDateTime": {
          "description": "LastActionDateTime value",
          "type": "string",
	      "format":"datetime",
          "example": "2017-07-20 19:06:17"
        },
		"IsToilHoliday": {
          "description": "IsToilHoliday value",
          "type": "boolean",
		   "enum": [
			   "false",
			   "true"
			],
		 "example": false
        }


        }

      }
    },

	"Result1GetList5Array": {
      "description": " Result Array",
      "type": "array",
      "items": {
        "type": "object",

        "properties": {
        "EmployeeId": {
          "description": "EmployeeId contain displayValue and FieldHistory array",
          "allOf": [
            {
              "$ref": "#/definitions/EmployeeIdArrayObject"
            }
          ]
        },
		"Title": {
          "description": " Title ",
          "allOf": [
            {
              "$ref": "#/definitions/TitleObject"
            }
          ]
        },
		"FirstName": {
          "description": "FirstName of employee ",
          "allOf": [
            {
              "$ref": "#/definitions/FirstNameObject"
            }
          ]
        },
		"LastName": {
          "description": "LastName of employee ",
          "allOf": [
            {
              "$ref": "#/definitions/LastNameObject"
            }
          ]
        },
		"OtherName": {
          "description": "OtherName of employee ",
          "allOf": [
            {
              "$ref": "#/definitions/OtherNameObject"
            }
          ]
        },
		"KnownAs": {
          "description": "KnownAs",
          "allOf": [
            {
              "$ref": "#/definitions/KnownAsObject"
            }
          ]
        },
		"EmailId": {
          "description": "EmailId of employee",
          "allOf": [
            {
              "$ref": "#/definitions/EmailIdObject"
            }
          ]
        },
		"StartDate": {
          "description": "StartDate of employee",
          "allOf": [
            {
              "$ref": "#/definitions/StartDateObject"
            }
          ]
        },
		"DateOfBirth": {
          "description": "DateOfBirth of employee",
          "allOf": [
            {
              "$ref": "#/definitions/DateOfBirthObject"
            }
          ]
        },
		"JobRole": {
          "description": "JobRole of employee",
          "allOf": [
            {
              "$ref": "#/definitions/JobRoleObject"
            }
          ]
        },
		"Company": {
          "description": "Company name of employee",
          "allOf": [
            {
              "$ref": "#/definitions/CompanyObject"
            }
          ]
        },
		"CompanyEffectiveDate": {
          "description": "Company effective date value",
		  "type":"object",
           "properties": {
			 "DisplayValue": {
			    "description": "Company effective date value",
			    "type": "string",
			    "allOf": [
				  {
				    "$ref": "#/definitions/DisplayValue"
				  }
			    ],
				 "format":"date",
				"example": "2014-01-01"
			  }
          }},
		"Location": {
          "description": "Location name of employee",
          "allOf": [
            {
              "$ref": "#/definitions/LocationObject"
            }
          ]
        },
		"LocationEffectiveDate": {
          "description": "Location effective date value",
		  "type":"object",
           "properties": {
			 "DisplayValue": {
			    "description": "Location effective date value",
			    "type": "string",
			    "allOf": [
				  {
				    "$ref": "#/definitions/DisplayValue"
				  }
			    ],
				"format":"date",
               "example": "2017-02-02"
			  }
          }},
		"Department": {
          "description": "Department name of employee",
          "allOf": [
            {
              "$ref": "#/definitions/DepartmentObject"
            }
          ]
        },
		"DepartmentEffectiveDate": {
          "description": "Department effective date value",
		  "type":"object",
           "properties": {
			 "DisplayValue": {
			    "description": "Department effective date value",
			    "type": "string",
			    "allOf": [
				  {
				    "$ref": "#/definitions/DisplayValue"
				  }
			    ],
			   "format":"date",
               "example": "2017-05-01"
			  }
          }},
		"JobRoleChangeDate": {
          "description": "Job role change date value",
		  "type":"object",
           "properties": {
			 "DisplayValue": {
			    "description": "Job role change date value",
			    "type": "string",
			    "allOf": [
				  {
				    "$ref": "#/definitions/DisplayValue"
				  }
			    ],
			    "format":"date",
               "example": "2017-05-05"
			  }
          }},
		"ReportsTo": {
          "description": "Reports to value",
          "allOf": [
            {
              "$ref": "#/definitions/ReportsToObject"
            }
          ]
        },
		"ReportsToEffectiveDate": {
          "description": "Reports to effective date value",
		  "type":"object",
           "properties": {
			 "DisplayValue": {
			    "description": "Reports to effective date value",
			    "type": "string",
			    "allOf": [
				  {
				    "$ref": "#/definitions/DisplayValue"
				  }
			    ],
			   "format":"date",
               "example": "2016-06-06"
			  }
          }},
		"ReportsToEmployeeId": {
          "description": "Reports to employee id value",
		  "type":"object",
           "properties": {
			 "DisplayValue": {
			    "description": "Reports to employee id value",
			    "type": "string",
			    "allOf": [
				  {
				    "$ref": "#/definitions/DisplayValue"
				  }
			    ],
				 "example": "PW6"
			  }
          }},
		"ReportsToEmailAddress": {
          "description": "Reports to email address value",
		  "type":"object",
           "properties": {
			 "DisplayValue": {
			    "description": "Reports to email address value",
			    "type": "string",
			    "allOf": [
				  {
				    "$ref": "#/definitions/DisplayValue"
				  }
			    ],
			   "format":"email",
               "example": "abc.xyz@itgurusssoftware.com"
			  }
          }},
		"NISNumber": {
          "description": "NIS number value",
          "allOf": [
            {
              "$ref": "#/definitions/NISNumberObject"
            }
          ]
        },
		"Nationality": {
          "description": "Nationality value",
          "allOf": [
            {
              "$ref": "#/definitions/NationalityObject"
            }
          ]
        },
		"EmploymentType": {
          "description": "Employment type value",
          "allOf": [
            {
              "$ref": "#/definitions/EmploymentTypeObject"
            }
          ]
        },
		"EmploymentTypeEffectiveDate": {
          "description": "Employment type effective date value",
		  "type":"object",
           "properties": {
			 "DisplayValue": {
			    "description": "Employment type effective date value",
			    "type": "string",
			    "allOf": [
				  {
				    "$ref": "#/definitions/DisplayValue"
				  }
			    ],
				"format":"date",
                "example": "2017-07-01"
			  }
          }},
		"EmployeeStatus": {
          "description": "Employee status value",
		  "type":"object",
           "properties": {
			 "DisplayValue": {
			    "description": "Employee status value",
			    "type": "string",
			    "allOf": [
				  {
				    "$ref": "#/definitions/DisplayValue"
				  }
			    ],
				 "example": "1"
			  }
          }},
		"HolidayAllowanceDays": {
          "description": "Holiday allowance days value",
		  "type":"object",
           "properties": {
			 "DisplayValue": {
			    "description": "Holiday allowance days value",
			    "type": "string",
			    "allOf": [
				  {
				    "$ref": "#/definitions/DisplayValue"
				  }
			    ],
				  "example": "0.00"
			  }
          }},
		"HolidayAllowanceMins": {
          "description": "Holiday allowance mins value",
		  "type":"object",
           "properties": {
			 "DisplayValue": {
			    "description": "Holiday allowance mins value",
			    "type": "string",
			    "allOf": [
				  {
				    "$ref": "#/definitions/DisplayValue"
				  }
			    ],
			   "example": "0"
			  }
          }},
		"NoticePeriod": {
          "description": "Notice period value",
          "allOf": [
            {
              "$ref": "#/definitions/NoticePeriodObject"
            }
          ]
        },
		"ProbationEndDate": {
          "description": "Probation end date value",
          "allOf": [
            {
              "$ref": "#/definitions/ProbationEndDateObject"
            }
          ]
        },
		"Gender": {
          "description": "Gender value",
          "allOf": [
            {
              "$ref": "#/definitions/GenderObject"
            }
          ]
        },

		"ContactDetail": {
          "description": "Contact detail value",
          "allOf": [
            {
              "$ref": "#/definitions/ContactDetailObject"
            }
          ]
        },
		"OtherContact": {
          "description": "Other Contact detail value",
          "allOf": [
            {
              "$ref": "#/definitions/OtherContactObject"
            }
          ]
        },
		"RightToWork": {
          "description": "Right to work value",
          "allOf": [
            {
              "$ref": "#/definitions/RightToWorkObject"
            }
          ]
        },
		"BackgroundDetail": {
          "description": "Background detail value",
          "allOf": [
            {
              "$ref": "#/definitions/BackgroundDetailObject"
            }
          ]
        },
		"BankDetail": {
          "description": "Bank detail value",
          "allOf": [
            {
              "$ref": "#/definitions/BankDetailObject"
            }
          ]
        },
		"EmploymentDetail": {
          "description": "Employment detail value",
          "allOf": [
            {
              "$ref": "#/definitions/EmploymentDetailObject"
            }
          ]
        },
		"LeavingDate": {
          "description": "LeavingDate value",
          "allOf": [
            {
             "$ref": "#/definitions/LeavingDate"
            }
          ]
        },
		"ReasonForLeaving": {
          "description": "Reason for leaving value",
          "allOf": [
            {
             "$ref": "#/definitions/ReasonforLeaving"
            }
          ]
        },
		"EmployeeImage": {
          "description": "Employee image value",
          "allOf": [
            {
             "$ref": "#/definitions/EmployeeImagePath"
            }
          ]
        },
		"APIColumn1": {
          "description": "API column 1 value",
          "allOf": [
            {
             "$ref": "#/definitions/APIColumn1"
            }
          ]
        },
		"APIColumn2": {
          "description": "API column 2 value",
          "allOf": [
            {
             "$ref": "#/definitions/APIColumn2"
            }
          ]
        },
		"APIColumn3": {
          "description": "API column 3 value",
          "allOf": [
            {
             "$ref": "#/definitions/APIColumn3"
            }
          ]
        },
		"APIColumn4": {
          "description": "API column 4 value",
          "allOf": [
            {
             "$ref": "#/definitions/APIColumn4"
            }
          ]
        },
		"APIColumn5": {
          "description": "API column 5 value",
          "allOf": [
            {
             "$ref": "#/definitions/APIColumn5"
            }
          ]
        },

		"lstFieldHistoryJobrole": {
          "description": "list of Field history job role",
          "allOf": [
            {
             "$ref": "#/definitions/lstFieldHistoryJobrole"
            }
          ]
        }

        }

      }
    },

    "ResultGetEmployeeDetail": {
      "description": " Result Array",
      "type": "object",

        "properties": {
        "EmployeeId": {
          "description": "EmployeeId contain displayValue and FieldHistory array",
          "allOf": [
            {
              "$ref": "#/definitions/EmployeeIdArrayObject"
            }
          ]
        },
		"Title": {
          "description": " Title ",
          "allOf": [
            {
              "$ref": "#/definitions/TitleObject"
            }
          ]
        },
		"FirstName": {
          "description": "FirstName of employee ",
          "allOf": [
            {
              "$ref": "#/definitions/FirstNameObject"
            }
          ]
        },
		"LastName": {
          "description": "LastName of employee ",
          "allOf": [
            {
              "$ref": "#/definitions/LastNameObject"
            }
          ]
        },
		"OtherName": {
          "description": "OtherName of employee ",
          "allOf": [
            {
              "$ref": "#/definitions/OtherNameObject"
            }
          ]
        },
		"KnownAs": {
          "description": "KnownAs",
          "allOf": [
            {
              "$ref": "#/definitions/KnownAsObject"
            }
          ]
        },
		"EmailId": {
          "description": "EmailId of employee",
          "allOf": [
            {
              "$ref": "#/definitions/EmailIdObject"
            }
          ]
        },
		"StartDate": {
          "description": "StartDate of employee",
          "allOf": [
            {
              "$ref": "#/definitions/StartDateObject"
            }
          ]
        },
		"DateOfBirth": {
          "description": "DateOfBirth of employee",
          "allOf": [
            {
              "$ref": "#/definitions/DateOfBirthObject"
            }
          ]
        },
		"JobRole": {
          "description": "JobRole of employee",
          "allOf": [
            {
              "$ref": "#/definitions/JobRoleObject"
            }
          ]
        },
		"Company": {
          "description": "Company name of employee",
          "allOf": [
            {
              "$ref": "#/definitions/CompanyObject"
            }
          ]
        },
		"CompanyEffectiveDate": {
          "description": "Company effective date value",
		  "type":"object",
           "properties": {
			 "DisplayValue": {
			    "description": "Company effective date value",
			    "type": "string",
			    "allOf": [
				  {
				    "$ref": "#/definitions/DisplayValue"
				  }
			    ],
				"format":"date",
				"example":"2017-01-01"
			  }
          }},
		"Location": {
          "description": "Location name of employee",
          "allOf": [
            {
              "$ref": "#/definitions/LocationObject"
            }
          ]
        },
		"LocationEffectiveDate": {
          "description": "Location effective date value",
		  "type":"object",
           "properties": {
			 "DisplayValue": {
			    "description": "Location effective date value",
			    "type": "string",
			    "allOf": [
				  {
				    "$ref": "#/definitions/DisplayValue"
				  }
			    ],
			    "format":"date",
               "example": "2017-02-02"
			  }
          }},
		"Department": {
          "description": "Department name of employee",
          "allOf": [
            {
              "$ref": "#/definitions/DepartmentObject"
            }
          ]
        },
		"DepartmentEffectiveDate": {
          "description": "Department effective date value",
		  "type":"object",
           "properties": {
			 "DisplayValue": {
			    "description": "Department effective date value",
			    "type": "string",
			    "allOf": [
				  {
				    "$ref": "#/definitions/DisplayValue"
				  }
			    ],
				"format":"date",
                "example": "2017-05-01"
			  }
          }},
		"JobRoleChangeDate": {
          "description": "Job role change date value",
		  "type":"object",
           "properties": {
			 "DisplayValue": {
			    "description": "Job role change date value",
			    "type": "string",
			    "allOf": [
				  {
				    "$ref": "#/definitions/DisplayValue"
				  }
			    ],
				 "format":"date",
               "example": "2017-05-05"
			  }
          }},
		"ReportsTo": {
          "description": "Reports to value",
          "allOf": [
            {
              "$ref": "#/definitions/ReportsToObject"
            }
          ]
        },
		"ReportsToEffectiveDate": {
          "description": "Reports to effective date value",
		  "type":"object",
           "properties": {
			 "DisplayValue": {
			    "description": "Reports to effective date value",
			    "type": "string",
			    "allOf": [
				  {
				    "$ref": "#/definitions/DisplayValue"
				  }
			    ],
			   "format":"date",
               "example": "2016-06-06"
			  }
          }},
		"ReportsToEmployeeId": {
          "description": "Reports to employee id value",
		  "type":"object",
           "properties": {
			 "DisplayValue": {
			    "description": "Reports to employee id value",
			    "type": "string",
			    "allOf": [
				  {
				    "$ref": "#/definitions/DisplayValue"
				  }
			    ],
				 "example": "PW6"
			  }
          }},
		"ReportsToEmailAddress": {
          "description": "Reports to email address value",
		  "type":"object",
           "properties": {
			 "DisplayValue": {
			    "description": "Reports to email address value",
			    "type": "string",
			    "allOf": [
				  {
				    "$ref": "#/definitions/DisplayValue"
				  }
			    ],
			   "format":"email",
               "example": "abc.xyz@itgurusssoftware.com"
			  }
          }},
		"NISNumber": {
          "description": "NIS number value",
          "allOf": [
            {
              "$ref": "#/definitions/NISNumberObject"
            }
          ]
        },
		"Nationality": {
          "description": "Nationality value",
          "allOf": [
            {
              "$ref": "#/definitions/NationalityObject"
            }
          ]
        },
		"EmploymentType": {
          "description": "Employment type value",
          "allOf": [
            {
              "$ref": "#/definitions/EmploymentTypeObject"
            }
          ]
        },
		"EmploymentTypeEffectiveDate": {
          "description": "Employment type effective date value",
		  "type":"object",
           "properties": {
			 "DisplayValue": {
			    "description": "Employment type effective date value",
			    "type": "string",
			    "allOf": [
				  {
				    "$ref": "#/definitions/DisplayValue"
				  }
			    ],
				"format":"date",
                "example": "2017-07-01"
			  }
          }},
		"EmployeeStatus": {
          "description": "Employee status value",
		  "type":"object",
           "properties": {
			 "DisplayValue": {
			    "description": "Employee status value",
			    "type": "string",
			    "allOf": [
				  {
				    "$ref": "#/definitions/DisplayValue"
				  }
			    ],
				 "example": "1"
			  }
          }},
		"HolidayAllowanceDays": {
          "description": "Holiday allowance days value",
		  "type":"object",
           "properties": {
			 "DisplayValue": {
			    "description": "Holiday allowance days value",
			    "type": "string",
			    "allOf": [
				  {
				    "$ref": "#/definitions/DisplayValue"
				  }
			    ],
				  "example": "0.00"
			  }
          }},
		"HolidayAllowanceMins": {
          "description": "Holiday allowance mins value",
		  "type":"object",
           "properties": {
			 "DisplayValue": {
			    "description": "Holiday allowance mins value",
			    "type": "string",
			    "allOf": [
				  {
				    "$ref": "#/definitions/DisplayValue"
				  }
			    ],
				  "example": "0"
			  }
          }},
		"NoticePeriod": {
          "description": "Notice period value",
          "allOf": [
            {
              "$ref": "#/definitions/NoticePeriodObject"
            }
          ]
        },
		"ProbationEndDate": {
          "description": "Probation end date value",
          "allOf": [
            {
              "$ref": "#/definitions/ProbationEndDateObject"
            }
          ]
        },
		"Gender": {
          "description": "Gender value",
          "allOf": [
            {
              "$ref": "#/definitions/GenderObject"
            }
          ]
        },

		"ContactDetail": {
          "description": "Contact detail value",
          "allOf": [
            {
              "$ref": "#/definitions/ContactDetailObject"
            }
          ]
        },
		"OtherContact": {
          "description": "Other Contact detail value",
          "allOf": [
            {
              "$ref": "#/definitions/OtherContactObject"
            }
          ]
        },
		"RightToWork": {
          "description": "Right to work value",
          "allOf": [
            {
              "$ref": "#/definitions/RightToWorkObject"
            }
          ]
        },
		"BackgroundDetail": {
          "description": "Background detail value",
          "allOf": [
            {
              "$ref": "#/definitions/BackgroundDetailObject"
            }
          ]
        },
		"BankDetail": {
          "description": "Bank detail value",
          "allOf": [
            {
              "$ref": "#/definitions/BankDetailObject"
            }
          ]
        },
		"EmploymentDetail": {
          "description": "Employment detail value",
          "allOf": [
            {
              "$ref": "#/definitions/EmploymentDetailObject"
            }
          ]
        },
		"LeavingDate": {
          "description": "LeavingDate value",
          "allOf": [
            {
             "$ref": "#/definitions/LeavingDate"
            }
          ]
        },
		"ReasonForLeaving": {
          "description": "Reason for leaving value",
          "allOf": [
            {
             "$ref": "#/definitions/ReasonforLeaving"
            }
          ]
        },
		"EmployeeImage": {
          "description": "Employee image value",
          "allOf": [
            {
             "$ref": "#/definitions/EmployeeImagePath"
            }
          ]
        },
		"APIColumn1": {
          "description": "API column 1 value",
          "allOf": [
            {
             "$ref": "#/definitions/APIColumn1"
            }
          ]
        },
		"APIColumn2": {
          "description": "API column 2 value",
          "allOf": [
            {
             "$ref": "#/definitions/APIColumn2"
            }
          ]
        },
		"APIColumn3": {
          "description": "API column 3 value",
          "allOf": [
            {
             "$ref": "#/definitions/APIColumn3"
            }
          ]
        },
		"APIColumn4": {
          "description": "API column 4 value",
          "allOf": [
            {
             "$ref": "#/definitions/APIColumn4"
            }
          ]
        },
		"APIColumn5": {
          "description": "API column 5 value",
          "allOf": [
            {
             "$ref": "#/definitions/APIColumn5"
            }
          ]
        },

		"lstFieldHistoryJobrole": {
          "description": "list of Field history job role",
          "allOf": [
            {
             "$ref": "#/definitions/lstFieldHistoryJobrole"
            }
          ]
        }

        }

    },

	"EmployeeIdArrayObject": {
      "description": " Result Array",
      "type": "object",

        "required": [
          "EmployeeId"
        ],

        "properties": {
         "DisplayValue": {
          "description": "DisplayValue value",
          "type": "string",
		  "allOf": [
            {
              "$ref": "#/definitions/DisplayValue"
            }
          ],
		    "example": "PW180"

        },
	   "FieldHistory": {
          "description": "FieldHistory array list",
          "allOf": [
            {
              "$ref": "#/definitions/EmployeeIdObject"
            }
          ]}}

    },

	"TitleObject": {
      "description": " Result Array",
      "type": "object",

        "properties": {
         "DisplayValue": {
          "description": "DisplayValue value",
          "type": "string",
		  "allOf": [
            {
              "$ref": "#/definitions/DisplayValue"
            }
          ],
		   "example": "Mr."

        },
	   "FieldHistory": {
          "description": "FieldHistory array list",
          "allOf": [
            {
              "$ref": "#/definitions/EmployeeIdObject"
            }
          ]}}

    },
	"FirstNameObject": {
      "description": " Result Array",
      "type": "object",

        "properties": {
         "DisplayValue": {
          "description": "DisplayValue value",
          "type": "string",
		  "allOf": [
            {
              "$ref": "#/definitions/DisplayValue"
            }
          ],
		   "example": "Employee first name"

        },
	   "FieldHistory": {
          "description": "FieldHistory array list",
          "allOf": [
            {
              "$ref": "#/definitions/EmployeeIdObject"
            }
          ]}}

    },
	"LastNameObject": {
      "description": " Result Array",
      "type": "object",

        "properties": {
         "DisplayValue": {
          "description": "DisplayValue value",
          "type": "string",
		  "allOf": [
            {
              "$ref": "#/definitions/DisplayValue"
            }
          ],
		  "example": "Employee last name"

        },
	   "FieldHistory": {
          "description": "FieldHistory array list",
          "allOf": [
            {
              "$ref": "#/definitions/EmployeeIdObject"
            }
          ]}}

    },
	"OtherNameObject": {
      "description": " Result Array",
      "type": "object",

        "properties": {
         "DisplayValue": {
          "description": "DisplayValue value",
          "type": "string",
		  "allOf": [
            {
              "$ref": "#/definitions/DisplayValue"
            }
          ],
		   "example": "Other name"
        },
	   "FieldHistory": {
          "description": "FieldHistory array list",
          "allOf": [
            {
              "$ref": "#/definitions/EmployeeIdObject"
            }
          ]}}

    },
	"KnownAsObject": {
      "description": " Result Array",
      "type": "object",

        "properties": {
         "DisplayValue": {
          "description": "DisplayValue value",
          "type": "string",
		  "allOf": [
            {
              "$ref": "#/definitions/DisplayValue"
            }
          ],
		   "example": "Known as value"
        },
	   "FieldHistory": {
          "description": "FieldHistory array list",
          "allOf": [
            {
              "$ref": "#/definitions/EmployeeIdObject"
            }
          ]}}

    },

	"EmailIdObject": {
      "description": " Result Array",
      "type": "object",

        "properties": {
         "DisplayValue": {
          "description": "DisplayValue value",
          "type": "string",
		  "allOf": [
            {
              "$ref": "#/definitions/DisplayValue"
            }
          ],
		   "format":"email",
           "example": "firstname.lastname@itgurusssoftware.com"

        },
	   "FieldHistory": {
          "description": "FieldHistory array list",
          "allOf": [
            {
              "$ref": "#/definitions/EmployeeIdObject"
            }
          ]}}

    },
	"StartDateObject": {
      "description": " Result Array",
      "type": "object",

        "properties": {
         "DisplayValue": {
          "description": "DisplayValue value",
          "type": "string",
		  "allOf": [
            {
              "$ref": "#/definitions/DisplayValue"
            }
          ],
		   "format":"date",
      "example": "2014-01-01"

        },
	   "FieldHistory": {
          "description": "FieldHistory array list",
          "allOf": [
            {
              "$ref": "#/definitions/EmployeeIdObject"
            }
          ]}}

    },

	"DateOfBirthObject": {
      "description": " Result Array",
      "type": "object",

        "properties": {
         "DisplayValue": {
          "description": "DisplayValue value",
          "type": "string",
		  "allOf": [
            {
              "$ref": "#/definitions/DisplayValue"
            }
          ],
		  "format":"date",
          "example": "1991-08-07"

        },
	   "FieldHistory": {
          "description": "FieldHistory array list",
          "allOf": [
            {
              "$ref": "#/definitions/EmployeeIdObject"
            }
          ]}}

    },

	"JobRoleObject": {
      "description": "Job role object contain displayValue and fieldHistoryForJobRole array",
      "type": "object",

        "properties": {

         "DisplayValue": {
          "description": "DisplayValue value",
          "type": "string",
		  "allOf": [
            {
              "$ref": "#/definitions/DisplayValue"
            }
          ],
		   "example": "Software Enginner"

        },
	 "FieldHistoryForJobRole": {
          "description": "Field history for job role array list",
          "allOf": [
            {
              "$ref": "#/definitions/FieldHistoryForJobRoleObject"
            }
          ]}}

    },

	"CompanyObject": {
      "description": "company object contain displayValue and fieldHistoryForEffectiveDate array",
      "type": "object",

        "properties": {

         "DisplayValue": {
          "description": "DisplayValue value",
          "type": "string",
		  "allOf": [
            {
              "$ref": "#/definitions/DisplayValue"
            }
          ],
		 "example": "Company name"

        },
	    "FieldHistoryForEffectiveDate": {
          "description": "Field history for effective date array list",
          "allOf": [
            {
              "$ref": "#/definitions/FieldHistoryForEffectiveDateObject"
            }
          ]}}

    },
	"LocationObject": {
      "description": "Location object contain displayValue and fieldHistoryForEffectiveDate array",
      "type": "object",

        "properties": {

         "DisplayValue": {
          "description": "DisplayValue value",
          "type": "string",
		  "allOf": [
            {
              "$ref": "#/definitions/DisplayValue"
            }
          ],
		   "example": "Mumbai"

        },
	    "FieldHistoryForEffectiveDate": {
          "description": "Field history for effective date array list",
          "allOf": [
            {
              "$ref": "#/definitions/FieldHistoryForEffectiveDateObject"
            }
          ]}}

    },
	"DepartmentObject": {
      "description": "Department object contain displayValue and fieldHistoryForEffectiveDate array",
      "type": "object",

        "properties": {

         "DisplayValue": {
          "description": "DisplayValue value",
          "type": "string",
		  "allOf": [
            {
              "$ref": "#/definitions/DisplayValue"
            }
          ],
		   "example": "IT"
        },
	    "FieldHistoryForEffectiveDate": {
          "description": "Field history for effective date array list",
          "allOf": [
            {
              "$ref": "#/definitions/FieldHistoryForEffectiveDateObject"
            }
          ]}}

    },
	"ReportsToObject": {
      "description": "Department object contain displayValue and fieldHistoryForEffectiveDate array",
      "type": "object",

        "properties": {

         "DisplayValue": {
          "description": "DisplayValue value",
          "type": "string",
		  "allOf": [
            {
              "$ref": "#/definitions/DisplayValue"
            }
          ],
		   "example": "FirstName LastName"

        },
	    "FieldHistoryForEffectiveDate": {
          "description": "Field history for effective date array list",
          "allOf": [
            {
              "$ref": "#/definitions/FieldHistoryForEffectiveDateObject"
            }
          ]}}

    },

	"NISNumberObject": {
      "description": " Result Array",
      "type": "object",

        "required": [
          "EmployeeId"
        ],

        "properties": {
         "DisplayValue": {
          "description": "DisplayValue value",
          "type": "string",
		  "allOf": [
            {
              "$ref": "#/definitions/DisplayValue"
            }
          ],
		 "example": "AAAAAAAAAAAAAA"
        },
	   "FieldHistory": {
          "description": "FieldHistory array list",
          "allOf": [
            {
              "$ref": "#/definitions/EmployeeIdObject"
            }
          ]}}

    },

	"NationalityObject": {
      "description": "The Result Array",
      "type": "object",

        "required": [
          "EmployeeId"
        ],

        "properties": {
         "DisplayValue": {
          "description": "DisplayValue value",
          "type": "string",
		  "allOf": [
            {
              "$ref": "#/definitions/DisplayValue"
            }
          ],
		   "example": "Indian"

        },
	   "FieldHistory": {
          "description": "FieldHistory array list",
          "allOf": [
            {
              "$ref": "#/definitions/EmployeeIdObject"
            }
          ]}}

    },

	"EmploymentTypeObject": {
      "description": "company object contain displayValue and fieldHistoryForEffectiveDate array",
      "type": "object",

        "properties": {

         "DisplayValue": {
          "description": "DisplayValue value",
          "type": "string",
		  "allOf": [
            {
              "$ref": "#/definitions/DisplayValue"
            }
          ],
		   "example": "Full Time"

        },
	    "FieldHistoryForEffectiveDate": {
          "description": "Field history for effective date array list",
          "allOf": [
            {
              "$ref": "#/definitions/FieldHistoryForEffectiveDateObject"
            }
          ]}}

    },

	"NoticePeriodObject": {
      "description": " Result Array",
      "type": "object",

        "required": [
          "EmployeeId"
        ],

        "properties": {
         "DisplayValue": {
          "description": "DisplayValue value",
          "type": "string",
		  "allOf": [
            {
              "$ref": "#/definitions/DisplayValue"
            }
          ],
		   "example": "don't know"

        },
	   "FieldHistory": {
          "description": "FieldHistory array list",
          "allOf": [
            {
              "$ref": "#/definitions/EmployeeIdObject"
            }
          ]}}

    },

	"ProbationEndDateObject": {
      "description": " Result Array",
      "type": "object",

        "required": [
          "EmployeeId"
        ],

        "properties": {
         "DisplayValue": {
          "description": "DisplayValue value",
          "type": "string",
		  "allOf": [
            {
              "$ref": "#/definitions/DisplayValue"
            }
          ],
		  "format":"date",
          "example": "2017-04-03"

        },
	   "FieldHistory": {
          "description": "FieldHistory array list",
          "allOf": [
            {
              "$ref": "#/definitions/EmployeeIdObject"
            }
          ]}}

    },

	"GenderObject": {
      "description": " Result Array",
      "type": "object",

        "required": [
          "EmployeeId"
        ],

        "properties": {
         "DisplayValue": {
          "description": "DisplayValue value",
          "type": "string",
		  "allOf": [
            {
              "$ref": "#/definitions/DisplayValue"
            }
          ],
		  "example": "Male"

        },
	   "FieldHistory": {
          "description": "FieldHistory array list",
          "allOf": [
            {
              "$ref": "#/definitions/EmployeeIdObject"
            }
          ]}}

    },

   "ContactDetailObject": {
      "description": "ContactDetail contain displayValue and FieldHistory array values",
      "type": "object",
      "properties": {
        "Address": {
          "description": "Address contain displayValue and FieldHistory array values",
          "allOf": [
            {
              "$ref": "#/definitions/AddressObject"
            }
          ]
        },
		 "WorkPhoneNumber": {
          "description": "WorkPhoneNumber contain displayValue and FieldHistory array values",
          "allOf": [
            {
              "$ref": "#/definitions/WorkPhoneNumberObject"
            }
          ]
        },
		 "PersonalPhoneNumber": {
          "description": "PersonalPhoneNumber contain displayValue and FieldHistory array values",
          "allOf": [
            {
              "$ref": "#/definitions/PersonalPhoneNumberObject"
            }
          ]
        },
		"PersonalEmail": {
          "description": "PersonalEmail contain displayValue and FieldHistory array values",
          "allOf": [
            {
              "$ref": "#/definitions/PersonalEmailObject"
            }
          ]
        },
		"Mobile": {
          "description": "Mobile contain displayValue and FieldHistory array values",
          "allOf": [
            {
              "$ref": "#/definitions/MobileObject"
            }
          ]
        }


	 }

    },

	"AddressObject": {
      "description": " Result Array",
      "type": "object",

        "required": [
          "EmployeeId"
        ],

        "properties": {
         "DisplayValue": {
          "description": "DisplayValue value",
          "type": "string",
		  "allOf": [
            {
              "$ref": "#/definitions/DisplayValue"
            }
          ],
		    "example": "Address"

        },
	   "FieldHistory": {
          "description": "FieldHistory array list",
          "allOf": [
            {
              "$ref": "#/definitions/EmployeeIdObject"
            }
          ]}}

    },

	"WorkPhoneNumberObject": {
      "description": " Result Array",
      "type": "object",

        "required": [
          "EmployeeId"
        ],

        "properties": {
         "DisplayValue": {
          "description": "DisplayValue value",
          "type": "string",
		  "allOf": [
            {
              "$ref": "#/definitions/DisplayValue"
            }
          ],
		 "example": "9966005500"

        },
	   "FieldHistory": {
          "description": "FieldHistory array list",
          "allOf": [
            {
              "$ref": "#/definitions/EmployeeIdObject"
            }
          ]}}

    },
	"PersonalPhoneNumberObject": {
      "description": " Result Array",
      "type": "object",

        "required": [
          "EmployeeId"
        ],

        "properties": {
         "DisplayValue": {
          "description": "DisplayValue value",
          "type": "string",
		  "allOf": [
            {
              "$ref": "#/definitions/DisplayValue"
            }
          ],
		    "example": "9988776655"

        },
	   "FieldHistory": {
          "description": "FieldHistory array list",
          "allOf": [
            {
              "$ref": "#/definitions/EmployeeIdObject"
            }
          ]}}

    },
	"PersonalEmailObject": {
      "description": " Result Array",
      "type": "object",

        "required": [
          "EmployeeId"
        ],

        "properties": {
         "DisplayValue": {
          "description": "DisplayValue value",
          "type": "string",
		  "allOf": [
            {
              "$ref": "#/definitions/DisplayValue"
            }
          ],
		 "format":"email",
         "example": "abc@itgurussoftware.com"

        },
	   "FieldHistory": {
          "description": "FieldHistory array list",
          "allOf": [
            {
              "$ref": "#/definitions/EmployeeIdObject"
            }
          ]}}

    },
	"MobileObject": {
      "description": " Result Array",
      "type": "object",

        "required": [
          "EmployeeId"
        ],

        "properties": {
         "DisplayValue": {
          "description": "DisplayValue value",
          "type": "string",
		  "allOf": [
            {
              "$ref": "#/definitions/DisplayValue"
            }
          ],
		  "example": "9988990099"

        },
	   "FieldHistory": {
          "description": "FieldHistory array list",
          "allOf": [
            {
              "$ref": "#/definitions/EmployeeIdObject"
            }
          ]}}

    },

	"OtherContactObject": {

      "type": "object",
      "properties": {
        "OtherContactName": {
          "description": "OtherContactName contain displayValue",
		  "type": "object",
           "properties": {
		    "DisplayValue": {
			    "description": "Other contact name value",
			    "type": "string",
			    "allOf": [
				  {
				    "$ref": "#/definitions/DisplayValue"
				  }
			    ],
				 "example": "xyz"
			  }
		   }

        },
		"Relationship": {
          "description": "Relationship contain displayValue",
		   "type": "object",
           "properties": {
		    "DisplayValue": {
			    "description": "Relationship value",
			    "type": "string",
			    "allOf": [
				  {
				    "$ref": "#/definitions/DisplayValue"
				  }
			    ],
				  "example": "Relationship value"
			  }
		   }

        },
		"OtheContactAddress": {
          "description": "OtheContactAddress contain displayValue",
		   "type": "object",
           "properties": {
		    "DisplayValue": {
			    "description": "Other contact address value",
			    "type": "string",
			    "allOf": [
				  {
				    "$ref": "#/definitions/DisplayValue"
				  }
			    ],
				 "example": "Other contact address"
			  }
		   }

        },
		"Telephone": {
          "description": "Telephone contain displayValue",
		   "type": "object",
           "properties": {
		    "DisplayValue": {
			    "description": "Telephone value",
			    "type": "string",
			    "allOf": [
				  {
				    "$ref": "#/definitions/DisplayValue"
				  }
			    ],
				 "example": "Telephone number"
			  }
		   }

        },
		"Mobile": {
          "description": "Mobile contain displayValue",
		   "type": "object",
           "properties": {
		    "DisplayValue": {
			    "description": "Mobile value",
			    "type": "string",
			    "allOf": [
				  {
				    "$ref": "#/definitions/DisplayValue"
				  }
			    ],
				"example": "9900998877"
			  }
		   }

        },
		"Comments": {
          "description": "Comments contain displayValue",
		   "type": "object",
           "properties": {
		    "DisplayValue": {
			    "description": "Comments value",
			    "type": "string",
			    "allOf": [
				  {
				    "$ref": "#/definitions/DisplayValue"
				  }
			    ],
				  "example": "Comments here"
			  }
		   }

        }


	 }

    },

	"RightToWorkObject": {

      "type": "object",
      "properties": {
        "DocumentType": {
          "description": "DocumentType contain displayValue",
		  "type": "object",
           "properties": {
		    "DisplayValue": {
			    "description": "Document type value",
			    "type": "string",
			    "allOf": [
				  {
				    "$ref": "#/definitions/DisplayValue"
				  }
			    ],
				 "example": "don't know"
			  }
		   }

        },
		"DocumentId": {
          "description": "DocumentId contain displayValue",
		  "type": "object",
           "properties": {
		    "DisplayValue": {
			    "description": "DocumentId value",
			    "type": "string",
			    "allOf": [
				  {
				    "$ref": "#/definitions/DisplayValue"
				  }
			    ],
				 "example": "1"
			  }
		   }

        },
		"ValidFrom": {
          "description": "ValidFrom contain displayValue",
		  "type": "object",
           "properties": {
		    "DisplayValue": {
			    "description": "ValidFrom value",
			    "type": "string",
			    "allOf": [
				  {
				    "$ref": "#/definitions/DisplayValue"
				  }
			    ],
				 "format":"date",
                 "example": "2017-02-02"
			  }
		   }

        },
		"ValidTo": {
          "description": "ValidTo contain displayValue",
		  "type": "object",
           "properties": {
		    "DisplayValue": {
			    "description": "ValidTo value",
			    "type": "string",
			    "allOf": [
				  {
				    "$ref": "#/definitions/DisplayValue"
				  }
			    ],
			    "format":"date",
               "example": "2017-03-03"
			  }
		   }

        },
		"Duration": {
          "description": "Duration contain displayValue",
		  "type": "object",
           "properties": {
		    "DisplayValue": {
			    "description": "Duration value",
			    "type": "string",
			    "allOf": [
				  {
				    "$ref": "#/definitions/DisplayValue"
				  }
			    ],
				"example": "1"
			  }
		   }

        },
		"RightToWorkComments": {
          "description": "RightToWorkComments contain displayValue",
		  "type": "object",
           "properties": {
		    "DisplayValue": {
			    "description": "Right to work comments value",
			    "type": "string",
			    "allOf": [
				  {
				    "$ref": "#/definitions/DisplayValue"
				  }
			    ],
				 "example": "Right to work comments"
			  }
		   }

        }


	 }

    },

	"BackgroundDetailObject": {

      "type": "object",
      "properties": {
        "CheckType": {
          "description": "CheckType contain displayValue",
		  "type": "object",
           "properties": {
		    "DisplayValue": {
			    "description": "Check type value",
			    "type": "string",
			    "allOf": [
				  {
				    "$ref": "#/definitions/DisplayValue"
				  }
			    ],
				 "example": "check type value"
			  }
		   }

        },
		"CompletionDate": {
          "description": "CompletionDate contain displayValue",
		  "type": "object",
           "properties": {
		    "DisplayValue": {
			    "description": "Completion date value",
			    "type": "string",
			    "allOf": [
				  {
				    "$ref": "#/definitions/DisplayValue"
				  }
			    ],
				 "format":"date",
                 "example": "2016-06-06"
			  }
		   }

        },
		"ExpiryDate": {
          "description": "ExpiryDate contain displayValue",
		  "type": "object",
           "properties": {
		    "DisplayValue": {
			    "description": "ExpiryDate value",
			    "type": "string",
			    "allOf": [
				  {
				    "$ref": "#/definitions/DisplayValue"
				  }
			    ],
				"format":"date",
                "example": "2016-07-07"
			  }
		   }

        },
		"BackgroundDetailComments": {
          "description": "BackgroundDetailComments contain displayValue",
		  "type": "object",
           "properties": {
		    "DisplayValue": {
			    "description": "Background detail comments value",
			    "type": "string",
			    "allOf": [
				  {
				    "$ref": "#/definitions/DisplayValue"
				  }
			    ],
				 "example": "Background detail comments"
			  }
		   }

        }


	 }

    },

	"BankDetailObject": {
      "description": "Bank detail contain displayValue and FieldHistory array values",
      "type": "object",
      "properties": {
        "BankName": {
          "description": "BankName contain displayValue and FieldHistory array values",
          "allOf": [
            {
              "$ref": "#/definitions/BankNameObject"
            }
          ]
        },
		 "BankAddress": {
          "description": "BankAddress contain displayValue and FieldHistory array values",
          "allOf": [
            {
              "$ref": "#/definitions/BankAddressObject"
            }
          ]
        },
		 "BankCode": {
          "description": "BankCode contain displayValue and FieldHistory array values",
          "allOf": [
            {
              "$ref": "#/definitions/BankCodeObject"
            }
          ]
        },
		"AccountNumber": {
          "description": "AccountNumber contain displayValue and FieldHistory array values",
          "allOf": [
            {
              "$ref": "#/definitions/AccountNumberObject"
            }
          ]
        },
		"AccountName": {
          "description": "AccountName contain displayValue and FieldHistory array values",
          "allOf": [
            {
              "$ref": "#/definitions/AccountNameObject"
            }
          ]
        }


	 }

    },
	"BankNameObject": {
      "description": " Result Array",
      "type": "object",

        "required": [
          "EmployeeId"
        ],

        "properties": {
         "DisplayValue": {
          "description": "DisplayValue value",
          "type": "string",
		  "allOf": [
            {
              "$ref": "#/definitions/DisplayValue"
            }
          ],
		   "example": "SBI"

        },
	   "FieldHistory": {
          "description": "FieldHistory array list",
          "allOf": [
            {
              "$ref": "#/definitions/EmployeeIdObject"
            }
          ]}}

    },
	"BankAddressObject": {
      "description": " Result Array",
      "type": "object",

        "required": [
          "EmployeeId"
        ],

        "properties": {
         "DisplayValue": {
          "description": "DisplayValue value",
          "type": "string",
		  "allOf": [
            {
              "$ref": "#/definitions/DisplayValue"
            }
          ],
		   "example": "Pune"

        },
	   "FieldHistory": {
          "description": "FieldHistory array list",
          "allOf": [
            {
              "$ref": "#/definitions/EmployeeIdObject"
            }
          ]}}

    },

	"BankCodeObject": {
      "description": " Result Array",
      "type": "object",

        "required": [
          "EmployeeId"
        ],

        "properties": {
         "DisplayValue": {
          "description": "DisplayValue value",
          "type": "string",
		  "allOf": [
            {
              "$ref": "#/definitions/DisplayValue"
            }
          ],
		    "example": "6789"

        },
	   "FieldHistory": {
          "description": "FieldHistory array list",
          "allOf": [
            {
              "$ref": "#/definitions/EmployeeIdObject"
            }
          ]}}

    },

	"AccountNumberObject": {
      "description": " Result Array",
      "type": "object",

        "required": [
          "EmployeeId"
        ],

        "properties": {
         "DisplayValue": {
          "description": "DisplayValue value",
          "type": "string",
		  "allOf": [
            {
              "$ref": "#/definitions/DisplayValue"
            }
          ],
		    "example": "8411540414"

        },
	   "FieldHistory": {
          "description": "FieldHistory array list",
          "allOf": [
            {
              "$ref": "#/definitions/EmployeeIdObject"
            }
          ]}}

    },
	"AccountNameObject": {
      "description": " Result Array",
      "type": "object",

        "required": [
          "EmployeeId"
        ],

        "properties": {
         "DisplayValue": {
          "description": "DisplayValue value",
          "type": "string",
		  "allOf": [
            {
              "$ref": "#/definitions/DisplayValue"
            }
          ],
		  "example": "Account Name"
        },
	   "FieldHistory": {
          "description": "FieldHistory array list",
          "allOf": [
            {
              "$ref": "#/definitions/EmployeeIdObject"
            }
          ]}}

    },

	"EmploymentDetailObject": {
      "description": "Employment detail contain displayValue and FieldHistory array values",
      "type": "object",
      "properties": {
        "PayrollCompany": {
          "description": "PayrollCompany contain displayValue and FieldHistory array values",
          "allOf": [
            {
              "$ref": "#/definitions/PayrollCompanyObject"
            }
          ]
        },
		 "PayrollID": {
          "description": "PayrollID contain displayValue and FieldHistory array values",
          "allOf": [
            {
              "$ref": "#/definitions/PayrollIDObject"
            }
          ]
        },
		 "TimeAndAttendanceID": {
          "description": "TimeAndAttendanceID contain displayValue and FieldHistory array values",
          "allOf": [
            {
              "$ref": "#/definitions/TimeAndAttendanceIDObject"
            }
          ]
        },
		"RotaID": {
          "description": "RotaID contain displayValue and FieldHistory array values",
          "allOf": [
            {
              "$ref": "#/definitions/RotaIDObject"
            }
          ]
        },
		"CRMID": {
          "description": "CRMID contain displayValue and FieldHistory array values",
          "allOf": [
            {
              "$ref": "#/definitions/CRMIDObject"
            }
          ]
        },
		"ATSID": {
          "description": "ATSID contain displayValue and FieldHistory array values",
          "allOf": [
            {
              "$ref": "#/definitions/ATSIDObject"
            }
          ]
        },
		"PerformanceID": {
          "description": "PerformanceID contain displayValue and FieldHistory array values",
          "allOf": [
            {
              "$ref": "#/definitions/PerformanceIDObject"
            }
          ]
        },
		"BenefitsID": {
          "description": "BenefitsID contain displayValue and FieldHistory array values",
          "allOf": [
            {
              "$ref": "#/definitions/BenefitsIDObject"
            }
          ]
        },
		"System1ID": {
          "description": "System1ID contain displayValue and FieldHistory array values",
          "allOf": [
            {
              "$ref": "#/definitions/System1IDObject"
            }
          ]
        },
		"System2ID": {
          "description": "System2ID contain displayValue and FieldHistory array values",
          "allOf": [
            {
              "$ref": "#/definitions/System2IDObject"
            }
          ]
        },
		"System3ID": {
          "description": "System3ID contain displayValue and FieldHistory array values",
          "allOf": [
            {
              "$ref": "#/definitions/System3IDObject"
            }
          ]
        },
		"MethodOfRecruitment": {
          "description": "MethodOfRecruitment contain displayValue and FieldHistory array values",
          "allOf": [
            {
              "$ref": "#/definitions/MethodOfRecruitmentObject"
            }
          ]
        }


	 }

    },

	"PayrollCompanyObject": {
      "description": " Result Array",
      "type": "object",

        "required": [
          "EmployeeId"
        ],

        "properties": {
         "DisplayValue": {
          "description": "DisplayValue value",
          "type": "string",
		  "allOf": [
            {
              "$ref": "#/definitions/DisplayValue"
            }
          ],
		   "example": "Your payroll company\u0027s name"

        },
	   "FieldHistory": {
          "description": "FieldHistory array list",
          "allOf": [
            {
              "$ref": "#/definitions/EmployeeIdObject"
            }
          ]}}

    },

	"PayrollIDObject": {
      "description": " Result Array",
      "type": "object",

        "required": [
          "EmployeeId"
        ],

        "properties": {
         "DisplayValue": {
          "description": "DisplayValue value",
          "type": "string",
		  "allOf": [
            {
              "$ref": "#/definitions/DisplayValue"
            }
          ],
		    "example": "Your payroll id"

        },
	   "FieldHistory": {
          "description": "FieldHistory array list",
          "allOf": [
            {
              "$ref": "#/definitions/EmployeeIdObject"
            }
          ]}}

    },

	"TimeAndAttendanceIDObject": {
      "description": " Result Array",
      "type": "object",

        "required": [
          "EmployeeId"
        ],

        "properties": {
         "DisplayValue": {
          "description": "DisplayValue value",
          "type": "string",
		  "allOf": [
            {
              "$ref": "#/definitions/DisplayValue"
            }
          ],
		   "example": "Your time and attendance id"

        },
	   "FieldHistory": {
          "description": "FieldHistory array list",
          "allOf": [
            {
              "$ref": "#/definitions/EmployeeIdObject"
            }
          ]}}

    },
	"RotaIDObject": {
      "description": " Result Array",
      "type": "object",

        "required": [
          "EmployeeId"
        ],

        "properties": {
         "DisplayValue": {
          "description": "DisplayValue value",
          "type": "string",
		  "allOf": [
            {
              "$ref": "#/definitions/DisplayValue"
            }
          ],
		   "example": "Your Rota id"

        },
	   "FieldHistory": {
          "description": "FieldHistory array list",
          "allOf": [
            {
              "$ref": "#/definitions/EmployeeIdObject"
            }
          ]}}

    },
	"CRMIDObject": {
      "description": " Result Array",
      "type": "object",

        "required": [
          "EmployeeId"
        ],

        "properties": {
         "DisplayValue": {
          "description": "DisplayValue value",
          "type": "string",
		  "allOf": [
            {
              "$ref": "#/definitions/DisplayValue"
            }
          ],
		    "example": "Your CRM id"

        },
	   "FieldHistory": {
          "description": "FieldHistory array list",
          "allOf": [
            {
              "$ref": "#/definitions/EmployeeIdObject"
            }
          ]}}

    },
	"ATSIDObject": {
      "description": " Result Array",
      "type": "object",

        "required": [
          "EmployeeId"
        ],

        "properties": {
         "DisplayValue": {
          "description": "DisplayValue value",
          "type": "string",
		  "allOf": [
            {
              "$ref": "#/definitions/DisplayValue"
            }
          ],
		   "example": "Your ATS id"

        },
	   "FieldHistory": {
          "description": "FieldHistory array list",
          "allOf": [
            {
              "$ref": "#/definitions/EmployeeIdObject"
            }
          ]}}

    },
	"PerformanceIDObject": {
      "description": " Result Array",
      "type": "object",

        "required": [
          "EmployeeId"
        ],

        "properties": {
         "DisplayValue": {
          "description": "DisplayValue value",
          "type": "string",
		  "allOf": [
            {
              "$ref": "#/definitions/DisplayValue"
            }
          ],
		   "example": "Your performance id"

        },
	   "FieldHistory": {
          "description": "FieldHistory array list",
          "allOf": [
            {
              "$ref": "#/definitions/EmployeeIdObject"
            }
          ]}}

    },
	"BenefitsIDObject": {
      "description": " Result Array",
      "type": "object",

        "required": [
          "EmployeeId"
        ],

        "properties": {
         "DisplayValue": {
          "description": "DisplayValue value",
          "type": "string",
		  "allOf": [
            {
              "$ref": "#/definitions/DisplayValue"
            }
          ],
		    "example": "Your benefits id"

        },
	   "FieldHistory": {
          "description": "FieldHistory array list",
          "allOf": [
            {
              "$ref": "#/definitions/EmployeeIdObject"
            }
          ]}}

    },

   "System1IDObject": {
      "description": " Result Array",
      "type": "object",

        "required": [
          "EmployeeId"
        ],

        "properties": {
         "DisplayValue": {
          "description": "DisplayValue value",
          "type": "string",
		  "allOf": [
            {
              "$ref": "#/definitions/DisplayValue"
            }
          ],
		   "example": "Your system one id"

        },
	   "FieldHistory": {
          "description": "FieldHistory array list",
          "allOf": [
            {
              "$ref": "#/definitions/EmployeeIdObject"
            }
          ]}}

    },

	 "System2IDObject": {
      "description": " Result Array",
      "type": "object",

        "required": [
          "EmployeeId"
        ],

        "properties": {
         "DisplayValue": {
          "description": "DisplayValue value",
          "type": "string",
		  "allOf": [
            {
              "$ref": "#/definitions/DisplayValue"
            }
          ],
		   "example": "Your system two id"

        },
	   "FieldHistory": {
          "description": "FieldHistory array list",
          "allOf": [
            {
              "$ref": "#/definitions/EmployeeIdObject"
            }
          ]}}

    },
	"System3IDObject": {
      "description": " Result Array",
      "type": "object",

        "required": [
          "EmployeeId"
        ],

        "properties": {
         "DisplayValue": {
          "description": "DisplayValue value",
          "type": "string",
		  "allOf": [
            {
              "$ref": "#/definitions/DisplayValue"
            }
          ],
		  "example": "Your system three id"

        },
	   "FieldHistory": {
          "description": "FieldHistory array list",
          "allOf": [
            {
              "$ref": "#/definitions/EmployeeIdObject"
            }
          ]}}

    },
	"MethodOfRecruitmentObject": {
      "description": " Result Array",
      "type": "object",

        "required": [
          "EmployeeId"
        ],

        "properties": {
         "DisplayValue": {
          "description": "DisplayValue value",
          "type": "string",
		  "allOf": [
            {
              "$ref": "#/definitions/DisplayValue"
            }
          ],
		  "example": "Method of recruitment"

        },
	   "FieldHistory": {
          "description": "FieldHistory array list",
          "allOf": [
            {
              "$ref": "#/definitions/EmployeeIdObject"
            }
          ]}}

    },

	"lstFieldHistoryJobrole": {
      "description": "lst Field history job role contain fieldHistoryForJobRole array",
      "type": "object",

        "properties": {
			"FieldHistoryForJobRole": {
				"description": "Field history for job role array list",
				"allOf": [
					{
						"$ref": "#/definitions/FieldHistoryForJobRoleObject"
					}
				]}}

    },

	"Result1": {
      "description": " Result Array",
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "EffectiveFrom": {
            "description": " EffectiveFrom Value",
            "type": "string",
			"example":"2014-01-01"
          },
          "SalaryType": {
            "description": "Salary type value",
            "type": "string",
			"example":"Annual"
          },
		   "PaymentFrequency": {
            "description": "Payment frequency value",
            "type": "string",
			"example":"Monthly"
          },
		  "SalaryAmount": {
            "description": "Salary amount value",
           "type": "integer",
             "format": "decimal",
			 "example":"1000.0000"
          },
		   "TotalSalaryAmount": {
            "description": "Total salary amount value",
			 "type": "integer",
             "format": "decimal",
           "example":"1000.0000"
          },
		   "Currency": {
            "description": "Currency value",
            "type": "string",
			"example":"ASD"
          },
		  "ChangeReason": {
            "description": "ChangeReason value",
            "type": "string",
			"example":"New Resion"
          },
          "Comments": {
            "description": "Comments goes here",
            "type": "string",
			"example":"Comments goes here"
          },
		 "Deductions": {
          "description": "Deductions array list",
          "allOf": [
            {
              "$ref": "#/definitions/DeductionsObject"
            }
          ]
        },

		"Entitlements": {
          "description": "Entitlements array list",
          "allOf": [
            {
              "$ref": "#/definitions/EntitlementsObject"
            }
          ]
        }}
      }
    },

	 "DeductionsObject": {
      "type": "array",
	  "items" :{
	  "type":"object",
      "properties": {
        "Deduction": {
          "description": "Deduction value",
          "type": "string",
		  "example":"Social Club 1"
        },
        "Amount": {
          "description": " contact last name",
          "type": "integer",
		  "example":"100"
        },
		 "Percentage": {
          "description": "Percentage",
          "type": "integer",
		  "format":"decimal",
		  "example":"10.00"
        },
		 "Comments": {
          "description": "Comments",
          "type": "string",
		  "example":"Comments for deduction social"
        },
		"IncludeInTotalSalary": {
          "description": "IncludeInTotalSalary",
          "type": "boolean",
		  "enum": [
		    "false",
		       "true"
          ]
        },
		"DisplayAsAmountOrPercentage": {
          "description": "Display as amount or percentage",
          "type": "boolean",
		   "enum": [
		    "false",
		       "true"
          ]
        }}
	  }
    },
		"EntitlementsObject": {
      "type": "array",
	  "items" :{
	  "type":"object",
      "properties": {
        "Entitlement": {
          "description": "Entitlement value",
          "type": "string",
		  "example" : "Car Allowance 1"
        },
        "Amount": {
          "description": " contact last name",
          "type": "integer",
		   "example" : "100"
        },
		 "Percentage": {
          "description": "Percentage",
          "type": "integer",
		  "format":"decimal",
		   "example" : "10.00"
        },
		 "Comments": {
          "description": "Comments",
          "type": "string",
		   "example" : "Comments"
        },
		"IncludeInTotalSalary": {
          "description": "IncludeInTotalSalary",
          "type": "boolean",
		  "enum": [
		   "false",
		       "true"
          ]
        },
		"DisplayAsAmountOrPercentage": {
          "description": "Display as amount or percentage",
          "type": "boolean",
		   "enum": [
		   "false",
		       "true"
          ]
        }}
	  }
    },

   "ResultEmployeeAbsenceArray":{
	"description": " Result Array",
      "type": "array",
      "items": {
        "type": "object",

        "properties": {
          "StartDate": {
            "description": " Start Date Value",
            "type": "string",
			"format":"date",
			"example":"2014-01-01"
          },
          "EndDate": {
            "description": " End Date  value",
            "type": "string",
			"format":"date",
			"example":"2014-01-01"
          },
		   "DurationDays": {
            "description": " Duration Days value",
            "type": "integer",
			"format":"double",
			"example":"22.00"
          },
		  "DurationInDaysThisPeriod": {
            "description": " Duration In Days This Period value",
            "type": "integer",
			"format":"double",
			"example":"22.00"
          },
		   "PartOfDay": {
            "description": "Part Of Day value",
			"type":"boolean",
			   "enum":[
		       "AM",
		       "PM"
		  ],
		  "example":"AM"
          },
		   "BackToWorkInterviewRequried": {
            "description": "The Back To Work Interview Requried  value",
            "type": "boolean",
		   "enum": [
		   "false",
		   "true"],
		  "example":"true"
          },
		  "BackToWorkInterviewDate": {
            "description": " Back To Work Interview Date value",
            "type": "string",
			"example":"2013-05-01"
          },
          "MedicalCertificateType": {
            "description": " Comments goes here",
            "type": "integer"},
		 "MedicalCertificateReceivedDate":{
		  "description": " Comments goes here",
            "type": "string",
		   "example":"2013-05-01"
		 },
		  "Reason":{
		  "description": " Reason for Absence",
		  "MaxLength":100,
           "type": "string",
		   "example":"Not feeling well"
		 },
		 "Comments":
		 {
          "description": "Comments Array  list",
          "allOf": [
            {
              "$ref": "#/definitions/CommentsArray"
            }
          ]
        },
		 "AbsencePaidStatus":{
		  "description": " Absence Paid Status ",
            "type": "integer",
			"example":"1"
		 },
		 "EmergencyLeave":{
		  "description": " Emergency Leave",
             "type": "boolean",
		   "enum": [
		   "false",
		   "true"],
		  "example":"true"
		 }}
      }
	},

	 "ResultAdditionalQuestionsArrayobject": {
      "type": "array",
	  "items" :{
	  "type":"object",
      "properties": {
        "QuestionId": {
          "type": "string",
		  "description": "Question id value ",
		  "example": "2"
        },
		"QuestionType": {
          "type": "string",
		  "description": "Question type value ",
		  "example": "1"
        },
		"IsMandatory": {
          "type": "boolean",
		  "description": "Is mandatory type value ",
		  "example": "true",
		  "enum":["false","true"]
        },
		"Question": {
          "type": "string",
		  "description": "Question type value ",
		  "example": "Please indicate your gender"
        },
		"AdditionalOrInternalType": {
          "type": "integer",
		  "description": "Additional Or internal type value ",
		  "example": "1"
        },
		"QuestionOptions": {
          "description": "Question Options list value",
          "allOf": [
            {
             "$ref": "#/definitions/ResultlstQuestionOptions"
            }
          ]
        }}
	  }
    },
	"ResultlstQuestionOptions": {
      "description": "Question options list",
      "type": "array",
	  "items":{
	    "type": "object",
           "properties": {

		     "QuestionOptions": {
			    "type": "string",
			    "description": "QuestionOptions value"}

        }
	  }

    },

	"GetBenefitByEmployeeIdParameter": {
      "type": "object",
      "required": [
        "APIKey",
        "Action",
        "EmployeeId"],
      "properties": {
	  "APIKey": {
          "description": "APIKey for employee api to GetBenefitByEmployeeId",
          "type": "string",
		  "allOf": [
            {
              "$ref": "#/definitions/APIKey"
            }
          ]
        },
        "Action": {
          "description": "Action name = GetBenefitByEmployeeId",
          "allOf": [
            {
              "$ref": "#/definitions/Action"
            }
          ],
		  "example": "GetBenefitByEmployeeId"
        },
        "EmployeeId": {
          "description": "Employee id for get benefit by employee id",
          "allOf": [
            {
             "$ref": "#/definitions/EmployeeId"
            }
          ]
        }}
    },

	"GetByBenefitIdParameter": {
      "type": "object",
      "required": [
        "APIKey",
        "Action",
        "EmployeeId",
		"BenefitId"],
      "properties": {
	  "APIKey": {
          "description": "APIKey for employee api to GetBenefitByBenefitId",
          "type": "string",
		  "allOf": [
            {
              "$ref": "#/definitions/APIKey"
            }
          ]
        },
        "Action": {
          "description": "Action name = GetBenefitByBenefitId",
          "allOf": [
            {
              "$ref": "#/definitions/Action"
            }
          ],
		  "example": "GetBenefitByBenefitId"
        },
        "EmployeeId": {
          "description": "Employee Id for get benefit by benefit id",
          "allOf": [
            {
             "$ref": "#/definitions/EmployeeId"
            }
          ]
        },
		 "BenefitId": {
          "description": "Benefit id for get benefit by benefit id",
          "allOf": [
            {
             "$ref": "#/definitions/BenefitId"
            }
          ]
        }}
    },

  "ResultGetByBenefitIdObject": {
      "description": " Result Array",
        "type": "object",

        "properties": {
          "BenefitId": {
            "description": "Benefit Id value",
            "type": "number",
			"format":"integer",
			"example":378
          },
          "Benefit": {
            "description": "Benefit value",
            "type": "string",
			"example":"Date Awarded"
          },
		   "DateAwarded": {
            "description": "DateAwarded value",
            "type": "string",
			"format":"date",
			"example":"2017-03-07"
          },
		  "ExpiryDate": {
            "description": "ExpiryDate value",
             "type": "string",
             "format": "date",
			 "example":"2018-03-07"
          },
		   "Value": {
             "description": "Value",
			 "type": "number",
             "format": "decimal",
             "example":"1000.10"
          },
		   "Comments": {
            "description": "Comments value",
            "type": "string",
			"example":"Comments goes here"
          },
		  "RecoverOnTermination": {
            "description": "RecoverOnTermination value",
            "type": "string",
			"enum":[
			  "Yes",
			  "No"
			],
			"example":"Yes"
          },
          "Customfields": {
            "description": "Customfields value",
             "allOf": [
            {
              "$ref": "#/definitions/CustomfieldArrayForEmployeeBenefit"
            }
          ]
          },
		  "Files":{
		   "description": "Files info.",
           "allOf": [
            {
              "$ref": "#/definitions/FileArrayForEmployeeBenefit"
            }
          ]
		}}

    },
	"Result1GetCustomScreenDetail": {
      "description": "Result Array",
      "type": "array",
      "items": {
        "type": "object",
        "required": [


        ],
        "properties": {
		"ScreenId": {
          "description": "ScreenId value",
           "type": "integer",
           "example": 1014
        },
       "ScreenName": {
          "description": "ScreenName value",
          "type": "string",
          "example": "Grievance"
        }

        }
		}

    },


	"Result1GetByCustomScreenByEmployeeId": {
      "description": " Result Array",
      "type": "array",
      "items": {
        "type": "object",
        "required": [


        ],
        "properties": {
		"TxnId": {
          "description": "TxnId value",
          "type": "integer",
          "example": 521
        },
       "Customfields": {
          "description": "Customfields value",
          "allOf": [
            {
              "$ref": "#/definitions/CustomfieldsForGetCustomScreenDetailObject"
            }
          ]
        },
		"Files": {
          "description": "Files value",
          "allOf": [
            {
              "$ref": "#/definitions/FilesForGetByCustomScreenTransactionIdObject"
            }
          ]
        }

        }
		}

    },

	"Result1GetByCustomScreenTransactionIdObject": {
      "description": " Result Array",

        "type": "object",
        "required": [

        ],
        "properties": {
		"TxnId": {
          "description": "TxnId value",
          "type": "integer",
          "example": 521
        },
       "Customfields": {
          "description": "Customfields value",
          "allOf": [
            {
              "$ref": "#/definitions/CustomfieldsForGetCustomScreenDetailObject"
            }
          ]
        },
		"Files": {
          "description": "Files value",
          "allOf": [
            {
              "$ref": "#/definitions/FilesForGetByCustomScreenTransactionIdObject"
            }
          ]
        }

        }


    },
	"Result1GetHoildayEntittlement": {
      "description": " Result Array",
      "type": "array",
      "items": {
        "type": "object",
        "required": [


        ],
        "properties": {
		"StartDate": {
          "description": "StartDate value",
           "type": "string",
		   "format":"date",
           "example": "2016-07-27"
        },
       "EndDate": {
          "description": " EndDate value",
		   "type": "string",
		   "format":"date",
           "example": "2017-07-27"

        },

		"MeasuredIn": {
          "description": "MeasuredIn value",
          "type": "string",
          "example": "Days"
        },

		"Entitlement": {
          "description": "Entitlement value",
          "type": "integer",
          "format":"decimal",
          "example": "0.50"
        }

        }
		}

    },
	"Result1GetNextYearHolidayEntitlement": {
      "description": " Result Array",
      "type": "array",
      "items": {
        "type": "object",
        "required": [


        ],
        "properties": {
		"StartDate": {
          "description": "StartDate value",
          "type":"string",
		  "format":"date",
		  "example":"2016-07-27"
        },
       "EndDate": {
          "description": " EndDate value",
         "type":"string",
		  "format":"date",
		  "example":"2017-07-27"
        },

		"MeasuredIn": {
          "description": "MeasuredIn value",
          "type": "string",
          "example": "Days"
        },

		"Entitlement": {
          "description": "Entitlement value",
           "type": "integer",
          "format":"decimal",
          "example": "0.50"
        }

        }
		}

    },
	"Result1GetHistoryByEmployeeIdAndFieldName": {
      "description": " Result Array",
      "type": "array",
      "items": {
        "type": "object",
        "required": [


        ],
        "properties": {
		"JobRole": {
          "description": "JobRole value",
            "type": "string",
            "example": "Software Enginner"
        },
       "EffectiveDate": {
          "description": " EffectiveDate value",
          "type": "string",
	      "format":"date",
          "example": "2014-01-01"
        },
		 "ReasonForChange": {
          "description": " ReasonForChange value",
           "type": "string",
           "example": "New Starter"
        },
		"ChangedOn": {
          "description": "ChangedOn value",
          "type": "string",
	      "format":"date",
         "example": "2017-07-13"
        },
		"CreatedBy": {
          "description": "CreatedBy value",
           "type": "string",
           "example": "Vaibhavi Desai"
        }

        }

		}

    },
	"Result2GetHistoryByEmployeeIdAndFieldName": {
      "description": " Result Array",
      "type": "array",
      "items": {
        "type": "object",
        "required": [


        ],
        "properties": {
		"FieldData": {
          "description": "FieldData value",
          "type": "string",
          "example": "Addy Mark"
        },
       "EffectiveDate": {
          "description": " EffectiveDate value",
          "type": "string",
	     "format":"date",
         "example": "2014-01-01"
        },
		"ReasonForChange": {
          "description": " ReasonForChange value",
           "type": "string",
           "example": "New Starter"
        },
		"ChangedOn": {
          "description": "ChangedOn value",
          "type": "string",
	      "format":"date",
          "example": "2017-07-13"
        },

		"CreatedBy": {
          "description": "CreatedBy value",
          "type": "string",
          "example": "Vaibhavi Desai"
        }

        }

		}

    },
	"Result3GetHistoryByEmployeeIdAndFieldName": {
      "description": " Result Array",
      "type": "array",
      "items": {
        "type": "object",
        "required": [


        ],
        "properties": {
		"OldValue": {
          "description": "OldValue value",
          "type": "string",
          "example": "Dinklage"
        },
       "NewValue": {
          "description": "NewValue value",
          "type": "string",
          "example": "Jones"
        },
		"ReasonForChange": {
          "description": " ReasonForChange value",
          "type": "string",
          "example": "New Starter"
        },
		"ChangedOn": {
          "description": "ChangedOn value",
          "type": "string",
	      "format":"date",
          "example": "2017-07-13"
        },
		"CreatedBy": {
          "description": "CreatedBy value",
          "type": "string",
          "example": "Vaibhavi Desai"
        }

        }

		}

    },
	"Result1GetQueryResult": {
      "description": " Result Array",
      "type": "array",
      "items": {
        "type": "object",
        "required": [


        ],
        "properties": {
		"Employee Id": {
          "description": "EmployeeId value",
           "type": "string",
	       "example": "PW180"
        },
       "First Name": {
          "description": " First name value",
          "type": "string",
          "example": "Bhumi"
        },
		"Last Name": {
          "description": "Last name value",
           "type": "string",
           "example": "Bapat"
        },
		 "Holiday Start Date": {
          "description": " Holiday start date value",
           "type": "string",
	       "format":"date",
           "example": "28/08/2017"
        },

		"Holiday End Date": {
          "description": "Holiday end date value",
           "type": "string",
		   "format":"date",
		   "example": "28/08/2017"
        },
		"Holiday Type": {
          "description": "Holiday type value",
          "type": "string",
          "example": "Public Holiday Inclusive"
        },
		"Holiday Duration Type": {
          "description": "Holiday duration type value",
          "type": "string",
          "example": "Full day"
        },
		"Part of the Day": {
          "description": "Part of the day value",
          "type": "string",
          "example": "null"
        },
		"Holiday Duration (Days)": {
          "description": "Holiday duration (days) value",
           "type": "string",
	       "format":"decimal",
           "example": 1.50
        },
		"Holiday Duration (Hrs)": {
          "description": "Holiday duration (hrs) value",
          "type": "string",
          "example": "7:30"
        },
		"Holiday Comments": {
          "description": "Holiday comments value",
          "type": "string",
		  "example": "comment here"
        },
		"Holiday Status": {
          "description": "Holiday status value",
          "type": "string",
          "example": "Approved"
        }

        }
		}

    },
	"Result1GetQueryResultByQueryName": {
      "description": " Result Array",
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
		"Employee Id": {
          "description": "Employee id value",
		  "type": "string",
          "example":"180"
        },
       "First Name": {
          "description": " First name value",
          "type": "string",
          "example": "Bhumi"
        },
		"Last Name": {
          "description": "Last name value",
          "type": "string",
          "example": "Bapat"
        },
		 "Annual Leave Start Date": {
          "description": " Annual leave start date value",
          "type": "string",
	      "format":"date",
          "example": "2014/04/01"
        },

		"Annual Leave End Date": {
          "description": "Annual leave end date value",
         "type": "string",
	     "format":"date",
         "example": "2015/03/31"
        },
		"Allowance Type": {
          "description": "Allowance type value",
         "type": "string",
         "example": "Yearly"
        },
		"Allowance (Days)": {
          "description": "Allowance (days) value",
          "type": "string",
	      "format":"double",
          "example": 28.50
        }
	 }
	}

    },
    "GetBenefitByEmployeeIdArray": {
      "description": " Result Array",
       "type": "array",
       "items": {
        "type": "object",

        "properties": {
          "BenefitId": {
            "description": "Benefit Id value",
            "type": "integer",
			"example":271
          },
          "Benefit": {
            "description": "Benefit value",
            "type": "string",
			"example":"Pension"
          },
		   "DateAwarded": {
            "description": "DateAwarded value",
            "type": "string",
			"format":"date",
			"example":"2016-06-01"
          },
		  "ExpiryDate": {
            "description": "ExpiryDate value",
             "type": "string",
             "format": "date",
			 "example":"2026-06-30"
          },
		   "Value": {
             "description": "Value",
			 "type": "number",
             "format": "decimal",
             "example":"1000.05"
          },
		   "Comments": {
            "description": "Comments value",
            "type": "string",
			"example":"Comments goes here"
          },
		  "RecoverOnTermination": {
            "description": "RecoverOnTermination value",
            "type": "string",
			"enum":[
			  "Yes",
			  "No"
			],
			"example":"Yes"
          },
          "Customfields": {
            "description": "Customfields value",
             "allOf": [
            {
              "$ref": "#/definitions/CustomfieldArrayForEmployeeBenefit"
            }
          ]
          },
		  "Files":{
		   "description": "Files info.",
           "allOf": [
            {
              "$ref": "#/definitions/FileArrayForEmployeeBenefit"
            }
          ]
		}}
      }
    },

	 "CustomfieldArrayForEmployeeBenefit": {
      "type": "array",
	  "items" :{
	  "type":"object",
      "properties": {
        "ColumnName": {
          "description": "Column Name",
          "type": "string",
		  "example":"abc"
        },
        "ColumnValue": {
          "description": "column value",
          "type": "string",
		  "example":""
        }}
	  }
    },
	"FileArrayForEmployeeBenefit":{
	 "type": "array",
	  "items" :{

	  "type":"object",
      "properties": {
        "DocumentName": {
          "description": "DocumentName value",
          "type": "string",
		  "example":"123.png"
        },
		"Description": {
          "description": "Description value",
          "type": "string",
		  "example":"dsadsadasdasd"
        },
	  "FileUrl": {
          "description": "File",
          "type": "string",
		  "format":"url",
		  "example":"http://reportsto.localhost.net:12345/Handlers/MyDocsViewer.ashx?89ed26fe-03cd-4c95-88f4-183fcdff0de4"
        },
		"Category": {
          "description": "category",
          "type": "string",
		  "example":"catagory"
        },
		"SignatureRequired":{
		    "description": "Signature Required",
            "type": "boolean",
		   "enum": [
		    "false",
		    "true"],
		  "example":false
		}}
	  }
	},
	"DeleteBenefitParameter":{
	   "type": "object",
        "required": [
        "APIKey",
        "Action",
        "EmployeeId",
		"BenefitId"
      ],
	"properties": {
	  "APIKey": {
          "description": "APIKey for employee api to DeleteBenefit",
          "type": "string",
		  "allOf": [
            {
              "$ref": "#/definitions/APIKey"
            }
          ]
        },
        "Action": {
          "description": "Action name = DeleteBenefit",
          "allOf": [
            {
              "$ref": "#/definitions/Action"
            }
          ],
		  "example": "DeleteBenefit"
        },
        "EmployeeId": {
          "description": "Employee Id for delete benefit",
          "allOf": [
            {
             "$ref": "#/definitions/EmployeeId"
            }
          ]
        },
		 "BenefitId": {
          "description": "Benefit id for delete benefit",
          "allOf": [
            {
             "$ref": "#/definitions/BenefitId"
            }
          ]
        }}
	},

	"GetCPDByEmployeeIdParameter": {
      "type": "object",
      "required": [
        "APIKey",
        "Action",
		"EmployeeId"
		],
      "properties": {
		"APIKey": {
          "description": "APIKey for employee api to get cpd by employee id",
          "type": "string",
		  "allOf": [
            {
              "$ref": "#/definitions/APIKey"
            }
          ]
        },
        "Action": {
          "description": "Action name = GetCPDByEmployeeId",
          "allOf": [
            {
              "$ref": "#/definitions/Action"
            }
          ],
		  "example": "GetCPDByEmployeeId"
        },
		"EmployeeId": {
          "description": "Employeeid for get cpd by employee id",
          "allOf": [
            {
              "$ref": "#/definitions/EmployeeId"
            }
          ]
        }


      }
    },

	"GetByCPDIdParameter": {
      "type": "object",
      "required": [
        "APIKey",
        "Action",
		"EmployeeId",
		"CPDId"
		],
      "properties": {
		"APIKey": {
          "description": "APIKey for get by cpd id",
          "type": "string",
		  "allOf": [
            {
              "$ref": "#/definitions/APIKey"
            }
          ]
        },
        "Action": {
          "description": "Action name = GetByCPDId",
          "allOf": [
            {
              "$ref": "#/definitions/Action"
            }
          ],
		   "example": "GetByCPDId"
        },
		"EmployeeId": {
          "description": "Employeeid for get by cpd id",
          "allOf": [
            {
              "$ref": "#/definitions/EmployeeId"
            }
          ]
        },
		 "CPDId": {
          "description": "CPID for get by cpd id",
          "allOf": [
            {
              "$ref": "#/definitions/CPDId"
            }
          ]
        }


      }
    },

	"AddnewCPDParameter": {
      "type": "object",
      "required": [
        "APIKey",
        "Action",
		"EmployeeId",
		"Activity",
		"StartDate",
		"CustomColumns",
		"AddFiles"
       ],
      "properties": {
		"APIKey": {
          "description": "APIKey for employee api to add CPD detail",
          "type": "string",
		  "allOf": [
            {
              "$ref": "#/definitions/APIKey"
            }
          ]
        },
        "Action": {
          "description": "Action name = AddNewCPD",
          "allOf": [
            {
              "$ref": "#/definitions/Action"
            }
          ],
		   "example": "AddNewCPD"
        },
		"EmployeeId": {
          "description": "Employeeid for add new CPD",
          "allOf": [
            {
              "$ref": "#/definitions/EmployeeId"
            }
          ]
        },
		"Activity": {
          "description": "Activity for add new CPD",
          "allOf": [
            {
              "$ref": "#/definitions/Activity"
            }
          ]
        },
		"StartDate": {
          "description": "StartDate for add new CPD",
          "allOf": [
            {
              "$ref": "#/definitions/StartDate"
            }
          ]
        },
		"EndDate": {
          "description": "EndDate for add new CPD",
          "allOf": [
            {
              "$ref": "#/definitions/EndDate"
            }
          ]
        },
		"RollNumber": {
          "description": "RollNumber for add new CPD",
          "allOf": [
            {
              "$ref": "#/definitions/RollNumber"
            }
          ]
        },
		"DateAdmitted": {
          "description": "DateAdmitted for add new CPD",
          "allOf": [
            {
              "$ref": "#/definitions/DateAdmitted"
            }
          ]
        },
		"HoursRequired": {
          "description": "HoursRequired for add new CPD",
          "allOf": [
            {
              "$ref": "#/definitions/HoursRequired"
            }
          ]
        },
		"HoursAccredited": {
          "description": "HoursAccredited for add new CPD",
          "allOf": [
            {
              "$ref": "#/definitions/HoursAccredited"
            }
          ]
        },
		"Notes": {
          "description": "Notes for add new CPD",
          "allOf": [
            {
             "$ref": "#/definitions/Notes"
            }
          ],
		  "maxLength":"256"
		},
		"CustomColumns": {
          "description": "CustomColumns for add new cpd",
          "allOf": [
            {
             "$ref": "#/definitions/CustomColumnsArrayForEmployeeCPD"
            }
          ]},
		"AddFiles": {
          "description": "AddFiles for add new cpd",
          "allOf": [
            {
             "$ref": "#/definitions/AddFilesArrayForEmployeeCPD"
            }
          ]}

      }
    },

	"UpdateCPDParameter": {
      "type": "object",
      "required": [
        "APIKey",
        "Action",
		"EmployeeId",
		"CPDId",
		"Activity",
		"StartDate"
	 ],
      "properties": {
		"APIKey": {
          "description": "APIKey for employee api to update CPD detail",
          "type": "string",
		  "allOf": [
            {
              "$ref": "#/definitions/APIKey"
            }
          ]
        },
        "Action": {
          "description": "Action name = UpdateCPD",
          "allOf": [
            {
              "$ref": "#/definitions/Action"
            }
          ],
		   "example": "UpdateCPD"
        },
		"EmployeeId": {
          "description": "Employeeid for update CPD",
          "allOf": [
            {
              "$ref": "#/definitions/EmployeeId"
            }
          ]
        },
		 "CPDId": {
          "description": "CPID for update CPD",
          "allOf": [
            {
              "$ref": "#/definitions/CPDId"
            }
          ]
        },
		"Activity": {
          "description": "Activity for update CPD",
          "allOf": [
            {
              "$ref": "#/definitions/Activity"
            }
          ]
        },
		"StartDate": {
          "description": "StartDate for update CPD",
          "allOf": [
            {
              "$ref": "#/definitions/StartDate"
            }
          ]
        },
		"EndDate": {
          "description": "EndDate for update CPD",
          "allOf": [
            {
              "$ref": "#/definitions/EndDate"
            }
          ]
        },
		"RollNumber": {
          "description": "RollNumber for update CPD",
          "allOf": [
            {
              "$ref": "#/definitions/RollNumber"
            }
          ]
        },
		"DateAdmitted": {
          "description": "DateAdmitted for update CPD",
          "allOf": [
            {
              "$ref": "#/definitions/DateAdmitted"
            }
          ]
        },
		"HoursRequired": {
          "description": "HoursRequired for update CPD",
          "allOf": [
            {
              "$ref": "#/definitions/HoursRequired"
            }
          ]
        },
		"HoursAccredited": {
          "description": "HoursAccredited for update CPD",
          "allOf": [
            {
              "$ref": "#/definitions/HoursAccredited"
            }
          ]
        },
		"Notes": {
          "description": "Notes for update CPD",
          "allOf": [
            {
             "$ref": "#/definitions/Notes"
            }
          ],
		  "maxLength":"256"
		},
		"CustomColumns": {
          "description": "CustomColumns for update CPD",
          "allOf": [
            {
             "$ref": "#/definitions/CustomColumnsArrayForEmployeeCPD"
            }
          ]},
		"AddFiles": {
          "description": "AddFiles for update CPD",
          "allOf": [
            {
             "$ref": "#/definitions/AddFilesArrayForEmployeeCPD"
            }
          ]}

      }
    },

	"DeleteCPDParameter": {
      "type": "object",
      "required": [
        "APIKey",
        "Action",
		"EmployeeId",
		"CPDId"
       ],
      "properties": {
		"APIKey": {
          "description": "APIKey for employee api to delete CPD detail",
          "type": "string",
		  "allOf": [
            {
              "$ref": "#/definitions/APIKey"
            }
          ]
        },
        "Action": {
          "description": "Action name = DeleteCPD",
          "allOf": [
            {
              "$ref": "#/definitions/Action"
            }
          ],
		  "example": "DeleteCPD"
        },
		"EmployeeId": {
          "description": "Employeeid for delete CPD",
          "allOf": [
            {
              "$ref": "#/definitions/EmployeeId"
            }
          ]
        },
		 "CPDId": {
          "description": "CPID for delete CPD",
          "allOf": [
            {
              "$ref": "#/definitions/CPDId"
            }
          ]
        }
	  }
    },

	"GetCustomScreenDetailParameter": {
      "type": "object",
      "required": [
        "APIKey",
        "Action",
		"EmployeeId"

      ],
      "properties": {
	  "APIKey": {
          "description": "APIKey for employee custom screen api to GetCustomScreenDetail",
          "type": "string",
		  "allOf": [
            {
              "$ref": "#/definitions/APIKey"
            }
          ]
        },
        "Action": {
          "description": "Action name = GetCustomScreenDetail",
          "allOf": [
            {
              "$ref": "#/definitions/Action"
            }
          ],
		   "example": "GetCustomScreenDetail"
        }

      }
    },
	"GetCustomScreenByEmployeeIdParameter": {
      "type": "object",
      "required": [
        "APIKey",
        "Action",
		"ScreenId",
		"EmployeeId"

      ],
      "properties": {
	  "APIKey": {
          "description": "APIKey for employee custom screen api to GetCustomScreenByEmployeeId",
          "type": "string",
		  "allOf": [
            {
              "$ref": "#/definitions/APIKey"
            }
          ]
        },
        "Action": {
          "description": "Action name = GetCustomScreenByEmployeeId",
          "allOf": [
            {
              "$ref": "#/definitions/Action"
            }
          ],
		   "example": "GetCustomScreenByEmployeeId"
        },
		"ScreenId": {
          "description": "ScreenId for get custom screen by employeeId",
          "allOf": [
            {
              "$ref": "#/definitions/ScreenId"
            }
          ]
        },
		"EmployeeId": {
          "description": "EmployeeId for get custom screen by employeeId",
          "allOf": [
            {
              "$ref": "#/definitions/EmployeeId"
            }
          ]
        }}
    },
	"GetByCustomScreenTransactionIdParameter": {
      "type": "object",
      "required": [
        "APIKey",
        "Action",
		"EmployeeId",
		"ScreenId",
		"DocumentName",
		"CustomScreenTransactionId"

      ],
      "properties": {
	  "APIKey": {
          "description": "APIKey for employee custom screen api to GetByCustomScreenTransactionId",
          "type": "string",
		  "allOf": [
            {
              "$ref": "#/definitions/APIKey"
            }
          ]
        },
        "Action": {
          "description": "Action name = GetByCustomScreenTransactionId",
          "allOf": [
            {
              "$ref": "#/definitions/Action"
            }
          ],
		    "example": "GetByCustomScreenTransactionId"
        },
		"EmployeeId": {
          "description": "EmployeeId for employee custom screen",
          "allOf": [
            {
              "$ref": "#/definitions/EmployeeId"
            }
          ]
        },
		"ScreenId": {
          "description": "ScreenId for employee custom screen",
          "allOf": [
            {
              "$ref": "#/definitions/ScreenId"
            }
          ]
        },
		"CustomScreenTransactionId": {
          "description": "CustomScreenTransactionId for employee custom screen",
          "allOf": [
            {
              "$ref": "#/definitions/CustomScreenTransactionId"
            }
          ]
        }

      }
    },
	"UpdateCustomScreenTransactionParameter": {
      "type": "object",
      "required": [
        "APIKey",
        "Action",
		"EmployeeId",
		"ScreenId",
		"CustomScreenTransactionId",
		"CustomColumns",
		"AddFiles",
		"DocumentName",
		"File",
		"Description",
		"DocumentCategory",
		"SignatureRequired"

      ],
      "properties": {
	  "APIKey": {
          "description": "APIKey for employee custom screen api to UpdateCustomScreenTransaction",
          "type": "string",
		  "allOf": [
            {
              "$ref": "#/definitions/APIKey"
            }
          ]
        },
        "Action": {
          "description": "Action name = UpdateCustomScreenTransaction",
          "allOf": [
            {
              "$ref": "#/definitions/Action"
            }
          ],
		   "example": "UpdateCustomScreenTransaction"
        },
		"EmployeeId": {
          "description": "EmployeeId for update custom screen transaction",
          "allOf": [
            {
              "$ref": "#/definitions/EmployeeId"
            }
          ]
        },
		"ScreenId": {
          "description": "ScreenId for update custom screen transaction",
          "allOf": [
            {
              "$ref": "#/definitions/ScreenId"
            }
          ]
        },
		"CustomScreenTransactionId": {
          "description": "CustomScreenTransactionId for update custom screen transaction",
          "allOf": [
            {
              "$ref": "#/definitions/CustomScreenTransactionId"
            }
          ]
        },
		"CustomColumns": {
          "description": "CustomColumns for update custom screen transaction",
          "allOf": [
            {
              "$ref": "#/definitions/CustomColumnsForEmployeeCustomScreenObject"
            }
          ]
        },
		"AddFiles": {
          "description": "AddFiles for update custom screen transaction",
          "allOf": [
            {
              "$ref": "#/definitions/AddFilesForEmployeeCustomScreenObject"
            }
          ]
        }

      }
    },
	"DeleteCustomScreenTransactionParameter": {
      "type": "object",
      "required": [
        "APIKey",
        "Action",
		"EmployeeId",
		"ScreenId",
		"CustomScreenTransactionId"

      ],
      "properties": {
	  "APIKey": {
          "description": "APIKey for employee custom screen api to DeleteCustomScreenTransaction",
          "type": "string",
		  "allOf": [
            {
              "$ref": "#/definitions/APIKey"
            }
          ]
        },
        "Action": {
          "description": "Action name = DeleteCustomScreenTransaction",
          "allOf": [
            {
              "$ref": "#/definitions/Action"
            }
          ],
		   "example": "DeleteCustomScreenTransaction"
        },
		"EmployeeId": {
          "description": "EmployeeId for delete custom screen transaction",
          "allOf": [
            {
              "$ref": "#/definitions/EmployeeId"
            }
          ]
        },
		"ScreenId": {
          "description": "ScreenId for delete custom screen transaction",
          "allOf": [
            {
              "$ref": "#/definitions/ScreenId"
            }
          ]
        },
		"CustomScreenTransactionId": {
          "description": "CustomScreenTransactionId for delete custom screen transaction",
          "allOf": [
            {
              "$ref": "#/definitions/CustomScreenTransactionId"
            }
          ]
        }

      }
    },
	"GetHolidayEntitlementParameter": {
      "type": "object",
      "required": [
        "APIKey",
        "Action",
		"EmployeeId"

      ],
      "properties": {
	  "APIKey": {
          "description": "APIKey for holiday entitlement api to GetHolidayEntitlement",
          "type": "string",
		  "allOf": [
            {
              "$ref": "#/definitions/APIKey"
            }
          ]
        },
        "Action": {
          "description": "Action name = GetHolidayEntitlement",
          "allOf": [
            {
              "$ref": "#/definitions/Action"
            }
          ],
		   "example": "GetHolidayEntitlement"
        },
		 "EmployeeId": {
          "description": "Employeeid for get holiday entitlement",
          "allOf": [
            {
              "$ref": "#/definitions/EmployeeId"
            }
          ]
        },
        "StartDate": {
          "description": "Startdate for get holiday entitlement",
          "allOf": [
            {
             "$ref": "#/definitions/StartDate"
            }
          ]
        },
        "EndDate": {
          "description": "EndDate for get holiday entitlement",
          "allOf": [
            {
             "$ref": "#/definitions/EndDate"
            }
          ]
        }



      }
    },
	"GetNextYearHolidayEntitlementParameter": {
      "type": "object",
      "required": [
        "APIKey",
        "Action",
		"EmployeeId"

      ],
      "properties": {
	  "APIKey": {
          "description": "APIKey for holiday entitlement api to GetNextYearHolidayEntitlement",
          "type": "string",
		  "allOf": [
            {
              "$ref": "#/definitions/APIKey"
            }
          ]
        },
        "Action": {
          "description": "Action name = GetNextYearHolidayEntitlement",
          "allOf": [
            {
              "$ref": "#/definitions/Action"
            }
          ],
		   "example": "GetNextYearHolidayEntitlement"
        },
		 "EmployeeId": {
          "description": "EmployeeId for get next year holiday entitlement",
          "allOf": [
            {
              "$ref": "#/definitions/EmployeeId"
            }
          ]
        }
      }
    },
	"UpdateHolidayEntitlementParameter": {
      "type": "object",
      "required": [
        "APIKey",
        "Action",
		"EmployeeId",
		"ReasonForChange"

      ],
      "properties": {
	  "APIKey": {
          "description": "APIKey for holiday entitlement api to UpdateHolidayEntitlement",
          "type": "string",
		  "allOf": [
            {
              "$ref": "#/definitions/APIKey"
            }
          ]
        },
        "Action": {
          "description": "Action name = UpdateHolidayEntitlement",
          "allOf": [
            {
              "$ref": "#/definitions/Action"
            }
          ],
		   "example": "UpdateHolidayEntitlement"
        },
		 "EmployeeId": {
          "description": "EmployeeId for update holiday entitlement",
          "allOf": [
            {
              "$ref": "#/definitions/EmployeeId"
            }
          ]
        },
		"EntitlementThisYear": {
          "description": "EntitlementThisYear for update holiday entitlement",
          "allOf": [
            {
              "$ref": "#/definitions/EntitlementThisYear"
            }
          ]
        },
		"ReasonForChange": {
          "description": "ReasonForChange for update holiday entitlement",
          "allOf": [
            {
              "$ref": "#/definitions/ReasonForChange"
            }
          ]
        }
      }
    },

"UpdateNextYearHolidayEntitlementParameter": {
      "type": "object",
      "required": [
        "APIKey",
        "Action",
		"EmployeeId",
		"ReasonForChange"

      ],
      "properties": {
	  "APIKey": {
          "description": "APIKey for holiday entitlement api to UpdateNextYearHolidayEntitlement",
          "type": "string",
		  "allOf": [
            {
              "$ref": "#/definitions/APIKey"
            }
          ]
        },
        "Action": {
          "description": "Action name = UpdateNextYearHolidayEntitlement",
          "allOf": [
            {
              "$ref": "#/definitions/Action"
            }
          ],
		   "example": "UpdateNextYearHolidayEntitlement"
        },
		 "EmployeeId": {
          "description": "EmployeeId for update next year holiday entitlement",
          "allOf": [
            {
              "$ref": "#/definitions/EmployeeId"
            }
          ]
        },
		"EntitlementNextYear": {
          "description": "EntitlementNextYear for update next year holiday entitlement",
          "allOf": [
            {
              "$ref": "#/definitions/EntitlementNextYear"
            }
          ]
        },
		"ReasonForChange": {
          "description": "ReasonForChange for update next year holiday entitlement",
          "allOf": [
            {
              "$ref": "#/definitions/ReasonForChange"
            }
          ]
        }
       }
    },
	"GetHistoryByEmployeeIdAndFieldNameParameter": {
      "type": "object",
      "required": [
        "APIKey",
        "Action",
		"EmployeeId",
		"FieldName"

      ],
      "properties": {
	  "APIKey": {
          "description": "APIKey for History to GetHistoryByEmployeeIdAndFieldName",
          "type": "string",
		  "allOf": [
            {
              "$ref": "#/definitions/APIKey"
            }
          ]
        },
        "Action": {
          "description": "Action name = GetHistoryByEmployeeIdAndFieldName",
          "allOf": [
            {
              "$ref": "#/definitions/Action"
            }
          ],
		   "example": "GetHistoryByEmployeeIdAndFieldName"
        },
		 "EmployeeId": {
          "description": "EmployeeId for get history by employeeId and fieldName",
          "allOf": [
            {
              "$ref": "#/definitions/EmployeeId"
            }
          ]
        },
        "FieldName": {
          "description":   "Field Name for get history by employeeId and fieldName As Follows:<br />1] EMPLOYEE_PERSONAL_TITLE<br />2] EMPLOYEE_PERSONAL_FIRST_NAME<br />3] EMPLOYEE_PERSONAL_LAST_NAME<br />4] EMPLOYEE_PERSONAL_OTHER_NAME<br />5] EMPLOYEE_PERSONAL_KNOWN_AS<br />6] EMPLOYEE_PERSONAL_EMAIL<br />7] EMPLOYEE_PERSONAL_GENDER<br />8] EMPLOYEE_PERSONAL_DATE_OF_BIRTH<br />9] EMPLOYEE_PERSONAL_START_DATE<br />10] EMPLOYEE_PERSONAL_REPORTS_TO<br />11] EMPLOYEE_PERSONAL_JOB_ROLE<br />12] EMPLOYEE_PERSONAL_LOCATION<br />13] EMPLOYEE_PERSONAL_DEPARTMENT<br />14] EMPLOYEE_PERSONAL_UNIQUE_ID<br />15] EMPLOYEE_PERSONAL_NATIONAL_INSURANCE_NUMBER<br />16] EMPLOYEE_PERSONAL_NATIONALITY<br />17] EMPLOYEE_PERSONAL_EMPLOYMENT_TYPE<br />18] EMPLOYEE_EMPLOYMENT_PROBATION_END_DATE<br />19] EMPLOYEE_EMPLOYMENT_NOTICE_PERIOD<br />20] EMPLOYEE_EMPLOYMENT_METHOD_OF_RECRUITMENT<br />21] EMPLOYEE_EMPLOYMENT_RECRUITMENT_COST<br />22] EMPLOYEE_CONTACT_INFORMATION_POST_CODE<br />23] EMPLOYEE_CONTACT_INFORMATION_ADDRESS<br />24] EMPLOYEE_CONTACT_INFORMATION_WORK_PHONE<br />25] EMPLOYEE_CONTACT_INFORMATION_PERSONAL_PHONE<br />26] EMPLOYEE_CONTACT_INFORMATION_BANK_NAME<br />27] EMPLOYEE_CONTACT_INFORMATION_BANK_CODE<br />28] EMPLOYEE_CONTACT_INFORMATION_ACCOUNT_NUMBER<br />  29]EMPLOYEE_CONTACT_INFORMATION_OTHER_ACCOUNT_INFORMATION<br />30] EMPLOYEE_CONTACT_INFORMATION_ACCOUNT_NAME<br />31] EMPLOYEE_CONTACT_INFORMATION_BANK_ADDRESS",
          "allOf": [
            {
             "$ref": "#/definitions/FieldName"
            }
          ]
        }
	 }
    },
	"GetQueryResultParameter": {
      "type": "object",
      "required": [
        "APIKey",
        "Action",
		"QueryName"

      ],
      "properties": {
	  "APIKey": {
          "description": "APIKey for Query api to GetQueryResult",
          "type": "string",
		  "allOf": [
            {
              "$ref": "#/definitions/APIKey"
            }
          ]
        },
        "Action": {
          "description": "Action name = GetQueryResult",
          "allOf": [
            {
              "$ref": "#/definitions/Action"
            }
          ],
		  "example": "GetQueryResult"
        },
		 "QueryName": {
          "description": "QueryName for get query result",
          "allOf": [
            {
              "$ref": "#/definitions/QueryName"
            }
          ]
        }



      }
    },
	"GetQueryResultByQueryNameParameter": {
      "type": "object",
      "required": [
        "APIKey",
        "Action",
		"QueryName"

      ],
      "properties": {
	  "APIKey": {
          "description": "APIKey for query api to GetQueryResultByQueryName",
          "type": "string",
		  "allOf": [
            {
              "$ref": "#/definitions/APIKey"
            }
          ]
        },
        "Action": {
          "description": "Action name = GetQueryResultByQueryName",
          "allOf": [
            {
              "$ref": "#/definitions/Action"
            }
          ],
		   "example": "GetQueryResultByQueryName"
        },
		 "QueryName": {
          "description": "QueryName get query result by query name",
          "allOf": [
            {
              "$ref": "#/definitions/QueryName"
            }
          ]
        }
	}
    },
	"AddNewCustomScreenTransactionParameter": {
      "type": "object",
      "required": [
        "APIKey",
        "Action",
		"EmployeeId",
		"ScreenId",
		"CustomColumns",
        "AddFiles"
      ],
      "properties": {
	  "APIKey": {
          "description": "APIKey for employee custom screen api to AddNewCustomScreenTransaction",
          "type": "string",
		  "allOf": [
            {
              "$ref": "#/definitions/APIKey"
            }
          ]
        },
        "Action": {
          "description": "Action name = AddNewCustomScreenTransaction",
          "allOf": [
            {
              "$ref": "#/definitions/Action"
            }
          ],
		   "example": "AddNewCustomScreenTransaction"
        },
		"EmployeeId": {
          "description": "EmployeeId for add new custom screen transaction",
          "allOf": [
            {
              "$ref": "#/definitions/EmployeeId"
            }
          ]
        },
		"ScreenId": {
          "description": "ScreenId for add new custom screen transaction",
          "allOf": [
            {
              "$ref": "#/definitions/ScreenId"
            }
          ]
        },
		"CustomColumns": {
          "description": "CustomColumns for add new custom screen transaction",
          "allOf": [
            {
              "$ref": "#/definitions/CustomColumnsForEmployeeCustomScreenObject"
            }
          ]
        },
		"AddFiles": {
          "description": "AddFiles for add new custom screen transaction",
          "allOf": [
            {
              "$ref": "#/definitions/AddFilesForEmployeeCustomScreenObject"
            }
          ]
        }

      }
    },
	"UpdateBenefitParameter":{
	 "type": "object",
      "required": [
        "APIKey",
        "Action",
        "EmployeeId",
		"Benefit",
		"BenefitId",
		"DateAwarded",
		"RecoverOnTermination"
      ],
	"properties": {
	  "APIKey": {
          "description": "APIKey for employee api to UpdateBenefit",
          "type": "string",
		  "allOf": [
            {
              "$ref": "#/definitions/APIKey"
            }
          ]
        },
        "Action": {
          "description": "Action name = UpdateBenefit",
          "allOf": [
            {
              "$ref": "#/definitions/Action"
            }
          ],
		    "example": "UpdateBenefit"
        },
        "EmployeeId": {
          "description": "Employee Id for update benefit",
          "allOf": [
            {
             "$ref": "#/definitions/EmployeeId"
            }
          ]
        },
		 "Benefit": {
          "description": "Benefit for update benefit",
          "allOf": [
            {
             "$ref": "#/definitions/Benefit"
            }
          ]
        },
		 "BenefitId": {
          "description": "Benefit id for update benefit",
          "allOf": [
            {
             "$ref": "#/definitions/BenefitId"
            }
          ]
        },
		 "DateAwarded": {
          "description": "DateAwarded for update benefit",
          "allOf": [
            {
             "$ref": "#/definitions/DateAwarded"
            }
          ]
        },
		 "ExpiryDate": {
          "description": "ExpiryDate for update benefit",
          "allOf": [
            {
             "$ref": "#/definitions/ExpiryDate"
            }
          ]
        },
		 "Value": {
          "description": "Value for update benefit",
          "allOf": [
            {
             "$ref": "#/definitions/Value"
            }
          ]
        },
		"RecoverOnTermination": {
          "description": "RecoverOnTermination for update benefit",
          "allOf": [
            {
             "$ref": "#/definitions/RecoverOnTermination"
            }
          ]
        },
		"CustomColumns": {
          "description": "CustomColumns contain column name and column value",
          "allOf": [
            {
             "$ref": "#/definitions/CustomColumnsArrayForAddNewBenefit"
            }
          ]
        },
      "AddFiles": {
          "description": "AddFiles contain file info.",
          "allOf": [
            {
              "$ref": "#/definitions/AddFilesArrayForUpdateBenefit"
            }
          ]
        }}
	},
	"AddNewBenefitParameter":{
	 "type": "object",
      "required": [
        "APIKey",
        "Action",
        "EmployeeId",
		"Benefit",
		"DateAwarded",
		"ExpiryDate",
		"RecoverOnTermination",
		"CustomColumns",
		"AddFiles"
      ],
	"properties": {
	  "APIKey": {
          "description": "APIKey for employee api to AddNewBenefit",
          "type": "string",
		  "allOf": [
            {
              "$ref": "#/definitions/APIKey"
            }
          ]
        },
        "Action": {
          "description": "Action name = AddNewBenefit",
          "allOf": [
            {
              "$ref": "#/definitions/Action"
            }
          ],
		   "example": "AddNewBenefit"
        },
        "EmployeeId": {
          "description": "Employee Id for add new benefit",
          "allOf": [
            {
             "$ref": "#/definitions/EmployeeId"
            }
          ]
        },
		 "Benefit": {
          "description": "Benefit for add new benefit",
          "allOf": [
            {
             "$ref": "#/definitions/Benefit"
            }
          ]
        },
		 "DateAwarded": {
          "description": "DateAwarded for add new benefit",
          "allOf": [
            {
             "$ref": "#/definitions/DateAwarded"
            }
          ]
        },
		 "ExpiryDate": {
          "description": "ExpiryDate for add new benefit",
          "allOf": [
            {
             "$ref": "#/definitions/ExpiryDate"
            }
          ]
        },
		 "Value": {
          "description": "Value for add new benefit",
          "allOf": [
            {
             "$ref": "#/definitions/Value"
            }
          ]
        },
		"Comments":{
		     "description": "Comments for add new benefit",
          "allOf": [
            {
             "$ref": "#/definitions/Comments"
            }
          ],
		   "maxLength":"256"
		},
		"RecoverOnTermination": {
          "description": "RecoverOnTermination for add new benefit",
          "allOf": [
            {
             "$ref": "#/definitions/RecoverOnTermination"
            }
          ]
        },
		"CustomColumns": {
          "description": "CustomColumns value",
          "allOf": [
            {
             "$ref": "#/definitions/CustomColumnsArrayForAddNewBenefit"
            }
          ]
        },
      "AddFiles": {
          "description": "AddFiles contain file info.",
          "allOf": [
            {
              "$ref": "#/definitions/AddFilesArrayForAddNewBenefit"
            }
          ]
        }}
	},
	"CustomColumnsArrayForAddNewBenefit":{
	  "type": "array",
	  "items" :{
	  "required":[
	  "ColumnName"
	 ],
	  "type":"object",
      "properties": {
        "ColumnName": {
          "description": "ColumnName value",
          "type": "string",
		  "example":"abc"
        },
		"ColumnValue": {
          "description": "ColumnValue value",
          "type": "string",
		  "example":""
        }}
	  }
	},
	"AddFilesArrayForUpdateBenefit":{
	  "type": "array",
	  "items" :{
	  "required":[
	  "DocumentName",
	  "File",
	  "DocumentCategory",
	  "SignatureRequired"],
	  "type":"object",
      "properties": {
        "DocumentName": {
          "description": "DocumentName value",
          "type": "string",
		  "maxLength":"100",
		  "example":"123.png"
        },
		"File": {
          "description": "File base64 value",
          "type": "string",
		  "example":"pass base64 string"
        },
		"Description": {
          "description": "Description value",
          "type": "string",
		  "maxLength":"256",
		  "example":"dsadsadasdasd"
        },
		"DocumentCategory": {
		  "type": "string",
          "description": "Document category value",
		  "maxLength":"100",
		  "example":"catagory"
        },
		"SignatureRequired":{
		    "description": "Signature Required value",
            "type": "boolean",
		   "enum": [
		   "false",
		   "true"],
		  "example":"true"
		}}
	  }
	},
	"AddFilesArrayForAddNewBenefit":{
    "type": "array",
	  "items" :{
	  "required":[
	  "DocumentName",
	  "File",
	  "DocumentCategory",
	  "SignatureRequired"],
	  "type":"object",
      "properties": {
        "DocumentName": {
          "description": "DocumentName value",
          "type": "string",
		  "maxLength":"100",
		  "example":"123.png"
        },
		"File": {
          "description": "File base64 value",
          "type": "string",
		  "example":"pass base64 string"
        },
		"Description": {
          "description": "Description value",
          "type": "string",
		  "maxLength":"256",
		  "example":"dsadsadasdasd"
        },
		"DocumentCategory": {
		  "type": "string",
          "description": "Document category value",
		  "maxLength":"100",
		  "example":"catagory"
        },
		"SignatureRequired":{
		    "description": "Signature required value",
            "type": "boolean",
		   "enum": [
		   "false",
		   "true"],
		  "example":"true"
		}}
	  }
 },

	"EmailInboxParameter": {
      "type": "object",
      "required": [
        "Action",
        "EmailFrom",
		"EmailTo",
		"EmailSubject"

      ],
      "properties": {
        "Action": {
          "description": "Action name = EmailInbox",
          "allOf": [
            {
              "$ref": "#/definitions/Action"
            }
          ],
		 "example": "EmailInbox"
        },
        "EmailFrom": {
          "description": "Email From for Email Inbox",
          "allOf": [
            {
             "$ref": "#/definitions/EmailFrom"
            }
          ]
        },
		 "EmailTo": {
          "description": "Email To for Email Inbox",
          "allOf": [
            {
             "$ref": "#/definitions/EmailToForEmailInbox"
            }
          ]
        },
		"EmailCc": {
          "description": "Email Cc for Email Inbox",
          "allOf": [
            {
             "$ref": "#/definitions/EmailCcForEmailInbox"
            }
          ]
        },
		"EmailBcc": {
          "description": "Email Bcc for Email Inbox",
          "allOf": [
            {
             "$ref": "#/definitions/EmailBccForEmailInbox"
            }
          ]
        },
		"EmailSubject": {
          "description": "Email Subject for Email Inbox",
          "allOf": [
            {
             "$ref": "#/definitions/EmailSubject"
            }
          ]
        },
		"Attachment": {
          "description": "Attachment for Email Inbox",
          "allOf": [
            {
             "$ref": "#/definitions/AttachmentForEmailInbox"
            }
          ]
        }


      }
    },

	 "AddNewRightToWorkDetailParameter": {
      "type": "object",
      "required": [
        "APIKey",
        "Action",
        "EmployeeId",
		"DocumentName",
		"File"

      ],
      "properties": {
	  "APIKey": {
          "description": "APIKey for right to work  api to addrighttoworkdetail",
          "type": "string",
		  "allOf": [
            {
              "$ref": "#/definitions/APIKey"
            }
          ]
        },
        "Action": {
          "description": "Action name = addrighttoworkdetail",
          "allOf": [
            {
              "$ref": "#/definitions/Action"
            }
          ],
		  "example": "addrighttoworkdetail"
        },
        "EmployeeId": {
          "description": "Employee id for add right to work detail",
          "allOf": [
            {
             "$ref": "#/definitions/EmployeeId"
            }
          ]
        },
		 "DocumentType": {
          "description": "Document type for add right to work detail",
          "allOf": [
            {
             "$ref": "#/definitions/DocumentType"
            }
          ]
        },
		 "DocumentId": {
          "description": "Document Id for add right to work detail",
          "allOf": [
            {
             "$ref": "#/definitions/DocumentId"
            }
          ]
        },
		 "ValidFrom": {
          "description": "Valid From for add right to work detail",
          "allOf": [
            {
             "$ref": "#/definitions/ValidFrom"
            }
          ]
        },
		 "ValidTo": {
          "description": "Valid To for add right to work detail",
          "allOf": [
            {
             "$ref": "#/definitions/ValidTo"
            }
          ]
        },
		 "Duration": {
          "description": "Duration for add right to work detail",
          "allOf": [
            {
             "$ref": "#/definitions/Duration"
            }
          ]
        },
		 "DocumentName": {
          "description": "Duration for add right to work detail",
          "allOf": [
            {
             "$ref": "#/definitions/DocumentName"
            }
          ]
        },
		 "File": {
          "description": "File for add right to work detail",
          "allOf": [
            {
             "$ref": "#/definitions/File"
            }
          ]
        },
		 "Comments": {
          "description": "Comments for add right to work detail",
          "allOf": [
            {
             "$ref": "#/definitions/Comments"
            }
          ],
		   "maxLength":"256"}



      }
    },

	 "GetRightToWorkDetailParameter": {
      "type": "object",
      "required": [
        "APIKey",
        "Action",
        "EmployeeId"
      ],
      "properties": {
	  "APIKey": {
          "description": "APIKey for right to work api to GetRightToWorkDetail",
          "type": "string",
		  "allOf": [
            {
              "$ref": "#/definitions/APIKey"
            }
          ]
        },
        "Action": {
          "description": "Action name = getrighttoworkdetail",
          "allOf": [
            {
              "$ref": "#/definitions/Action"
            }
          ],
		   "example": "getrighttoworkdetail"
        },
        "EmployeeId": {
          "description": "Employee id to get employee detail",
          "allOf": [
            {
             "$ref": "#/definitions/EmployeeId"
            }
          ]
        }
      }
    },
	"updaterighttoworkdetailParameter": {
      "type": "object",
      "required": [
        "APIKey",
        "Action",
		"EmployeeId",
		"RightToWorkTxnId",
		"DocumentName",
		"File"
      ],
      "properties": {
	  "APIKey": {
          "description": "APIKey for right to work api to updaterighttoworkdetail",
          "type": "string",
		  "allOf": [
            {
              "$ref": "#/definitions/APIKey"
            }
          ]
        },
        "Action": {
          "description": "Action name = updaterighttoworkdetail",
          "allOf": [
            {
              "$ref": "#/definitions/Action"
            }
          ],
		   "example": "updaterighttoworkdetail"
        },
        "EmployeeId": {
          "description": "Employee id for update right to work detail",
          "allOf": [
            {
             "$ref": "#/definitions/EmployeeId"
            }
          ]
        },
        "RightToWorkTxnId": {
          "description": "Right To Work Txn Id for update right to work detail",
          "allOf": [
            {
             "$ref": "#/definitions/RightToWorkTxnId"
            }
          ]
        },
		"DocumentType": {
          "description": "Document Type for update right to work detail",
          "allOf": [
            {
             "$ref": "#/definitions/DocumentType"
            }
          ]
        },
		"DocumentId": {
          "description": "Document Id for update right to work detail",
          "allOf": [
            {
             "$ref": "#/definitions/DocumentId"
            }
          ]
        },
		"ValidFrom": {
          "description": "Valid From for update right to work detail",
          "allOf": [
            {
             "$ref": "#/definitions/ValidFrom"
            }
          ]
        },
		"ValidTo": {
          "description": "Valid To for update right to work detail",
          "allOf": [
            {
             "$ref": "#/definitions/ValidTo"
            }
          ]
        },
		"Duration": {
          "description": "Duration for update right to work detail",
          "allOf": [
            {
             "$ref": "#/definitions/Duration"
            }
          ]
        },
		"DocumentName": {
          "description": "Document Name for update right to work detail",
          "allOf": [
            {
             "$ref": "#/definitions/DocumentName"
            }
          ]
        },
		"File": {
          "description": "File for update right to work detail",
          "allOf": [
            {
             "$ref": "#/definitions/File"
            }
          ]
        },
		"Comments": {
          "description": "Comments for update right to work detail",
          "allOf": [
            {
             "$ref": "#/definitions/Comments"
            }
          ],
		   "maxLength":"256"
        }

     }

},

	"deleterighttoworkdetailParameter": {
      "type": "object",
      "required": [
        "APIKey",
        "Action",
		"EmployeeId",
		"RightToWorkTxnId"
      ],
      "properties": {
	  "APIKey": {
          "description": "APIKey for right to work api to deleterighttoworkdetail",
          "type": "string",
		  "allOf": [
            {
              "$ref": "#/definitions/APIKey"
            }
          ]
        },
        "Action": {
          "description": "Action name = deleterighttoworkdetail",
          "allOf": [
            {
              "$ref": "#/definitions/Action"
            }
          ],
		  "example": "deleterighttoworkdetail"
        },
        "EmployeeId": {
          "description": "Employee id for delete right to work detail",
          "allOf": [
            {
             "$ref": "#/definitions/EmployeeId"
            }
          ]
        },
        "RightToWorkTxnId": {
          "description": "Right To Work Txn Id for delete right to work detail",
          "allOf": [
            {
             "$ref": "#/definitions/RightToWorkTxnId"
            }
          ]
        }


     }

},

	"GetBackgroundCheckDetailByEmployeeIdParameter": {
      "type": "object",
      "required": [
        "APIKey",
        "Action",
        "EmployeeId"
      ],
      "properties": {
	  "APIKey": {
          "description": "APIKey for background check api to Get Background Check Detail By EmployeeId",
          "type": "string",
		  "allOf": [
            {
              "$ref": "#/definitions/APIKey"
            }
          ]
        },
        "Action": {
          "description": "Action name = GetBackgroundCheckDetailByEmployeeId",
          "allOf": [
            {
              "$ref": "#/definitions/Action"
            }
          ],
		   "example": "GetBackgroundCheckDetailByEmployeeId"
        },
        "EmployeeId": {
          "description": "Employee id to Get Background Check Detail By EmployeeId",
          "allOf": [
            {
             "$ref": "#/definitions/EmployeeId"
            }
          ]
        }
      }
    },

	"AddBackgroundCheckDetailParameter": {
      "type": "object",
      "required": [
        "APIKey",
        "Action",
        "EmployeeId",
        "TypeOfCheck",
		"DocumentName",
		"File"

      ],
      "properties": {
	  "APIKey": {
          "description": "APIKey for background check api to AddBackgroundCheckDetail",
          "type": "string",
		  "allOf": [
            {
              "$ref": "#/definitions/APIKey"
            }
          ]
        },
        "Action": {
          "description": "Action name = AddBackgroundCheckDetail",
          "allOf": [
            {
              "$ref": "#/definitions/Action"
            }
          ],
		  "example": "AddBackgroundCheckDetail"
        },
        "EmployeeId": {
          "description": "Employee id for Add Background Check Detail",
          "allOf": [
            {
             "$ref": "#/definitions/EmployeeId"
            }
          ]
        },
		 "TypeOfCheck": {
          "description": "Type Of Check for Add Background Check Detail",
          "allOf": [
            {
             "$ref": "#/definitions/TypeOfCheck"
            }
          ]
        },
		 "DateCompleted": {
          "description": "Date Completed for Add Background Check Detail",
          "allOf": [
            {
             "$ref": "#/definitions/DateCompleted"
            }
          ]
        },
		 "ExpiryDate": {
          "description": "Expiry Date for  Add Background Check Detail",
          "allOf": [
            {
             "$ref": "#/definitions/ExpiryDate"
            }
          ]
        },
		 "DocumentName": {
          "description": "Document Name for  Add Background Check Detail",
          "allOf": [
            {
             "$ref": "#/definitions/DocumentName"
            }
          ]
        },
		 "File": {
          "description": "File for Add Background Check Detail",
          "allOf": [
            {
             "$ref": "#/definitions/File"
            }
          ]
        },
		 "Comments": {
          "description": "Comments for Add Background Check Detail",
          "allOf": [
            {
             "$ref": "#/definitions/Comments"
            }
          ],
		   "maxLength": "1024"}


      }
    },

	"UpdateBackgroundCheckDetailParameter": {
      "type": "object",
      "required": [
        "APIKey",
        "Action",
        "EmployeeId",
		"BackgroundCheckTxnId",
        "TypeOfCheck",
		"DocumentName",
		"File"

      ],
      "properties": {
	  "APIKey": {
          "description": "APIKey for background check api to UpdateBackgroundCheckDetail",
          "type": "string",
		  "allOf": [
            {
              "$ref": "#/definitions/APIKey"
            }
          ]
        },
        "Action": {
          "description": "Action name = UpdateBackgroundCheckDetail",
          "allOf": [
            {
              "$ref": "#/definitions/Action"
            }
          ],
		   "example": "UpdateBackgroundCheckDetail"
        },
        "EmployeeId": {
          "description": "Employee id for Update Background Check Detail",
          "allOf": [
            {
             "$ref": "#/definitions/EmployeeId"
            }
          ]
        },
		 "BackgroundCheckTxnId": {
          "description": "Background Check Txn Id  for update background check detail",
          "allOf": [
            {
             "$ref": "#/definitions/BackgroundCheckTxnId"
            }
          ]
        },
		 "TypeOfCheck": {
          "description": "Type Of Check for update background check detail",
          "allOf": [
            {
             "$ref": "#/definitions/TypeOfCheck"
            }
          ]
        },
		 "DateCompleted": {
          "description": "Date Completed for update background check detail",
          "allOf": [
            {
             "$ref": "#/definitions/DateCompleted"
            }
          ]
        },
		 "ExpiryDate": {
          "description": "Expiry Date for update background check detail",
          "allOf": [
            {
             "$ref": "#/definitions/ExpiryDate"
            }
          ]
        },
		 "DocumentName": {
          "description": "Document Name for update background check detail",
          "allOf": [
            {
             "$ref": "#/definitions/DocumentName"
            }
          ]
        },
		 "File": {
          "description": "File for update background check detail",
          "allOf": [
            {
             "$ref": "#/definitions/File"
            }
          ]
        },
		 "Comments": {
          "description": "Comments for update background check detail",
          "allOf": [
            {
             "$ref": "#/definitions/Comments"
            }
          ],
		   "maxLength": "1024"
        }


      }
    },

	"DeleteBackgroundCheckDetailParameter": {
      "type": "object",
      "required": [
        "APIKey",
        "Action",
		"EmployeeId",
		"BackgroundCheckTxnId"
      ],
      "properties": {
	  "APIKey": {
          "description": "APIKey for background check api to  delete background check detail",
          "type": "string",
		  "allOf": [
            {
              "$ref": "#/definitions/APIKey"
            }
          ]
        },
        "Action": {
          "description": "Action name = DeleteBackgroundCheckDetail",
          "allOf": [
            {
              "$ref": "#/definitions/Action"
            }
          ],
		    "example": "DeleteBackgroundCheckDetail"
        },
        "EmployeeId": {
          "description": "Employee id for delete background check detail",
          "allOf": [
            {
             "$ref": "#/definitions/EmployeeId"
            }
          ]
        },
        "BackgroundCheckTxnId": {
          "description": "Background Check Txn Id for delete background check detail",
          "allOf": [
            {
             "$ref": "#/definitions/BackgroundCheckTxnId"
            }
          ]
        }


     }

},

     "getothereventdetailParameter": {
      "type": "object",
      "required": [
        "APIKey",
        "Action",
        "EmployeeId"
      ],
      "properties": {
	  "APIKey": {
          "description": "APIKey for other event api to getothereventdetail",
          "type": "string",
		  "allOf": [
            {
              "$ref": "#/definitions/APIKey"
            }
          ]
        },
        "Action": {
          "description": "Action name = getothereventdetail",
          "allOf": [
            {
              "$ref": "#/definitions/Action"
            }
          ],
		   "example": "getothereventdetail"
        },
        "EmployeeId": {
          "description": "Employee id to get other event detail",
          "allOf": [
            {
             "$ref": "#/definitions/EmployeeId"
            }
          ]
        },
		"StartDate": {
          "description": "Start Date to get other event detail",
          "allOf": [
            {
             "$ref": "#/definitions/StartDate"
            }
          ]
        },
		"EndDate": {
          "description": "End Date to get other event detail",
          "allOf": [
            {
             "$ref": "#/definitions/EndDate"
            }
          ]
        }
      }
    },

	 "getotherevententitlementParameter": {
      "type": "object",
      "required": [
        "APIKey",
        "Action",
        "EmployeeId"
      ],
      "properties": {
	  "APIKey": {
          "description": "APIKey for other event api to getotherevententitlement",
          "type": "string",
		  "allOf": [
            {
              "$ref": "#/definitions/APIKey"
            }
          ]
        },
        "Action": {
          "description": "Action name = getotherevententitlement",
          "allOf": [
            {
              "$ref": "#/definitions/Action"
            }
          ],
		   "example": "getotherevententitlement"
        },
        "EmployeeId": {
          "description": "Employee id to get other event entitlement",
          "allOf": [
            {
             "$ref": "#/definitions/EmployeeId"
            }
          ]
        }


      }
    },

	 "DeleteOtherEventParameter": {
      "type": "object",
      "required": [
        "APIKey",
        "Action",
		"EmployeeId",
		"OtherLeaveTxnId"
      ],
      "properties": {
	  "APIKey": {
          "description": "APIKey for other event api to DeleteOtherEvent",
          "type": "string",
		  "allOf": [
            {
              "$ref": "#/definitions/APIKey"
            }
          ]
        },
        "Action": {
          "description": "Action name = DeleteOtherEvent",
          "allOf": [
            {
              "$ref": "#/definitions/Action"
            }
          ],
		   "example": "DeleteOtherEvent"
        },
        "EmployeeId": {
          "description": "Employee id for Delete Other Event",
          "allOf": [
            {
             "$ref": "#/definitions/EmployeeId"
            }
          ]
        },
        "OtherLeaveTxnId": {
          "description": "Other Leave Txn Id for Delete Other Event",
          "allOf": [
            {
             "$ref": "#/definitions/OtherLeaveTxnId"
            }
          ]
        }


     }

},

	"addothereventleaveParameter": {
      "type": "object",
      "required": [
        "APIKey",
        "Action",
        "EmployeeId",
        "DurationType",
		"Other Event Reason",
		"StartDate",
		"EndDate",
		"DurationInDays"

      ],
      "properties": {
	  "APIKey": {
          "description": "APIKey for other event api to add other event leave",
          "type": "string",
		  "allOf": [
            {
              "$ref": "#/definitions/APIKey"
            }
          ]
        },
        "Action": {
          "description": "Action name = addothereventleave",
          "allOf": [
            {
              "$ref": "#/definitions/Action"
            }
          ],
		   "example": "addothereventleave"
        },
        "EmployeeId": {
          "description": "Employee id for add other event leave",
          "allOf": [
            {
             "$ref": "#/definitions/EmployeeId"
            }
          ]
        },
		 "DurationType": {
          "description": "Duration type for add other event leave",
          "allOf": [
            {
             "$ref": "#/definitions/DurationType"
            }
          ]
        },
		 "Other Event Reason": {
          "description": "Other event reason for add other event leave",
          "allOf": [
            {
             "$ref": "#/definitions/OtherEventReason"
            }
          ]
        },
		 "StartDate": {
          "description": "Start date for add other event leave",
          "allOf": [
            {
             "$ref": "#/definitions/StartDate"
            }
          ]
        },
		 "EndDate": {
          "description": "End date for add other event leave",
          "allOf": [
            {
             "$ref": "#/definitions/EndDate"
            }
          ]
        },
		 "StartTime": {
          "description": "Start time for add other event leave",
          "allOf": [
            {
             "$ref": "#/definitions/StartTime"
            }
          ]
        },
		 "EndTime": {
          "description": "End time for add other event leave",
          "allOf": [
            {
             "$ref": "#/definitions/EndTime"
            }
          ]
        },
		"DurationInDays": {
          "description": "Duration in days for add other event leave",
          "allOf": [
            {
             "$ref": "#/definitions/DurationInDays"
            }
          ]
        },
		"Comments": {
          "description": "Comments for add other event leave",
          "allOf": [
            {
             "$ref": "#/definitions/Comments"
            }
          ],
		    "maxLength": "256"
        },
		"AddFiles": {
          "description": "Add files for add other event leave",
          "allOf": [
            {
             "$ref": "#/definitions/AddFilesForaddothereventleave"
            }
          ]
        }


      }
    },

    "updateothereventleaveParameter": {
      "type": "object",
      "required": [
        "APIKey",
        "Action",
        "EmployeeId",
		"OtherEventTxnId",
        "DurationType",
		"Other Event Reason",
		"StartDate",
		"EndDate",
		"DurationInDays"

      ],
      "properties": {
	  "APIKey": {
          "description": "APIKey for other event api to update other event leave",
          "type": "string",
		  "allOf": [
            {
              "$ref": "#/definitions/APIKey"
            }
          ]
        },
        "Action": {
          "description": "Action name = updateothereventleave",
          "allOf": [
            {
              "$ref": "#/definitions/Action"
            }
          ],
		   "example": "updateothereventleave"
        },
        "EmployeeId": {
          "description": "Employee id for update other event leave",
          "allOf": [
            {
             "$ref": "#/definitions/EmployeeId"
            }
          ]
        },
		 "OtherEventTxnId": {
          "description": "Other event txn Id for update other event leave",
          "allOf": [
            {
             "$ref": "#/definitions/OtherEventTxnId"
            }
          ]
        },
		 "DurationType": {
          "description": "Duration Type for update other event leave",
          "allOf": [
            {
             "$ref": "#/definitions/DurationType"
            }
          ]
        },
		 "Other Event Reason": {
          "description": "Other event reason for update other event leave",
          "allOf": [
            {
             "$ref": "#/definitions/OtherEventReason"
            }
          ]
        },
		 "StartDate": {
          "description": "Start date for update other event leave",
          "allOf": [
            {
             "$ref": "#/definitions/StartDate"
            }
          ]
        },
		 "EndDate": {
          "description": "End date for update other event leave",
          "allOf": [
            {
             "$ref": "#/definitions/EndDate"
            }
          ]
        },
		 "StartTime": {
          "description": "Start Time for update other event leave",
          "allOf": [
            {
             "$ref": "#/definitions/StartTime"
            }
          ]
        },
		 "EndTime": {
          "description": "End time for update other event leave",
          "allOf": [
            {
             "$ref": "#/definitions/EndTime"
            }
          ]
        },
		"DurationInDays": {
          "description": "Duration in days for update other event leave",
          "allOf": [
            {
             "$ref": "#/definitions/DurationInDays"
            }
          ]
        },
		"Comments": {
          "description": "Comments for update other event leave",
          "allOf": [
            {
             "$ref": "#/definitions/Comments"
            }
          ],
		  "maxLength":"256"
        },
		"AddFiles": {
          "description": "Add Files for update other event leave",
          "allOf": [
            {
             "$ref": "#/definitions/AddFilesForupdateothereventleave"
            }
          ]
        }


      }
    },

    "addotherevententitlementParameter": {
      "type": "object",
      "required": [
        "APIKey",
        "Action",
        "EmployeeId",
		"Other Event Reason",
		"Entitlement RecordedIn",
		"ThisYearEntitlement",
		"NextYearEntitlement"

      ],
      "properties": {
	  "APIKey": {
          "description": "APIKey for other event api to addotherevententitlement",
          "type": "string",
		  "allOf": [
            {
              "$ref": "#/definitions/APIKey"
            }
          ]
        },
        "Action": {
          "description": "Action name = addotherevententitlement",
          "allOf": [
            {
              "$ref": "#/definitions/Action"
            }
          ],
		  "example": "addotherevententitlement"
        },
        "EmployeeId": {
          "description": "Employee id for add other event entitlement",
          "allOf": [
            {
             "$ref": "#/definitions/EmployeeId"
            }
          ]
        },
		 "Other Event Reason": {
          "description": "Other event reason for add other event entitlement",
          "allOf": [
            {
             "$ref": "#/definitions/OtherEventReason"
            }
          ]
        },
		"Entitlement RecordedIn": {
          "description": "Entitlement recorded in for add other event entitlement",
          "allOf": [
            {
             "$ref": "#/definitions/EntitlementRecordedIn"
            }
          ]
        },
		"ThisYearEntitlement": {
          "description": "This year entitlement for add other event entitlement",
          "allOf": [
            {
             "$ref": "#/definitions/ThisYearEntitlement"
            }
          ]
        },
		"NextYearEntitlement": {
          "description": "Next year entitlement add other event entitlement",
          "allOf": [
            {
             "$ref": "#/definitions/NextYearEntitlement"
            }
          ]
        }


      }
    },

	"GetDrivingLicenseByEmployeeIdParameter" : {
      "type": "object",
      "required": [
        "APIKey",
        "Action",
        "EmployeeId"],
      "properties": {
	  "APIKey": {
          "description": "APIKey for get driving license by EmployeeId",
          "type": "string",
		  "allOf": [
            {
              "$ref": "#/definitions/APIKey"
            }
          ]
        },
        "Action": {
          "description": "Action name = GetDrivingLicenseByEmployeeId",
          "allOf": [
            {
			  "$ref": "#/definitions/Action"
            }
          ],
		   "example": "GetDrivingLicenseByEmployeeId"
        },
        "EmployeeId": {
          "description": "Employeeid for get driving license by EmployeeId",
          "allOf": [
            {
             "$ref": "#/definitions/EmployeeId"
            }
          ]
        }}
    },
	"GetDrivingLicenseByDrivingIdParameter" : {
      "type": "object",
      "required": [
        "APIKey",
        "Action",
        "EmployeeId",
		"DrivingId"],
      "properties": {
	  "APIKey": {
          "description": "APIKey for get driving license by drivingid",
          "type": "string",
		  "allOf": [
            {
              "$ref": "#/definitions/APIKey"
            }
          ]
        },
        "Action": {
          "description": "Action name = GetDrivingLicenseByDrivingId",
          "allOf": [
            {
			  "$ref": "#/definitions/Action"
            }
          ],
		   "example": "GetDrivingLicenseByDrivingId"
        },
        "EmployeeId": {
          "description": "EmployeeId for get driving license by drivingid",
          "allOf": [
            {
             "$ref": "#/definitions/EmployeeId"
            }
          ]
        },
		 "DrivingId": {
          "description": "Drivingid for get driving license by drivingid",
          "allOf": [
            {
             "$ref": "#/definitions/DrivingId"
            }
          ]
        }}
    },

	"AddNewDrivingLicenseParameter": {
      "type": "object",
      "required": [
        "APIKey",
        "Action",
        "EmployeeId",
		"LicenseNumber"],
      "properties": {
	  "APIKey": {
          "description": "APIKey for add new driving license",
          "type": "string",
		  "allOf": [
            {
			  "$ref": "#/definitions/APIKey"
            }
          ]
        },
        "Action": {
          "description": "Action name = AddNewDrivingLicense",
          "allOf": [
            {
			  "$ref": "#/definitions/Action"
            }
          ],
		   "example": "AddNewDrivingLicense"
        },
        "EmployeeId": {
          "description": "EmployeeId for add new driving license",
          "allOf": [
            {
			 "$ref": "#/definitions/EmployeeId"
            }
          ]
        },
        "LicenseNumber": {
          "description": "License number for add new driving license",
          "allOf": [
            {
			 "$ref": "#/definitions/LicenseNumber"
            }
          ]
        },
		"LicenseType": {
          "description": "License type for add new driving license",
          "allOf": [
            {
			 "$ref": "#/definitions/LicenseType"
            }
          ]
        },
		"ExpiryDate": {
          "description": "Expirydate for add new driving license",
          "allOf": [
            {
			 "$ref": "#/definitions/ExpiryDate"
            }
          ]
        },
		"Comments": {
          "description": "Comments for add new driving license",
          "allOf": [
            {
			 "$ref": "#/definitions/Comments"
            }
          ],
		   "maxLength": "256"
        },
		"CustomColumns": {
          "description": "Custom columns for add new driving license",
          "allOf": [
            {
			 "$ref": "#/definitions/CustomColumnsForEmployeeDriving"
            }
          ]
        },
		"AddFiles": {
          "description": "Add files for add new driving license",
          "allOf": [
            {
			 "$ref": "#/definitions/AddFilesForEmployeeDriving"
            }
          ]
        }}
    },


	"UpdateDrivingLicenseParameter": {
      "type": "object",
      "required": [
        "APIKey",
        "Action",
        "EmployeeId",
		"DrivingId",
		"LicenseNumber"],
      "properties": {
	  "APIKey": {
          "description": "APIKey for update driving license",
          "type": "string",
		  "allOf": [
            {
			  "$ref": "#/definitions/APIKey"
            }
          ]
        },
        "Action": {
          "description": "Action name = UpdateDrivingLicense",
          "allOf": [
            {
			  "$ref": "#/definitions/Action"
            }
          ],
		 "example": "UpdateDrivingLicense"
        },
        "EmployeeId": {
          "description": "EmployeeId for update driving license",
          "allOf": [
            {
			 "$ref": "#/definitions/EmployeeId"
            }
          ]
        },
		"DrivingId": {
          "description": "License number for update driving license",
          "allOf": [
            {
			 "$ref": "#/definitions/DrivingId"
            }
          ]
        },
        "LicenseNumber": {
          "description": "License number for update driving license",
          "allOf": [
            {
			 "$ref": "#/definitions/LicenseNumber"
            }
          ]
        },
		"LicenseType": {
          "description": "License type for update driving license",
          "allOf": [
            {
			 "$ref": "#/definitions/LicenseType"
            }
          ]
        },
		"ExpiryDate": {
          "description": "Expiry date for update driving license",
          "allOf": [
            {
			 "$ref": "#/definitions/ExpiryDate"
            }
          ]
        },
		"Comments": {
          "description": "Comments for update driving license",
          "allOf": [
            {
			 "$ref": "#/definitions/Comments"
            }
          ],
		   "maxLength": "256"
        },
		"CustomColumns": {
          "description": "Custom columns for update driving license",
          "allOf": [
            {
			 "$ref": "#/definitions/CustomColumnsForEmployeeDriving"
            }
          ]
        },
		"AddFiles": {
          "description": "Add files for update driving license",
          "allOf": [
            {
			 "$ref": "#/definitions/AddFilesForEmployeeDriving"
            }
          ]
        }}
    },

	"DeleteDrivingLicenseParameter": {
      "type": "object",
      "required": [
        "APIKey",
        "Action",
        "EmployeeId",
		"DrivingId"],
      "properties": {
	  "APIKey": {
          "description": "APIKey for delete driving license",
          "type": "string",
		  "allOf": [
            {
              "$ref": "#/definitions/APIKey"
            }
          ]
        },
        "Action": {
          "description": "Action name = DeleteDrivingLicense",
          "allOf": [
            {
              "$ref": "#/definitions/Action"
            }
          ],
		  "example": "DeleteDrivingLicense"
        },
        "EmployeeId": {
          "description": "Employeeid for delete driving license",
          "allOf": [
            {
             "$ref": "#/definitions/EmployeeId"
            }
          ]
        },
        "DrivingId": {
          "description": "Drivingid for delete driving license",
          "allOf": [
            {
             "$ref": "#/definitions/DrivingId"
            }
          ]
        }
      }
    },

	"AddTrainingDetailParameter": {
      "type": "object",
      "required": [
        "APIKey",
        "Action",
        "EmployeeId",
		"TrainingType",
		"Description",
		"Importance",
		"Status",
		"Progress"
      ],
      "properties": {
	  "APIKey": {
          "description": "APIKey for add training detail",
          "type": "string",
		  "allOf": [
            {
			  "$ref": "#/definitions/APIKey"
            }
          ]
        },
        "Action": {
          "description": "Action name = AddTrainingDetail",
          "allOf": [
            {
			  "$ref": "#/definitions/Action"
            }
          ],
		  "example": "addtrainingdetail"
        },
        "EmployeeId": {
          "description": "Employee id for add training detail",
          "allOf": [
            {
			 "$ref": "#/definitions/EmployeeId"
            }
          ]
        },
		"TrainingType": {
          "description": "Training type for add training detail",
          "allOf": [
            {
			 "$ref": "#/definitions/TrainingType"
            }
          ]
        },
		"Description": {
          "description": "Description for add training detail",
          "allOf": [
            {
			 "$ref": "#/definitions/Description"
            }
          ],
		  "maxLength":"512"
        },
		"Importance": {
          "description": "Importance for add training detail",
          "allOf": [
            {
			 "$ref": "#/definitions/Importance"
            }
          ]
        },
		"Status": {
          "description": "Status for add training detail",
          "allOf": [
            {
			 "$ref": "#/definitions/Status"
            }
          ]
        },
		"InProgress": {
          "description": "InProgress for add training detail",
          "allOf": [
            {
			 "$ref": "#/definitions/InProgress"
            }
          ]
        },
		"TrainingDate": {
          "description": "Training date for add training detail",
          "allOf": [
            {
			 "$ref": "#/definitions/TrainingDate"
            }
          ]
        },
		"TrainindEndDate": {
          "description": "Training end date for add training detail",
          "allOf": [
            {
			 "$ref": "#/definitions/TrainingEndDate"
            }
          ]
        },
		"TrainingExpiryDate": {
          "description": "Training expiry date for add training detail",
          "allOf": [
            {
			 "$ref": "#/definitions/TrainingExpiryDate"
            }
          ]
        },
		"Cost": {
          "description": "Cost for add training detail",
          "allOf": [
            {
			 "$ref": "#/definitions/Cost"
            }
          ]
        },
		"Provider": {
          "description": "Provider for add training detail",
          "allOf": [
            {
			  "$ref": "#/definitions/Provider"
            }
          ]
        },
		"Notes": {
          "description": "Notes for add training detail",
          "allOf": [
            {
			 "$ref": "#/definitions/Notes"
            }
          ],
		  "maxLength":"256"
        },
		"CustomColumns": {
          "description": "Custom columns for add training detail",
          "allOf": [
            {
			 "$ref": "#/definitions/CustomColumnsForEmployeeTraining"
            }
          ]
        },
		"AddFiles": {
          "description": "Add files for add training detail",
          "allOf": [
            {
			 "$ref": "#/definitions/AddFilesForEmployeeTraining"
            }
          ]
        }}
    },

	"UpdateTrainingDetailParameter": {
      "type": "object",
      "required": [
        "APIKey",
        "Action",
        "EmployeeId",
		"TrainingId",
		"TrainingType",
		"Description",
		"Importance",
		"Status",
		"Progress"
      ],
      "properties": {
	  "APIKey": {
          "description": "APIKey for update training detail",
          "type": "string",
		  "allOf": [
            {
			  "$ref": "#/definitions/APIKey"
            }
          ]
        },
        "Action": {
          "description": "Action name = updatetrainingdetail",
          "allOf": [
            {
			  "$ref": "#/definitions/Action"
            }
          ],
		   "example": "updatetrainingdetail"
        },
        "EmployeeId": {
          "description": "Employee id for update training detail",
          "allOf": [
            {
			 "$ref": "#/definitions/EmployeeId"
            }
          ]
        },
		"TrainingType": {
          "description": "Training type for update training detail",
          "allOf": [
            {
			 "$ref": "#/definitions/TrainingType"
            }
          ]
        },
		"Description": {
          "description": "Description for update training detail",
          "allOf": [
            {
			 "$ref": "#/definitions/Description"
            }
          ],
		  "maxLength":"512"
        },
		"Importance": {
          "description": "Importance for update training detail",
          "allOf": [
            {
			 "$ref": "#/definitions/Importance"
            }
          ]
        },
		"Status": {
          "description": "Status for update training detail",
          "allOf": [
            {
			 "$ref": "#/definitions/Status"
            }
          ]
        },
		"InProgress": {
          "description": "InProgress for update training detail",
          "allOf": [
            {
			 "$ref": "#/definitions/InProgress"
            }
          ]
        },
		"TrainingDate": {
          "description": "Training date for update training detail",
          "allOf": [
            {
			 "$ref": "#/definitions/TrainingDate"
            }
          ]
        },
		"TrainindEndDate": {
          "description": "Training end date for update training detail",
          "allOf": [
            {
			 "$ref": "#/definitions/TrainingEndDate"
            }
          ]
        },
		"TrainingExpiryDate": {
          "description": "Training expiry date for update training detail",
          "allOf": [
            {
			 "$ref": "#/definitions/TrainingExpiryDate"
            }
          ]
        },
		"Cost": {
          "description": "Cost for update training detail",
          "allOf": [
            {
			 "$ref": "#/definitions/Cost"
            }
          ]
        },
		"Provider": {
          "description": "Provider for update training detail",
          "allOf": [
            {
			  "$ref": "#/definitions/Provider"
            }
          ]
        },
		"Notes": {
          "description": "Notes for update training detail",
          "allOf": [
            {
			 "$ref": "#/definitions/Notes"
            }
          ],
		   "maxLength":"256"
        },
		"CustomColumns": {
          "description": "Custom columns for update training detail",
          "allOf": [
            {
			 "$ref": "#/definitions/CustomColumnsForEmployeeTraining"
            }
          ]
        },
		"AddFiles": {
          "description": "Add files for update training detail",
          "allOf": [
            {
			 "$ref": "#/definitions/AddFilesForEmployeeTraining"
            }
          ]
        }}
    },

	"GetTrainingDetailParameter": {
      "type": "object",
      "required": [
        "APIKey",
        "Action",
        "EmployeeId"],
      "properties": {
	  "APIKey": {
          "description": "APIKey for get training detail",
          "type": "string",
		  "allOf": [
            {
              "$ref": "#/definitions/APIKey"
            }
          ]
        },
        "Action": {
          "description": "Action name = GetTrainingDetail",
          "allOf": [
            {
			  "$ref": "#/definitions/Action"
            }
          ],
		  "example": "GetTrainingDetail"
        },
        "EmployeeId": {
          "description": "Employeeid for get training detail",
          "allOf": [
            {
             "$ref": "#/definitions/EmployeeId"
            }
          ]
        }}
    },


	"GetQualificationByQualificationIdParameter": {
      "type": "object",
	   "required": [
        "APIKey",
        "Action",
        "EmployeeId",
		"QualificationId"],
      "properties": {
	  "APIKey": {
          "description": "APIkey for get qualification by qualificationId",
          "type": "string",
		  "allOf": [
            {
			  "$ref": "#/definitions/APIKey"
            }
          ]
        },
        "Action": {
          "description": "Action name = GetQualificationByQualificationId",
          "allOf": [
            {
			  "$ref": "#/definitions/Action"
            }
          ],
		 "example" : "GetQualificationByQualificationId"
        },
        "EmployeeId": {
          "description": "EmployeeId for get qualification by qualificationId",
          "allOf": [
            {
             "$ref": "#/definitions/EmployeeId"
            }
          ]
        },
		"QualificationId": {
          "description": "QualificationId for get qualification by qualificationId",
          "allOf": [
            {
             "$ref": "#/definitions/QualificationId"
            }
          ]
        }}
    },

	"GetQualificationByEmployeeIdParameter": {
      "type": "object",
	   "required": [
        "APIKey",
        "Action",
        "EmployeeId"],
      "properties": {
	  "APIKey": {
          "description": "API key for get qualification by employeeid",
          "type": "string",
		  "allOf": [
            {
			  "$ref": "#/definitions/APIKey"
            }
          ]
        },
        "Action": {
          "description": "Action name = GetQualificationByEmployeeId",
          "allOf": [
            {
			  "$ref": "#/definitions/Action"
            }
          ],
		  "example" : "GetQualificationByEmployeeId"
        },
        "EmployeeId": {
          "description": "Employeeid for get qualification by employeeid",
          "allOf": [
            {
             "$ref": "#/definitions/EmployeeId"
            }
          ]
        }}
    },

	"AddNewVehicleDetailDefinition": {
      "type": "object",
      "required": [
        "APIKey",
        "Action",
        "EmployeeId",
		"Registration"

      ],
      "properties": {
	  "APIKey": {
          "description": "APIKey to add employee's new vehicle detail",
          "type": "string",
		  "allOf": [
            {
              "$ref": "#/definitions/APIKey"
            }
          ]
        },
        "Action": {
          "description": "Action name = AddNewVehicleDetail",
          "allOf": [
            {
              "$ref": "#/definitions/Action"
            }
          ],
		   "example": "AddNewVehicleDetail"
        },
         "EmployeeId": {
          "description": "Employee id to add employee's new vehicle detail",
          "allOf": [
            {
             "$ref": "#/definitions/EmployeeId"
            }
          ]
        },
        "Registration": {
          "description": "Registration to add employee's new vehicle detail",
          "allOf": [
            {
             "$ref": "#/definitions/Registration"
            }
          ],
		  "maxLength": "100"
        },
		 "Make": {
          "description": "Make to add employee's new vehicle detail",
          "allOf": [
            {
             "$ref": "#/definitions/Make"
            }
          ],
		  "maxLength": "100"
        },
		"Model": {
          "description": "Model to add employee's new vehicle detail",
          "allOf": [
            {
             "$ref": "#/definitions/Model"
            }
          ],
		  "maxLength": "100"
        },
		"Colour": {
          "description": "Colour to add employee's new vehicle detail",
          "allOf": [
            {
             "$ref": "#/definitions/Colour"
            }
          ],
		   "maxLength": "50"
        },
		"EngineSize": {
          "description": "EngineSize to add employee's new vehicle detail",
          "allOf": [
            {
             "$ref": "#/definitions/EngineSize"
            }
          ],
		   "maxLength": "50"
        },
		"FuelType": {
          "description": "FuelType to add employee's new vehicle detail",
          "allOf": [
            {
             "$ref": "#/definitions/FuelType"
            }
          ],
		   "maxLength": "50"
        },
		"InsuranceCompany": {
          "description": "InsuranceCompany to add employee's new vehicle detail",
          "allOf": [
            {
             "$ref": "#/definitions/InsuranceCompany"
            }
          ],
		   "maxLength": "100"
        },

		"PolicyNumber": {
          "description": "PolicyNumber to add employee's new vehicle detail",
          "allOf": [
            {
             "$ref": "#/definitions/PolicyNumber"
            }
          ],
		  "maxLength": "100"
        },
		"MOTExpiryDate": {
          "description": "MOTExpiryDate to add employee's new vehicle detail",
          "allOf": [
            {
             "$ref": "#/definitions/MOTExpiryDate"
            }
          ]
        },
		"InsuranceExpiryDate": {
          "description": "InsuranceExpiryDate to add employee's new vehicle detail",
          "allOf": [
            {
             "$ref": "#/definitions/InsuranceExpiryDate"
            }
          ]
        },

		"Comments": {
          "description": "Comments to add employee's new vehicle detail",
          "allOf": [
            {
             "$ref": "#/definitions/Comments"
            }
          ],
		  "maxLength":"256"
        },

		"CustomColumns":{
			"description": "CustomColumns to add employee's new vehicle detail",
          "allOf": [
            {
             "$ref": "#/definitions/CustomColumnsForEmployeeVehicleAddArray"
            }
          ]

		},
		"AddFiles":{
			"description": "AddFiles to add employee's new vehicle detail",
          "allOf": [
            {
             "$ref": "#/definitions/AddFilesForEmployeeVehicleAddArray"
            }
          ]

		}

	  }
	  },

	  "UpdateVehicleDetailDefinition": {
      "type": "object",
      "required": [
        "APIKey",
        "Action",
        "EmployeeId",
		"Registration"

      ],
      "properties": {
	  "APIKey": {
          "description": "APIKey to update employee vehicle detail",
          "type": "string",
		  "allOf": [
            {
              "$ref": "#/definitions/APIKey"
            }
          ]
        },
        "Action": {
          "description": "Action name = UpdateVehicleDetail",
          "allOf": [
            {
              "$ref": "#/definitions/Action"
            }
          ],
		   "example": "UpdateVehicleDetail"
        },
         "EmployeeId": {
          "description": "Employee id to update employee's vehicle detail",
          "allOf": [
            {
             "$ref": "#/definitions/EmployeeId"
            }
          ]
        },
        "Registration": {
          "description": "Registration to update employee's vehicle detail",
          "allOf": [
            {
             "$ref": "#/definitions/Registration"
            }
          ],
		    "maxLength": "100"
        },
		 "Make": {
          "description": "Make to update employee's vehicle detail",
          "allOf": [
            {
             "$ref": "#/definitions/Make"
            }
          ],
		   "maxLength": "100"
        },
		"Model": {
          "description": "Model to update employee's vehicle detail",
          "allOf": [
            {
             "$ref": "#/definitions/Model"
            }
          ],
		   "maxLength": "100"
        },
		"Colour": {
          "description": "Colour to update employee's vehicle detail",
          "allOf": [
            {
             "$ref": "#/definitions/Colour"
            }
          ],
		   "maxLength": "50"
        },
		"EngineSize": {
          "description": "EngineSize to update employee's vehicle detail",
          "allOf": [
            {
             "$ref": "#/definitions/EngineSize"
            }
          ],
		   "maxLength": "50"
        },
		"FuelType": {
          "description": "FuelType to update employee's vehicle detail",
          "allOf": [
            {
             "$ref": "#/definitions/FuelType"
            }
          ],
		   "maxLength": "50"
        },
		"InsuranceCompany": {
          "description": "InsuranceCompany to update employee's vehicle detail",
          "allOf": [
            {
             "$ref": "#/definitions/InsuranceCompany"
            }
          ],
		   "maxLength": "100"
        },

		"PolicyNumber": {
          "description": "PolicyNumber to update employee's vehicle detail",
          "allOf": [
            {
             "$ref": "#/definitions/PolicyNumber"
            }
          ],
		  "maxLength": "100"
        },
		"MOTExpiryDate": {
          "description": "MOTExpiryDate to update employee's vehicle detail",
          "allOf": [
            {
             "$ref": "#/definitions/MOTExpiryDate"
            }
          ]
        },
		"InsuranceExpiryDate": {
          "description": "InsuranceExpiryDate to update employee's vehicle detail",
          "allOf": [
            {
             "$ref": "#/definitions/InsuranceExpiryDate"
            }
          ]
        },

		"Comments": {
          "description": "Comments to update employee's vehicle detail",
          "allOf": [
            {
             "$ref": "#/definitions/Comments"
            }
          ],
		  "maxLength":"256"
        },

		"CustomColumns":{
			"description": "CustomColumns to update employee's vehicle detail",
          "allOf": [
            {
             "$ref": "#/definitions/CustomColumnsForEmployeeVehicleUpdateArray"
            }
          ]

		},
		"AddFiles":{
			"description": "AddFiles to update employee's vehicle detail",
          "allOf": [
            {
             "$ref": "#/definitions/AddFilesForEmployeeVehicleUpdateArray"
            }
          ]

		}

	  }

	  },

	"DeleteVehicleDetailDefinition": {
      "type": "object",
      "required": [
        "APIKey",
        "Action",
        "EmployeeId",
		"VehicleId"

      ],
      "properties": {
	  "APIKey": {
          "description": "APIKey to delete employee vehicle detail",
          "type": "string",
		  "allOf": [
            {
              "$ref": "#/definitions/APIKey"
            }
          ]
        },
        "Action": {
          "description": "Action name = DeleteVehicleDetail",
          "allOf": [
            {
              "$ref": "#/definitions/Action"
            }
          ],
		   "example": "DeleteVehicleDetail"
        },
         "EmployeeId": {
          "description": "Employee id to delete employee's vehicle detail",
          "allOf": [
            {
             "$ref": "#/definitions/EmployeeId"
            }
          ]
        },
        "VehicleId": {
          "description": "Vehicle Id to delete employee's vehicle detail",
          "allOf": [
            {
             "$ref": "#/definitions/VehicleId"
            }
          ]
        }

	  }

	  },
	"GetVehicleDetailByVehicleIdDefinition": {
      "type": "object",
      "required": [
        "APIKey",
        "Action",
        "EmployeeId",
		"VehicleId"

      ],
      "properties": {
	  "APIKey": {
          "description": "APIKey to get employee's vehicle detail by vehicle id",
          "type": "string",
		  "allOf": [
            {
              "$ref": "#/definitions/APIKey"
            }
          ]
        },
        "Action": {
          "description": "Action name = GetByVehicleDetailId",
          "allOf": [
            {
              "$ref": "#/definitions/Action"
            }
          ],
		   "example": "GetByVehicleDetailId"
        },
         "EmployeeId": {
          "description": "Employee id to get employee's vehicle detail",
          "allOf": [
            {
             "$ref": "#/definitions/EmployeeId"
            }
          ]
        },
        "VehicleId": {
          "description": "Vehicle Id to get employee's vehicle detail",
          "allOf": [
            {
             "$ref": "#/definitions/VehicleId"
            }
          ]
        }

	  }

	  },
	"GetVehicleDetailByEmployeeIdDefinition": {
      "type": "object",
      "required": [
        "APIKey",
        "Action",
        "EmployeeId"


      ],
      "properties": {
	  "APIKey": {
          "description": "APIKey to get employee's vehicle detail by employee id",
          "type": "string",
		  "allOf": [
            {
              "$ref": "#/definitions/APIKey"
            }
          ]
        },
        "Action": {
          "description": "Action name = GetVehicleByEmployeeId",
          "allOf": [
            {
              "$ref": "#/definitions/Action"
            }
          ],
		   "example": "GetVehicleByEmployeeId"
        },
         "EmployeeId": {
          "description": "Employee id to get employee's vehicle detail",
          "allOf": [
            {
             "$ref": "#/definitions/EmployeeId"
            }
          ]
        }

	  }

	  },

  "CustomColumnsForGetEmployeeDriving": {
	   "description": " CustomColumns Result Array",
	          "type": "array",
        "items":{
		"type": "object",
        "properties": {
          "ColumnName": {
            "description": "Columnname value",
            "type": "string",
			"example":"Vehicle 1"
          },
          "ColumnValue": {
            "description": "Columnvalue value",
            "type": "string",
			"example":"ABC"
          }}
		}
	},

	 "AddFilesForGetEmployeeDriving":
	{
	   "description": "AddFiles Result Array",
	          "type": "array",
			  "items":{
			  "type":"object",
        "properties": {
          "DocumentName": {
            "description": "Document name value",
            "type": "string",
			"example":"my.txt"
          },
          "FileUrl": {
            "description": "FileUrl value",
            "type": "string",
			"format":"url",
			"example":"http://reportsto.localhost.net:12345/Handlers/MyDocsViewer.ashx?a7897690-633a-46df-aefd-bc4ae479c5b7"
          },
		  "Descriptions": {
            "description": "Descriptions value",
            "type": "string",
			"example":"Descriptions goes here"
          },
		  "DocumentCategory": {
            "description": "Document category value",
            "type": "string",
			"example":"Custom Catagory"
          },
		   "SignatureRequired": {
            "description": "Signature required value",
            "type": "string",
			"format":"boolean",
			"enum": [
					 "false",
					 "true"
				],
			"example":false
          }}
		}
	},


    "InvalidError": {
      "allOf": [
        {
          "$ref": "#/definitions/Error"
        },
        {
          "type": "object",
          "properties": {
            "details": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        }
      ]
    },

	 "ResourceId": {
      "type": "string",
      "description": "Resource Id. Defaults to UUID v4",
      "maxLength": 50,
      "example": "4f6cf35x-2c4y-483z-a0a9-158621f77a21"
    },

    "APIKey": {
      "type": "string",
      "description": "The ApiKey. Defaults to UUID v4",
      "maxLength": 50,
      "example": "5127e153-2c80-492b-a9e4-fb3e50af61a8"
    },
	"ActionId": {
      "type": "string",
      "description": "Action default value",
      "example": "UpdateEmployeeId"
    },
	"Action": {
      "type": "string",
      "description": "Action default value"
    },

	"ActionForGetAllEmployeeDetail": {
      "type": "string",
      "description": "Action default value",
      "example": "GetAllEmployeeDetail"
    },

	 "ReasonForChange": {
      "type": "string",
      "description": "ReasonForChange default value ",
	 "maxLength": 256,
      "example": "Reason for change"
    },
     "OldEmployeeId": {
      "type": "string",
      "description": "Old Employee Id default value ",
      "maxLength": 15,
      "example": "PW1"
    },
	 "NewEmployeeId": {
      "type": "string",
      "description": "New Employee Id default value ",
      "maxLength": 15,
      "example": "PW2"
    },

    "EmailAddress": {
      "type": "string",
      "description": "EmailAddress default value ",
	  "format": "email",
	  "maxLength": 320,
      "example": "ranjit@peoplehr.com"
    },
	 "Password": {
      "type": "string",
      "description": "Password default value ",
	  "format":"password",
	  "maxLength": 88,
      "example": "Password2"
    },

	 "EmployeeId": {
      "type": "string",
      "description": "EmployeeId default value ",
	   "maxLength": 15,
      "example": "PW180"
    },

	  "IncludeLeavers": {
      "type": "boolean",
      "description": "IncludeLeavers Default value ",
      "example": "false",
	  "enum": [
				"false",
				"true"
			  ]},
	 "ReasonforLeaving": {
      "type": "string",
      "description": "ReasonforLeaving default value ",
      "example": "Reason for leaving employee"
    },
	 "AdditionalComments": {
      "type": "string",
      "description": "AdditionalComments default value ",
	  "maxLength": 256,
      "example": "Additional comments"
    },
	"FinalEmploymentDate": {
      "type": "string",
      "description": "FinalEmploymentDate default value ",
	   "format":"date",
      "example": "2014-01-02"
    },
	"FinalWorkingDate": {
      "type": "string",
      "description": "FinalWorkingDate default value ",
      "example": "2014-01-02"
    },
	"MarkasLeaverImmediately": {
      "type": "boolean",
      "description": "MarkasLeaverImmediately default value ",
      "example": "false"
    },
	"ReportsTo": {
      "type": "string",
      "description": "ReportsTo default value ",
	  "format":"email",
	   "maxLength": 256,
      "example": "firstname.lastname@itgurusssoftware.com"
    },
	"ReEmployable": {
      "type": "string",
      "description": "ReEmployable default value ",
      "example": "No"
    },
	"SupportingComments": {
      "type": "string",
      "description": "SupportingComments default value ",
	  "maxLength": 256,
      "example": "xyzfgfdgd"
    },

	"EmployeeImageName": {
      "type": "string",
      "description": "EmployeeImageName default value ",
      "example": "xyz.png"
    },
	"EmployeeImage": {
      "type": "string",
      "description": "EmployeeImage default value ",
      "example": "Pass base64 string"
    },

	"Title": {
      "type": "string",
      "description": "Title default value ",
	  "maxLength": 100,
      "example": "Mr."
    },
	"FirstName": {
      "type": "string",
      "description": "First name default value ",
	  "maxLength": 50,
      "example": "Ranjit"
    },
	"LastName": {
      "type": "string",
      "description": "Last name default value ",
	  "maxLength": 50,
      "example": "Johnson"
    },

	"Email": {
      "type": "string",
	   "format": "email",
      "description": "Email default value ",
	   "maxLength": 254,
      "example": "vaibhavid@itgurussoftware.com"
    },

	"EmailId2": {
      "type": "object",
      "required": [
        "Email"
      ],
      "properties": {
        "Email": {
          "description": "Email",
          "type": "string",
          "format": "email"
        }
      }
    },

	"Gender": {
      "type": "string",
      "description": "Gender default value ",
	   "enum": [
				"Female",
				"Male"
			  ],
      "example": "Female"
    },
	"DateOfBirth": {
      "type": "string",
      "description": "DateOfBirth default value ",
	   "format":"date",
      "example": "1999-01-02"
    },
	"StartDate": {
      "type": "string",
      "description": "StartDate default value ",
	   "format":"date",
      "example": "2016-07-27"
    },
	"EndDate": {
      "type": "string",
      "description": "StartDate default value ",
	   "format":"date",
      "example": "2017-07-27"
    },
	"ReportsToEffectiveDate": {
      "type": "string",
      "description": "ReportsToEffectiveDate default value ",
	   "format":"date",
      "example": "2014-01-01"
    },
	"Company": {
      "type": "string",
      "description": "Company default value ",
	  "maxLength": 100,
      "example": "Company name"
    },
	"CompanyEffectiveDate": {
      "type": "string",
      "description": "CompanyEffectiveDate default value ",
	   "format":"date",
      "example": "2014-01-01"
    },
	"JobRole": {
      "type": "string",
      "description": "JobRole default value ",
	  "maxLength": 100,
      "example": "Software Enginner"
    },
	"JobRoleEffectiveDate": {
      "type": "string",
      "description": "JobRoleEffectiveDate default value ",
	  "format":"date",
      "example": "2014-01-01"
    },
	"Location": {
      "type": "string",
      "description": "Location default value ",
      "example": "Mumbai"
    },
	"LocationEffectiveDate": {
      "type": "string",
      "description": "LocationEffectiveDate default value ",
	   "format":"date",
      "example": "2014-01-01"
    },
	"Department": {
      "type": "string",
      "description": "Department default value ",
      "example": "IT"
    },
	"DepartmentEffectiveDate": {
      "type": "string",
      "description": "DepartmentEffectiveDate default value ",
	   "format":"date",
      "example": "2014-01-01"
    },
	"NationalInsuranceNumber": {
      "type": "string",
      "description": "NationalInsuranceNumber default value ",
	  "maxLength": 30,
      "example": "AAAAAAAAAAAAAAAAAAA"
    },
   "Nationality": {
      "type": "string",
      "description": "Nationality default value ",
	  "maxLength": 100,
      "example": "Indian"
    },
	"EmploymentType": {
      "type": "string",
      "description": "EmploymentType default value ",
	  "maxLength": 100,
      "example": "Full time"
    },

	"EntitlementThisYear": {
      "type": "string",
	  "format":"decimal",
      "description": "Entitlement this year default value ",
	   "example": "12.50"
    },

	"EntitlementNextYear": {
      "type": "string",
	  "format":"decimal",
      "description": "Entitlement next year default value ",
	  "example": "0"
    },

	"EmploymentTypeEffectiveDate": {
      "type": "string",
      "description": "EmploymentTypeEffectiveDate default value ",
	   "format":"date",
      "example": "2014-01-01"
    },
	"Address": {
      "type": "string",
      "description": "Address default value ",
	  "maxLength": "512",
     "example": "Shiv Colony, Thergaon - Pune"
    },
	"PersonalPhoneNumber": {
      "type": "string",
      "description": "PersonalPhoneNumber default value ",
	  "maxLength": 80,
      "example": "999890988772"
    },
	"PayrollCompany": {
      "type": "string",
      "description": "Payroll Company default value ",
	   "maxLength": 200,
      "example": "Your payroll company's name "
    },
	"PayrollID": {
      "type": "string",
      "description": "Payroll ID default value ",
	   "maxLength": 200,
      "example": "Your Payroll ID"
    },
	"Time&AttendanceID": {
      "type": "string",
      "description": "Time & Attendance ID default value ",
	   "maxLength": 200,
      "example": "Your Time & Attendance ID"
    },
	"RotaID": {
      "type": "string",
      "description": "RotaID default value ",
	   "maxLength": 200,
      "example": "Your Rota ID"
    },
	"CRMID": {
      "type": "string",
      "description": "CRM ID default value ",
	   "maxLength": 200,
      "example": "Your CRM ID"
    },
	"ATSID": {
      "type": "string",
      "description": "ATS ID default value ",
	   "maxLength": 200,
      "example": "Your ATS ID"
    },
	"PerformanceID": {
      "type": "string",
      "description": "Performance ID default value ",
	   "maxLength": 200,
      "example": "Your Performance ID"
    },
	"BenefitsID": {
      "type": "string",
      "description": "Benefits ID default value ",
	   "maxLength": 200,
      "example": "Your Benefits ID"
    },
	"System1ID": {
      "type": "string",
      "description": "System1 ID default value ",
	   "maxLength": 200,
      "example": "Your System One ID"
    },
	"System2ID": {
      "type": "string",
      "description": "System2 ID default value ",
	   "maxLength": 200,
      "example": "Your System Two ID"
    },
	"System3ID": {
      "type": "string",
      "description": "System3 ID default value ",
	   "maxLength": 200,
      "example": "Your System Three ID"
    },
	"APIColumn1": {
      "type": "string",
      "description": "APIColumn1 default value ",
      "example": "APIColumn1 Value"
    },
	"APIColumn2": {
      "type": "string",
      "description": "APIColumn2 default value ",
      "example": "APIColumn2 Value"
    },
	"APIColumn3": {
      "type": "string",
      "description": "APIColumn3 default value ",
      "example": "APIColumn3 Value"
    },
	"APIColumn4": {
      "type": "string",
      "description": "APIColumn4 default value ",
      "example": "APIColumn4 Value"
    },
	"APIColumn5": {
      "type": "string",
      "description": "APIColumn5 default value ",
      "example": "APIColumn5 Value"
    },
	"PersonalEmail": {
      "type": "string",
      "description": "PersonalEmail default value ",
	  "format":"email",
	  "maxLength": 254,
      "example": "abc@itgurussoftware.com"
    },
	"MethodOfRecruitment": {
      "type": "string",
      "description": "MethodOfRecruitment default value ",
	  "maxLength": 512,
      "example": "Method Of Recruitment"
    },

	 "DisplayValue": {
      "type": "string",
      "description": "DisplayValue default value "},

	"LeavingDate": {
      "type": "string",
      "description": "LeavingDate default value ",
      "example": "2017-07-07"
    },
	"EmployeeImagePath": {
      "type": "string",
      "description": "Employee Image default value ",
      "example": "don't know please check "
    },

	"DurationType": {
      "type": "string",
      "description": "Duration type default value ",
      "example": "1"
    },

	"DurationInDays": {
      "type": "integer",
	  "format":"decimal",
      "description": "Duration in days default value ",
      "example": "1"
    },
	"DurationInMinutes": {
      "type": "integer",
      "description": "Duration in minutes default value ",
      "example": "450"
    },
	"PartOfDay": {
      "type": "string",
      "description": "Part of day default value ",
	  "enum": [
		   "AM",
		   "PM"
          ],
      "example": "AM"
    },

	  "IsIncludeHistory": {
      "type": "boolean",
      "description": "IsIncludeHistory Default value ",
      "example": "True"
    },

	 "EffectiveFrom": {
      "type": "string",
      "description": "EffectiveFrom default value ",
      "example": "2014-01-01",
	  "format":"date"
    },
	 "SalaryType": {
      "type": "string",
      "description": "SalaryType default value ",
	  "enum":[
	     "Annual",
		 "Hourly",
		 "Daily",
		 "Weekly",
		 "Monthly"
	  ],
	  "example": "Annual"},
	 "PaymentFrequency": {
      "type": "string",
      "description": "PaymentFrequency default value ",
	  "enum":[
	     "Monthly",
		 "Fortnightly",
		 "Weekly",
		 "Four Weekly",
		 "Daily",
		 "Two Weekly"],
      "example": "Monthly"
    },
	 "SalaryAmount": {
      "type": "integer",
      "description": "SalaryAmount default value ",
      "example": "1000"
    },
	"CurrencyCode": {
      "type": "string",
      "description": "CurrencyCode default value ",
	  "maxLength":"100",
      "example": "ASD"
    },
	"ChangeReason": {
      "type": "string",
      "description": "ChangeReason default value ",
	   "maxLength":"100",
      "example": "New Reason1"
    },
	"Comments": {
      "type": "string",
      "description": "Comments default value ",
      "example": "Comments goes here"
    },

	"OldStartDate": {
      "type": "string",
      "description": "Old start date default value ",
	   "format":"date",
      "example": "2017-07-18"
    },
	"OldEndDate": {
      "type": "string",
      "description": "Old end date default value ",
	   "format":"date",
      "example": "2017-07-18"
    },


	"Category":{
	 "type": "string",
      "description": "Category default value ",
	   "maxLength":"100",
	  "example":"Catagory"
	},
	"EmployeeAccess":{
	     "description": "EmployeeAccess default value ",
         "type": "boolean",
		   "enum": [
		    "false",
		   "true"],
		"example":"true"
	},
	"ManagerAccess":{
	    "description": "ManagerAccess default value ",
        "type": "boolean",
		   "enum": [
		    "false",
		   "true"],
		  "example":"true"
	},
	"SignatureRequired":{
	      "description": "SignatureRequired default value ",
          "type": "boolean",
		   "enum": [
		   "false",
		   "true"],
		  "example":"true"
	},
	"DocumentName":{
	    "type": "string",
        "description": "DocumentName value",
	     "maxLength":"100",
         "example": "Abc.txt"
	},
	"Description":{
	     "type": "string",
         "description": "Description value",
		 "maxLength":"256",
         "example":"Description here"
	},
	"File":{
	   "type": "string",
       "description": "File value",
		"example":"Pass base64 string"
	},

	"DocumentId":{
	  "type": "number",
      "description": "DocumentId default value ",
      "example": "1"
	},

	"PartOfDayForUpdateAbsence":{
	  "type": "string",
      "description": "Part of day value ",
	  "enum":[
		       "AM",
		       "PM"
		  ],
      "example": "AM"
	},

	"Reason":{
	   "type": "string",
       "description": "Duration Default value ",
	   "maxLength": "100",
       "example":"Resaon here"
	},
	"PartOfDayForAddAbsence":{
	    "type": "string",
        "description": "Part of day value ",
	    "enum":[
		       "AM",
		       "PM"
		     ],
        "example": "AM"
	},
	"Duration":{
	   "type": "integer",
      "description": "Duration Default value ",
	  "format":"decimal",
      "example": "1.2"
	},
	"AbsencePaidStatus":{
	    "type": "string",
        "description": "AbsencePaidStatus default value ",
        "example": "1"
	},
	"EmergencyLeave":{
	    "description": "Emergency Leave default value ",
        "type": "boolean",
		   "enum": [
		   "false",
		   "true"
          ],
		 "example": "true"
	},


	"TimesheetDate": {
      "type": "string",
	   "format": "date",
      "description": "TimesheetDate default value ",
      "example": "2017-01-01"
    },

	"TimeIn1": {
      "type": "string",
	  "format": "timespan",
      "example": "09:35"

    },
	"TimeIn2": {
      "type": "string",
	  "format": "timespan",
       "description": "TimeIn2 default value",
      "example": "09:45"
    },
	"TimeIn3": {
      "type": "string",
	  "format": "timespan",
      "description": "TimeIn3 default value",
      "example": "09:55"
    },
	"TimeIn4": {
      "type": "string",
	  "format": "timespan",
      "description": "TimeIn4 default value",
      "example": "10:00"
    },
	"TimeIn5": {
      "type": "string",
	  "format": "timespan",
      "description": "TimeIn5 default value",
      "example": "10:10"
    },
	"TimeIn6": {
      "type": "string",
	  "format": "timespan",
      "description": "TimeIn6 default value",
      "example": "10:30"
    },
	"TimeIn7": {
      "type": "string",
	  "format": "timespan",
      "description": "TimeIn7 default value",
      "example": "10:50"
    },
	"TimeIn8": {
      "type": "string",
	  "format": "timespan",
      "description": "TimeIn8 default value",
      "example": "11:10"
    },
	"TimeIn9": {
      "type": "string",
	  "format": "timespan",
      "description": "TimeIn9 default value",
      "example": "11:30"
    },
	"TimeIn10": {
      "type": "string",
	  "format": "timespan",
      "description": "TimeIn10 default value",
      "example": "11:50"
    },
	"TimeIn11": {
      "type": "string",
	  "format": "timespan",
      "description": "TimeIn11 default value",
      "example": "12:00"
    },
	"TimeIn12": {
      "type": "string",
	  "format": "timespan",
      "description": "TimeIn12 default value",
      "example": "12:30"
    },
	"TimeIn13": {
      "type": "string",
	  "format": "timespan",
      "description": "TimeIn13 default value",
      "example": "12:50"
    },
	"TimeIn14": {
      "type": "string",
	  "format": "timespan",
      "description": "TimeIn14 default value",
      "example": "3:00"
    },
	"TimeIn15": {
      "type": "string",
	  "format": "timespan",
      "description": "TimeIn15 default value",
      "example": "03:10"
    },
	"TimeOut1": {
      "type": "string",
	  "format": "timespan",
      "description": "TimeOut1 default value",
      "example": "04:00"
    },
	"TimeOut2": {
      "type": "string",
	  "format": "timespan",
      "description": "TimeOut2 default value",
      "example": "04:10"
    },
	"TimeOut3": {
      "type": "string",
	  "format": "timespan",
      "description": "TimeOut3 default value",
      "example": "04:20"
    },
	"TimeOut4": {
      "type": "string",
	  "format": "timespan",
      "description": "TimeOut4 default value",
      "example": "04:40"
    },
	"TimeOut5": {
      "type": "string",
	  "format": "timespan",
      "description": "TimeOut5 default value",
      "example": "04:50"
    },
	"TimeOut6": {
      "type": "string",
	  "format": "timespan",
      "description": "TimeOut6 default value",
      "example": "05:00"
    },
	"TimeOut7": {
      "type": "string",
	  "format": "timespan",
      "description": "TimeOut7 default value",
      "example": "05:10"
    },
	"TimeOut8": {
      "type": "string",
	  "format": "timespan",
      "description": "TimeOut8 default value",
      "example": "05:20"
    },
	"TimeOut9": {
      "type": "string",
	  "format": "timespan",
      "description": "TimeOut9 default value",
      "example": "05:30"
    },
	"TimeOut10": {
      "type": "string",
	  "format": "timespan",
      "description": "TimeOut10 default value",
      "example": "06:00"
    },
	"TimeOut11": {
      "type": "string",
	  "format": "timespan",
      "description": "TimeOut11 default value",
      "example": "06:10"
    },
	"TimeOut12": {
      "type": "string",
	  "format": "timespan",
      "description": "TimeOut12 default value",
      "example": "06:20"
    },
	"TimeOut13": {
      "type": "string",
	  "format": "timespan",
      "description": "TimeOut13 default value",
      "example": "06:30"
    },
	"TimeOut14": {
      "type": "string",
	  "format": "timespan",
      "description": "TimeOut14 default value",
      "example": "06:50"
    },
	"TimeOut15": {
      "type": "string",
	  "format": "timespan",
      "description": "TimeOut15 default value",
      "example": "7:00"
    },
	"IPAddressTimeIn1ForEmployeeTimesheet": {
      "type": "string",
      "description": "",
      "example": "192.168.0.156"
    },
	"IPAddressTimeIn2ForEmployeeTimesheet": {
      "type": "string",
      "description": "",
      "example": "192.168.0.156"
    },
	"IPAddressTimeIn3ForEmployeeTimesheet": {
      "type": "string",
      "description": "",
      "example": "192.168.0.156"
    },
	"IPAddressTimeIn4ForEmployeeTimesheet": {
      "type": "string",
      "description": "",
      "example": "192.168.0.156"
    },
	"IPAddressTimeIn5ForEmployeeTimesheet": {
      "type": "string",
      "description": "",
      "example": "192.168.0.156"
    },
	"IPAddressTimeIn6ForEmployeeTimesheet": {
      "type": "string",
      "description": "",
      "example": "192.168.0.156"
    },
	"IPAddressTimeIn7ForEmployeeTimesheet": {
      "type": "string",
      "description": "",
      "example": "192.168.0.156"
    },
	"IPAddressTimeIn8ForEmployeeTimesheet": {
      "type": "string",
      "description": "",
      "example": "192.168.0.156"
    },
	"IPAddressTimeIn9ForEmployeeTimesheet": {
      "type": "string",
      "description": "",
      "example": "192.168.0.156"
    },
	"IPAddressTimeIn10ForEmployeeTimesheet": {
      "type": "string",
      "description": "",
      "example": "192.168.0.156"
    },
	"IPAddressTimeIn11ForEmployeeTimesheet": {
      "type": "string",
      "description": "",
      "example": "192.168.0.156"
    },
	"IPAddressTimeIn12ForEmployeeTimesheet": {
      "type": "string",
      "description": "",
      "example": "192.168.0.156"
    },
	"IPAddressTimeIn13ForEmployeeTimesheet": {
      "type": "string",
      "description": "",
      "example": "192.168.0.156"
    },
	"IPAddressTimeIn14ForEmployeeTimesheet": {
      "type": "string",
      "description": "",
      "example": "192.168.0.156"
    },
	"IPAddressTimeIn15ForEmployeeTimesheet": {
      "type": "string",
      "description": "",
      "example": "192.168.0.156"
    },
	"IPAddressTimeOut1ForEmployeeTimesheet": {
      "type": "string",
      "description": "",
      "example": "192.168.0.156"
    },
	"IPAddressTimeOut2ForEmployeeTimesheet": {
      "type": "string",
      "description": "",
      "example": "192.168.0.156"
    },
	"IPAddressTimeOut3ForEmployeeTimesheet": {
      "type": "string",
      "description": "",
      "example": "192.168.0.156"
    },
	"IPAddressTimeOut4ForEmployeeTimesheet": {
      "type": "string",
      "description": "",
      "example": "192.168.0.156"
    },
	"IPAddressTimeOut5ForEmployeeTimesheet": {
      "type": "string",
      "description": "",
      "example": "192.168.0.156"
    },
	"IPAddressTimeOut6ForEmployeeTimesheet": {
      "type": "string",
      "description": "",
      "example": "192.168.0.156"
    },
	"IPAddressTimeOut7ForEmployeeTimesheet": {
      "type": "string",
      "description": "",
      "example": "192.168.0.156"
    },
	"IPAddressTimeOut8ForEmployeeTimesheet": {
      "type": "string",
      "description": "",
      "example": "192.168.0.156"
    },
	"IPAddressTimeOut9ForEmployeeTimesheet": {
      "type": "string",
      "description": "",
      "example": "192.168.0.156"
    },
	"IPAddressTimeOut10ForEmployeeTimesheet": {
      "type": "string",
      "description": "",
      "example": "192.168.0.156"
    },
	"IPAddressTimeOut11ForEmployeeTimesheet": {
      "type": "string",
      "description": "",
      "example": "192.168.0.156"
    },
	"IPAddressTimeOut12ForEmployeeTimesheet": {
      "type": "string",
      "description": "",
      "example": "192.168.0.156"
    },
	"IPAddressTimeOut13ForEmployeeTimesheet": {
      "type": "string",
      "description": "",
      "example": "192.168.0.156"
    },
	"IPAddressTimeOut14ForEmployeeTimesheet": {
      "type": "string",
      "description": "",
      "example": "192.168.0.156"
    },
	"IPAddressTimeOut15ForEmployeeTimesheet": {
      "type": "string",
      "description": "",
      "example": "192.168.0.156"
    },
	"TotalTimeWorkedTodayInMinsForEmployeeTimesheet": {
      "type": "string",
      "description": "",
      "example": "405"
    },
	"TotalTimeWorkedThisWeekInMinsForEmployeeTimesheet": {
      "type": "string",
      "description": "",
      "example": "405"
    },
	"TotalTimeWorkedThisMonthInMinsForEmployeeTimesheet": {
      "type": "string",
      "description": "",
      "example": "405"
    },
	"TimesheetStateForEmployeeTimesheet": {
      "type": "string",
      "description": "",
      "example": "Complete"
    },

	"ChangedDateForEmployeeTimesheet": {
      "type": "string",
	  "format": "date",
      "description": "",
      "example": "2017-07-19"
    },



	"VacancyName": {
      "type": "string",
      "description": "Vacancy name default value ",
	  "maxLength": "512",
      "example": "IT Programmer"
    },
	"VacancyDescription": {
      "type": "string",
      "description": "Title default value ",
	  "example": "IT Programmer"
    },

	"ClosingDate": {
      "type": "string",
	  "format":"date",
      "description": "ClosingDate default value ",
      "example": "2016-07-31"
    },
	"Reference": {
      "type": "string",
      "description": "Reference default value ",
      "example": "VA4"
    },
	"Comment": {
      "type": "string",
      "description": "Comment default value ",
	  "maxLength": 1024,
      "example": "Comment"
    },
	"SalaryRange": {
      "type": "string",
      "description": "SalaryRange default value ",
	  "maxLength": "100",
      "example": "10000"
    },
	"JobDescription": {
      "type": "string",
      "description": "Job description default value ",
	  "example": "Job Description"
    },
	"IsCoverLetterMandatory": {
      "type": "boolean",
      "description": "Is coverLetter mandatory default value ",
	  "example": "false",
	  "enum": [
		   "false",
		   "true"
          ]
    },
	"IsResumeMandatory": {
      "type": "boolean",
      "description": "Is resume mandatory default value ",
	  "example": "false",
	  "enum": [
		   "false",
		   "true"
          ]
    },
	"IsHideSalary": {
      "type": "boolean",
      "description": "Is hide salary default value ",
	  "example": "false",
	  "enum": [
		   "false",
		   "true"
          ]
    },
	"VacancyType": {
      "type": "string",
      "description": "Is hide salary default value ",
	  "example": "Internal",
	  "enum": [
		   "external",
		   "internal",
		   "both"
          ]
    },
	"JobTitle": {
      "type": "string",
      "description": "Job title default value ",
	  "example": "Software Engineer",
	  "maxLength": "512"

    },
	"City": {
      "type": "string",
      "description": "city default value ",
	  "maxLength": "256",
	  "example": "Mumbai"
    },
	"Country": {
      "type": "string",
      "description": "Country default value ",
	  "maxLength": "256",
	  "example": "India"
    },
	"Experience": {
      "type": "string",
      "description": "Experience default value ",
	  "maxLength": "256",
	   "example": "4 Year"
    },

	"VacancyReference": {
      "type": "string",
      "description": "VacancyReference default value ",
	  "maxLength": "100",
	   "example": "VA4"
    },

    "CustomScreenTransactionId": {
      "type": "integer",
	  "description": "Custom Screen Transaction Id",
      "example": "12345"
    },

	"ScreenId": {
      "type": "integer",
	  "description": "Screen Id value",
      "example": "123"
    },

	 "QueryName": {
      "type": "string",
      "description": "QueryName default value ",
	  "example": "Absence"
    },

	 "FieldName": {
      "type": "string",
      "description": "FieldName default value ",
	   "example": "EMPLOYEE_PERSONAL_FIRST_NAME"
    },

    "CustomColumnsForEmployeeCustomScreenObject": {
      "type": "array",
	  "items" :{
	  "type":"object",
	  "required":[
	      "ColumnName",
		  "ColumnValue"
	  ],
      "properties": {
        "ColumnName": {
          "description": "ColumnName for employee custom screen ",
          "type": "string",
		  "maxLength":100,
		  "example":"Column 1 Name"
        },
        "ColumnValue": {
          "description": "ColumnValue for employee custom screen",
          "type": "string",
		  "example":"Abcd"
        }}
	}
	},

	"AddFilesForEmployeeCustomScreenObject": {
      "type": "array",
	  "items" :{
	  "type":"object",
	  "required":[
			  "DocumentName",
			  "File",
			  "DocumentCategory",
			  "SignatureRequired"

	    ],
      "properties": {
        "DocumentName": {
          "description": "DocumentName for employee custom screen",
          "type": "string",
		  "maxLength":100,
		  "example":"123.pdf"
        },
        "File": {
          "description": "File for employee custom screen",
          "type": "string",
		  "example":"Pass base64 string"
        },
		 "Description": {
          "description": "Description for employee custom screen",
          "type": "string",
		  "maxLength":256,
		  "example":"File description"

        },
		 "DocumentCategory": {
          "description": "DocumentCategory for employee custom screen",
          "type": "string",
		  "maxLength":100,
		  "example":"Custom Category"
        },
		"SignatureRequired": {
          "description": "SignatureRequired for employee custom screen",
          "type": "boolean",
		  "format":"boolean",
		  "enum": [
		   "false",
		   "true"
          ],
		  "example":"false"
        }

	 }
	}
	},

	 "Benefit": {
      "type": "string",
      "description": "Benefit default value",
	  "maxLength":"100",
      "example": "Date Awarded"
    },

	"BenefitIdForAddNewBenefit":{
	    "type": "string",
        "description": "Benefit id value",
        "example": "1"
	},
	"BenefitId":{
	    "type": "integer",
        "description": "Benefit id default value",
        "example": "382"
	},
	"DateAwarded":{
	 "type": "string",
      "description": "Date awarded default value",
      "format":"date",
	  "example":"2017-05-05"
	},

	 "ExpiryDate": {
      "type": "string",
	  "format":"date",
      "description": "ExpiryDate default value",
      "example": "2018-07-07"
    },

     "CustomfieldsForGetCustomScreenDetailObject": {
      "type": "array",
	  "items" :{
	  "type":"object",
      "properties": {
        "ColumnName": {
          "description": "ColumnName value",
          "type": "string",
		  "example":"Text Field"
        },
        "ColumnValue": {
          "description": "ColumnValue value",
          "type": "string",
		  "example":"126"
        }


	 }
	}
      },
    "FilesForGetByCustomScreenTransactionIdObject": {
      "type": "array",
	  "items" :{
	  "type":"object",
      "properties": {
        "DocumentName": {
          "description": "DocumentName value",
          "type": "string",
		  "example":"2.pdf"
        },
		 "Description": {
          "description": "Description value",
          "type": "string",
		  "example":"File description"

        },
		"FileUrl": {
          "description": "FileUrl value",
          "type": "string",
		  "format":"url",
		  "example":"http://techinfo.localhost.net:12345/Handlers/MyDocsViewer.ashx?3489f8dc-629f-4830-b1de-fdc0f943596e"

        },
		 "Category": {
          "description": "Document category value",
          "type": "string",
		  "example":"Custom Category"
        },
		"SignatureRequired": {
          "description": "SignatureRequired value",
          "type": "boolean",
		  "format":"boolean",
		  "enum": [
		    "false",
		    "true"

          ],
		  "example":false
        }

	 }
	}
	},
	"Value": {
      "type": "string",
      "description": "Value default value",
	  "format":"decimal",
      "example": "1000.10"
    },

	"RecoverOnTermination":
	{
	  "type": "string",
      "description": "RecoverOnTermination",
	  "enum":[
          "yes",
          "No"
	  ],
      "example": "yes"
	},


	 "EmailFrom": {
      "type": "string",
      "description": "Email From default value ",
	  "format": "email",
	  "maxLength": 254,
      "example": "rajendra.petave@itgurussoftware.com"
    },
	 "EmailToForEmailInbox": {
       "allOf": [
            {
              "$ref": "#/definitions/Result1ForEmailToForEmailInbox"
            }
          ]
    },
	 "EmailCcForEmailInbox": {
       "allOf": [
            {
              "$ref": "#/definitions/Result1ForEmailCcForEmailInbox"
            }
          ]
    },
	"EmailBccForEmailInbox": {
       "allOf": [
            {
              "$ref": "#/definitions/Result1ForEmailBccForEmailInbox"
            }
          ]
    },
	"EmailSubject": {
      "type": "string",
      "description": "Email Subject default value ",
	  "maxLength": 2147483647,
      "example": "[Recipient email address] Email Subject"
    },
	"AttachmentForEmailInbox": {
       "allOf": [
            {
              "$ref": "#/definitions/Result1ForAttachmentForEmailInbox"
            }
          ]
    },
	 "Result1ForEmailToForEmailInbox": {
      "type": "array",
      "items": {
        "type": "object",
         "required": [
        "EmailId"
      ],
        "properties": {
          "EmailId": {
            "description": "Email Id Value",
            "type": "string",
			"format": "email",
			 "maxLength": 254,
			"example":"raj@itgurus.com"
          }

        }
      }
    },
	 "Result1ForEmailCcForEmailInbox": {
      "type": "array",
      "items": {
        "type": "object",
         "required": [
        "EmailId"
      ],
        "properties": {
          "EmailId": {
            "description": "Email Id Value",
            "type": "string",
			"format": "email",
			"maxLength": 254,
			"example":"raj@itgurus.com"
          }

        }
      }
    },
	"Result1ForEmailBccForEmailInbox": {
      "type": "array",
      "items": {
        "type": "object",
         "required": [
        "EmailId"
      ],
        "properties": {
          "EmailId": {
            "description": "Email Id Value",
            "type": "string",
			"format": "email",
			"maxLength": 254,
			"example":"raj@itgurus.com"
          }

        }
      }
    },
	"Result1ForAttachmentForEmailInbox": {
      "type": "array",
      "items": {
        "type": "object",
         "required": [
        "FileName",
		"Size"
      ],
        "properties": {
          "FileName": {
            "description": "File Name Value",
            "type": "string",
			"example":"abc.doc"
          },
		   "Size": {
            "description": "Size Value",
            "type": "string",
			"maxLength": "15MB",
			"example":"15728640"
          }

        }
      }
    },

	 "DocumentType": {
      "type": "string",
      "description": "Document Type default value ",
	  "maxLength": "100",
      "example": "Insurance Period"
    },

	 "ValidFrom": {
      "type": "string",
	  "format":"date",
      "description": "Valid From default value ",
      "example": "2014-04-01"
    },
	 "ValidTo": {
      "type": "string",
	  "format":"date",
      "description": "Valid To default value ",
      "example": "2014-04-01"
    },

	 "RightToWorkTxnId": {
      "type": "integer",
      "description": "RightToWorkTxnId default value",
      "example": "215"
    },

	 "TypeOfCheck": {
      "type": "string",
      "description": "Type Of Check default value ",
	  "maxLength": "100",
      "example": "DBS Enhanced"
    },
	 "DateCompleted": {
      "type": "string",
	  "format":"date",
      "description": "Date Completed default value ",
      "example": "2016-04-15"
    },

	 "BackgroundCheckTxnId": {
      "type": "integer",
      "description": "BackgroundCheckTxnId default value ",
      "example": "1"
    },

	 "OtherLeaveTxnId": {
      "type": "integer",
      "description": "Other Leave Txn Id default value ",
      "example": "1"
    },

	 "OtherEventReason": {
      "type": "string",
      "description": "Other Event Reason default value ",
	  "maxLength": "100",
      "example": "Jury Duty"
    },

	"AddFilesForaddothereventleave": {
      "allOf": [
            {
              "$ref": "#/definitions/Result1Foraddothereventleave"
            }
          ]
    },
	 "Result1Foraddothereventleave": {
      "type": "array",
      "items": {
        "type": "object",
         "required": [
        "DocumentName",
		"File"

      ],
        "properties": {
          "DocumentName": {
            "description": "Document Name Value",
            "type": "string",
			"example":"123.pdf"
          },
		  "File": {
           "description": "File value",
           "type": "string",
            "example":"Pass base64 string"
          },
		   "Descriptions": {
           "description": "Descriptions value",
           "type": "string",
		   "maxLength": 1024,
            "example":"dsadsadasdasd"
          }}
      }
    },

	 "OtherEventTxnId": {
      "type": "integer",
      "description": "OtherEventTxnId default value ",
      "example": "1"
    },

	"AddFilesForupdateothereventleave": {
      "allOf": [
            {
              "$ref": "#/definitions/Result1Forupdateothereventleave"
            }
          ]
    },
	 "Result1Forupdateothereventleave": {
      "type": "array",
      "items": {
        "type": "object",
         "required": [
        "DocumentName",
		"File"

      ],
        "properties": {
          "DocumentName": {
            "description": "Document Name Value",
            "type": "string",
			"example":"123.pdf"
          },
		  "File": {
           "description": "File value",
           "type": "string",
            "example":"Pass base64 string"
          },
		   "Descriptions": {
           "description": "Descriptions value",
           "type": "string",
		    "maxLength": 1024,
            "example":"dsadsadasdasd"
          }}
      }
    },

	 "EntitlementRecordedIn": {
      "type": "integer",
      "description": "Entitlement Recorded In default value ",
      "example": "1"
    },
	 "ThisYearEntitlement": {
      "type": "number",
      "description": "This Year Entitlement default value ",
	  "maxLength": "4",
	   "format":"decimal",
      "example": "0"
    },
	 "NextYearEntitlement": {
      "type": "number",
      "description": "Next Year Entitlement default value ",
	   "maxLength": "4",
	   "format":"decimal",
      "example": "0"
    },

	"WorkPatternId": {
      "type": "integer",
      "description": "Work pattern id default value",
      "example": "2"
    },

	"WorkPatternName": {
      "type": "string",
      "description": "Work pattern name default value",
	  "maxLength":"100",
      "example": "xyz"
    },

	"PostCode": {
      "type": "string",
      "description": "Post code default value",
	  "maxLength":20,
      "example": "413608"
    },

	"PhoneNumber": {
      "type": "string",
      "description": "Phone number default value",
	  "maxLength":"80",
      "example": "8899556885"
    },
	"OtherContactDetails": {
      "type": "string",
      "description": "Other contact details default value",
	  "maxLength":"1024",
      "example": "8899556885"
    },
	"Source": {
      "type": "string",
      "description": "Source default value",
      "example": "Facebook"
    },
	"Skills": {
      "type": "string",
      "description": "Skills default value",
      "example": "C#, Asp.net, JQuery"
    },
	"RecruitmentCost": {
      "type": "integer",
      "description": "Recruitment cost default value",
      "example": "50"
    },
	"DateLastContacted": {
      "type": "string",
	  "format":"date",
      "description": "Date last contacted default value",
      "example": "2016-01-13"
    },
	"ApplicantId": {
      "type": "integer",
      "description": "Applicant id default value",
      "example": "90"
    },

	"LateDate": {
		"type": "string",
		"format":"date",
		"description": "Late Date default value ",
		"example": "2017-07-18"
	},
	"HowLate": {
      "type": "integer",
	  "description": "How late default value ",
	  "example": "10"
	},

	"AppraisalId":{
	    "type":"integer",
		 "description": "Appraisal id  default value",
		 "example":"383"
	},

	 "AppraisalReviewDate": {
      "type": "string",
	  "format":"date",
      "description": "AppraisalReviewDate Default value ",
      "example": "2017-05-01"
    },
	 "Reviewer": {
      "type": "string",
	  "format":"email",
      "description": "Reviewer value ",
      "example": "rajendra.petave@itgurussoftware.com"
    },
	 "Notes": {
       "type":"string",
	   "maxLength":"1024",
	   "example":"notes goes here"},
	 "ActionPlan": {
      "type":"string",
      "maxLength":"1024",
	  "example":"11"
    },
	  "Objectives": {
			"type":"string",
		  "maxLength":"1024",
		   "example":"121"
    },

    "CustomColumnsArrayForAddNewAppraisal":{
	  "type": "array",
	   "items" :{
	   "required":[
	    "ColumnName",
	    "ColumnValue"],
	  "type":"object",
      "properties": {
        "ColumnName": {
          "description": "ColumnName value",
          "type": "string",
		  "example":"123.pdf"
        },
		"ColumnValue": {
          "description": "Column value",
          "type": "string",
		  "example":"asddds"
        }
      }
	  }
	},
	"AddFilesArrayForAddNewAppraisal":{
	 "type": "array",
	  "items" :{
	  "required":[
	    "DocumentName",
		 "File",
		 "DocumentCategory",
		 "SignatureRequired"],
	  "type":"object",
      "properties": {
        "DocumentName": {
          "description": "DocumentName value",
          "type": "string",
		  "example":"123.pdf",
		  "maxLength":"100"
        },
		"File": {
          "description": "File",
          "type": "string",
		  "example":"pass base64 string"
        },
		"Description": {
          "description": "Description value",
          "type": "string",
		  "example":"dsadsadasdasd",
		  "maxLength":"256"
        },
		"DocumentCategory": {
          "description": "Document category value",
          "type": "string",
		  "example":"catagory",
		  "maxLength":"100"
        },
		"SignatureRequired":{
		    "description": "Signature Required value",
            "type": "boolean",
		   "enum": [
		   "false",
		   "true"],
		  "example":"false"
		}
      }
	  }
	},

   "CustomColumnsArrayForUpdateAppraisal":{
	  "type": "array",
	  "items" :{
	  "required":[
	  "ColumnName",
	  "ColumnValue"],
	  "type":"object",
      "properties": {
        "ColumnName": {
          "description": "ColumnName value",
          "type": "string",
		  "example":"123.pdf"
        },
		"ColumnValue": {
          "description": "Column value",
          "type": "string",
		  "example":"adsdsd"
        }}
	  }
	},

   "AddFilesArrayForUpdateAppraisal":{
    "type": "array",
	  "items" :{
	 "required":[
	  "DocumentName",
	  "File",
	  "DocumentCategory",
	  "SignatureRequired"],
	  "type":"object",
      "properties": {
        "DocumentName": {
          "description": "DocumentName value",
          "type": "string",
		  "example":"123.pdf",
		  "maxLength":"100"
        },
		"File": {
          "description": "File",
          "type": "string",
		  "example":"pass base64 string"
        },
		"Description": {
          "description": "Description value",
          "type": "string",
		  "example":"dsadsadasdasd",
		   "maxLength":"256"
        },
		"DocumentCategory": {
		  "type": "string",
          "description": "Document category value",
		  "example":"catagory",
		   "maxLength":"100"
        },
		"SignatureRequired":{
		    "description": "Signature Required value",
            "type": "boolean",
		   "enum": [
		   "false",
		   "true"],
		  "example":"true"
		}
      }
	}
 },

	"DrivingId": {
      "type": "integer",
      "description": "Driving id default value",
      "example": "2"
    },


	"LicenseNumber": {
      "type": "string",
      "description": "License number",
	  "maxLength": 50,
      "example": "Li555"
    },

	"LicenseType": {
      "type": "string",
      "description": "License type",
	   "maxLength": "100",
      "example": "2 wheeler"
    },

	"TrainingType": {
      "type": "string",
      "description": "Training type",
	  "maxLength":"100",
      "example": "Java"
    },

	"Importance": {
      "type": "integer",
      "description": "Importance default value",
      "example": "1"
    },

	"Status": {
      "type": "integer",
      "description": "Status default value",
      "example": "2"
    },

	"InProgress": {
      "type": "string",
      "description": "InProgress default value",
      "example": "10"
    },
	"TrainingDate": {
      "type": "string",
	  "format":"date",
      "description": "Training date default value",
      "example": "2017-10-10"
    },
	"TrainingEndDate": {
      "type": "string",
	  "format":"date",
      "description": "Training end date default value",
      "example": "2015-10-11"
    },
	"TrainingExpiryDate": {
      "type": "string",
	  "format":"date",
      "description": "Training expiry date default value",
      "example": "2015-10-12"
    },
	"Cost": {
      "type": "string",
	  "format":"decimal",
      "description": "Cost default value",
      "example": "0.01"
    },
	"Provider": {
      "type": "string",
      "description": "Provider default value",
	  "maxLength":"256",
      "example": "John"
    },

	"QualificationId": {
      "type": "integer",
      "description": "Qualification id default value",
      "example": "1"
    },

	"Qualification": {
      "type": "string",
      "description": "Qualification",
	  "maxLength":"100",
      "example": "MSC"
    },

	"Subject": {
      "type": "string",
      "description": "Subject",
	  "maxLength":"100",
      "example": "Computer science"
    },

	"DatePassed": {
      "type": "string",
	  "format":"date",
      "description": "Date passed default value",
      "example": "2017-05-01"
    },

	"TrainingId": {
      "type": "integer",
      "description": "Training Id default value",
      "example": "1"
    },

	 "Registration": {
      "type": "string",
      "description": "Registration default value ",
      "example": "RG003"
    },
	 "Make": {
      "type": "string",
      "description": "Make default value ",
	  "example": "ABC"
    },

	"Model": {
      "type": "string",
      "description": "Model default value ",
	  "example": "A123"
    },

	"Colour": {
      "type": "string",
      "description": "Colour default value ",
	  "example": "Black"
    },

	"EngineSize": {
      "type": "string",
      "description": "EngineSize default value ",
	  "example": "A101"
    },
	"FuelType": {
      "type": "string",
      "description": "FuelType default value ",
	  "example": "DF001"
    },
	"InsuranceCompany": {
      "type": "string",
      "description": "InsuranceCompany default value ",
	  "example": "DF001"
    },
	"PolicyNumber": {
      "type": "string",
      "description": "PolicyNumber default value ",
	  "example": "123456A"
    },
	"MOTExpiryDate": {
      "type": "string",
	  "format":"date",
      "description": "MOTExpiryDate default value ",
	  "example": "2017-01-01"
    },
	"InsuranceExpiryDate": {
      "type": "string",
	  "format":"date",
      "description": "InsuranceExpiryDate default value ",
	  "example": "2017-01-01"
    },

	"VehicleId": {
      "type": "integer",
      "description": "VehicleId default value ",
	  "example": 123
    },

	"MaternityPaternityTxnId": {
      "type": "integer",
      "description": "MaternityPaternityTxnId default value ",
	  "example": "339"
    },

	"DueDate":{
	   "type": "string",
	   "format":"date",
      "description": "Due Date default value",
      "example": "2017-05-20"
	},

	"ActualStartDate": {
      "type": "string",
      "description": "Actual start date default value ",
	  "format":"date",
      "example": "2017-05-20"
    },
	"ActualEndDate": {
      "type": "string",
      "description": "Actual end date default value ",
	  "format":"date",
      "example": "2017-05-21"
    },

	"TransactionId": {
      "type": "integer",
      "description": "TransactionId default value ",
	  "example": "1"
    },

	"ProjectTimesheetDate": {
      "type": "string",
      "description": "ProjectTimesheetDate default value ",
	  "format":"date",
	  "example": "2014-01-01"
    },

	"TimesheetProject": {
      "type": "string",
      "description": "TimesheetProject default value ",
	  "maxLength": "100",
	  "example": "Project name goes here"
    },

	"TimesheetTask": {
      "type": "string",
      "description": "TimesheetTask default value ",
	  "maxLength": "100",
	  "example": "Time sheet tasks goes here"
    },

	"TimesheetDetail": {
      "type": "string",
      "description": "TimesheetDetail default value ",
	  "maxLength": "100",
	  "example": "Time sheet details goes here"
    },

	"StartTime": {
      "type": "string",
      "description": "StartTime default value ",
	  "format":"timespan",
	  "example": "02:00"
    },

    "EndTime": {
      "type": "string",
      "description": "EndTime default value ",
	  "format":"timespan",
	  "example": "04:00"
    },

	"TotalHours": {
      "type": "string",
      "description": "TotalHours default value ",
	  "format":"timespan",
	  "example": "02:00"
    },

	"Quantity": {
      "type": "integer",
      "description": "Quantity default value ",
	  "format":"decimal",
	  "example": "0.00"
    },

	"CPDId": {
      "type": "integer",
      "description": "CPDId default value ",
	  "example": "148"
    },

	"Activity": {
      "type": "string",
      "description": "Activity default value ",
	  "maxLength": "100",
      "example": "Activity name"
    },

	"RollNumber": {
      "type": "string",
      "description": "Roll number default value ",
	  "maxLength": "30",
	  "example": "45"
    },

	"DateAdmitted": {
      "type": "string",
      "description": "Date admitted default value ",
	  "format":"date",
      "example": "2017-01-01"
    },

	"HoursRequired": {
      "type": "integer",
      "description": "Hours required default value ",
	  "example": "20"
    },

	"HoursAccredited": {
      "type": "integer",
      "description": "Hours accredited default value ",
	  "example": "21"
    },

	"ProjectName": {
      "type": "string",
      "description": "ProjectName default value ",
	  "maxLength": "100",
	  "example": "Project Name"
    },
	"InUse": {
      "type": "string",
      "description": "InUse default value ",
	  "example": "Yes"
    },
	"NewProjectName": {
      "type": "string",
      "description": "NewProjectName default value ",
	  "maxLength": "100",
	  "example": "updated Project Name"
    },
	"ProjectTaskName": {
      "type": "string",
      "description": "ProjectTaskName default value ",
	  "maxLength": 100,
	  "example": "ABC"
    },
	"New_ProjectTaskName": {
	   "type": "string",
       "description": "New_ProjectTaskName value",
	   "maxLength": 100,
	   "example": "XYZ"
    },
	"ProjectTaskDetailName": {
	  "description": "ProjectTaskDetailName value",
	  "type": "string",
	  "maxLength": 100,
	  "example": "XYZ"
	},
	"New_ProjectTaskDetailName": {
      "type": "string",
      "description": "New ProjectTaskDetailName default value ",
	  "maxLength": "100",
	  "example": "New Project Task Detail Name goes here"
    },

	"CustomColumnsArrayForEmployeeCPD": {
	  "type": "array",

	   "items":
	  {
	  "type":"object",
	   "required": [
        "ColumnName"
       ],
      "properties": {
	  "ColumnName": {
          "description": "ColumnName value",
          "type": "string",
		  "example": "Column_Name"
        },

		"ColumnValue": {
          "description": "ColumnValue value",
          "type": "string",
		  "example": "29153"
        }
	 }
	 }
   },

    "CustomColumnsForGetTrainingDetail":{
	   "description": "GetTrainingDetail Result Array",
	          "type": "array",
		"items":{
		"type": "object",
		"properties": {
          "ColumnName": {
            "description": "ColumnName for get training detail",
            "type": "string",
			"example":"Vehicle 1"
          },
          "ColumnValue": {
            "description": "ColumnValue for get training detail",
            "type": "string",
			"example":"ABC"
          }}
		}
	},

    "AddFilesArrayForEmployeeCPD":	{
	  "type": "array",

	  "items":
	  {
        "type": "object",
		 "required": [
        "DocumentName",
		"File",
		"DocumentCategory",
		"SignatureRequired"
		],
      "properties": {
	  "DocumentName": {
          "description": "DocumentName value",
          "type": "string",
		  "maxLength": 100,
		  "example": "DocumentName.pdf"
        },
	  "File": {
          "description": "File value",
          "type": "string",
		   "maxLength": 50,
		  "example": "Base64 Data"
        },
	  "Description": {
          "description": "Description value",
          "type": "string",
		  "maxLength": 256,
		  "example": "Description goes here"
        },
	  "DocumentCategory": {
          "description": "Document category value",
          "type": "string",
		  "maxLength": 100,
		  "example": "Benefit"
        },
	 "SignatureRequired": {
          "description": "Signature required value",
           "type": "boolean",
			"enum": [
					 "false",
					 "true"
					]
        }
	 }
	 }
   },

	"ResultEmployeeIdId": {
      "description": " Result Array",
      "type": "object",

        "properties": {
          "EmployeeId": {
            "description": "EmployeeId value",
            "type": "string",
			"example":"PW1"
          }
        }
      },

	"EmployeeIdObject": {
      "type": "array",
	  "items" :{
	  "type":"object",
      "properties": {
        "OldValue": {
          "description": "OldValue value",
          "type": "string",
		  "example":"Old value"
        },
        "NewValue": {
          "description": "NewValue value",
          "type": "string",
		  "example":"New value"
        },
		 "ChangedOn": {
          "description": "Changed On value",
          "type": "string",
		  "example":"2017-07-12"
        },
		 "ReasonForChange": {
          "description": "Reason for change",
          "type": "string",
		  "example":"Reason for change"
        }

      }
	  }
    },
    "FieldHistoryForJobRoleObject": {
      "type": "array",
	  "items" :{
	  "type":"object",
      "properties": {
        "JobRole": {
          "description": "Job role value",
          "type": "string",
		  "example":"Software enginner"
        },
        "EffectiveDate": {
          "description": "Effective date value",
          "type": "string",
		  "format":"date",
		  "example":"2015-06-20"
        },
		 "ChangedOn": {
          "description": "Changed On value",
          "type": "string",
		  "format":"date",
		  "example":"2017-07-12"
        },
		 "ReasonForChange": {
          "description": "Reason for change",
          "type": "string",
		  "example":"Reason for change"
        }

      }
	  }
    },
	"FieldHistoryForEffectiveDateObject": {
      "type": "array",
	  "items" :{
	  "type":"object",
      "properties": {
        "FieldData": {
          "description": "Field data value",
          "type": "string",
		  "example":"don't know"
        },
        "EffectiveDate": {
          "description": "Effective date value",
          "type": "string",
		  "format":"date",
		  "example":"2014-07-12"
        },
		 "ChangedOn": {
          "description": "Changed On value",
          "type": "string",
		  "format":"date",
		  "example":"2017-07-12"
        },
		 "ReasonForChange": {
          "description": "Reason for change",
          "type": "string",
		  "example":"Reason for change"
        }

      }
	  }
    },

	"DeductionsArray":{
	 "type": "array",
	  "items" :{
	  "type":"object",
	    "required": [
		"Deduction",
		"DisplayAsAmountOrPercentage",
		"Amount",
		"IncludeInTotalSalary"
      ],
      "properties": {
        "Deduction": {
          "description": "Deduction value",
          "type": "string",
		  "example":"Social Club 1"
        },
		"DisplayAsAmountOrPercentage": {
          "description": "Display as amount or percentage",
          "type": "boolean",
		   "enum": [
		   "false",
		       "true"
          ]
        },
        "Amount": {
          "description": " contact last name",
          "type": "integer",
		  "example":"100"
        },
		 "Percentage": {
          "description": "Percentage",
          "type": "integer",
		  "format":"decimal",
		  "example":"10.00"
        },
		 "Comments": {
          "description": "Comments",
          "type": "string",
		  "maxLength":"512",
		  "example":"Comments for deduction social"
        },
		"IncludeInTotalSalary": {
          "description": "IncludeInTotalSalary",
          "type": "boolean",
		  "enum": [
		    "false",
		       "true"
          ]
        }}
	  }

	},
    "EntitlementsArray":{
	 "type": "array",
	  "items" :{
	  "type":"object",
	   "required": [
		"Entitlement",
		"DisplayAsAmountOrPercentage",
		"Amount",
		"IncludeInTotalSalary"
      ],
      "properties": {

	 "Entitlement": {
          "description": "Entitlement value",
          "type": "string",
		  "maxLength":"100"},
		"DisplayAsAmountOrPercentage": {
          "description": "Display as amount or percentage",
          "type": "boolean",
		   "enum": [
		   "false",
		       "true"
          ]
        },

        "Amount": {
          "description": " contact last name",
          "type": "integer",
		  "example":"100"
        },
		 "Percentage": {
          "description": "Percentage",
          "type": "integer",
		  "format":"decimal",
		  "example":"10.00"
        },
		 "Comments": {
          "description": "Comments",
          "type": "string",
		  "maxLength":"512",
		  "example":"Comments for deduction social"
        },
		"IncludeInTotalSalary": {
          "description": "IncludeInTotalSalary",
          "type": "boolean",
		  "enum": [
		    "false",
		       "true"
          ]
        }}
	  }

	},

	"GetAllDocumentArray":{
	   "description": "The get all document array",
       "type": "array",
       "items": {
        "type": "object",

       "properties": {
          "EmployeeId": {
            "description": " employee id value",
            "type": "integer",
			"example":22956
          },
          "DocumentId": {
            "description": " document id value",
            "type": "number",
			"example":129541
          },
		   "DocumentName": {
            "description": " document name value",
            "type": "string",
			"example":"123.pdf"
          },
		  "URL": {
		    "type": "string",
             "description": " URL value",
             "format":"url",
			 "example":"http://itgpeoplehr.localhost.net:12345/Handlers/MyDocsViewer.ashx?177e5884-af67-44e6-af86-f9d19715b5cf"
          },
		   "Comments": {
            "description": " comments value",
			 "type": "string",
             "example":"dsadsadasdasd"
          },
		   "EmployeeAccess": {
            "description": " employee access value",
            "type": "boolean",
			"enum": [
		   "true",
		   "false"]
          },
		  "ManagerAccess": {
            "description": " manager access value",
            "type": "boolean",
			"enum": [
		   "true",
		   "false"]
          },
          "SignRequired": {
            "description": " SignRequired ",
            "type": "boolean",
			"enum": [
		      "true",
		      "false"]
          },
		 "Category": {
            "description": "Category",
            "type": "string",
            "example":"Absence"
        },
		"AddedOn": {
          "description": "Added On",
          "type":"string",
		  "example":"Mon, 17 Jul 2017"
        }}
      }
	},

	"GetDocumentByIdArray":{
	   "description": "Get document by id document array",
       "type": "array",
       "items": {
        "type": "object",

       "properties": {
          "EmployeeId": {
            "description": " employee id value",
            "type": "integer",
			"example":22956
          },
          "DocumentId": {
            "description": " document id value",
            "type": "integer",
			"example":129556
          },
		   "DocumentName": {
            "description": " document name value",
            "type": "string",
			"example":"bird1.png"
          },
		  "URL": {
		     "type": "string",
             "description": " URL value",
			  "format": "url",
			 "example":"http://itgpeoplehr.localhost.net:12345/Handlers/MyDocsViewer.ashx?d1537b64-55cf-429c-aaa0-1e0223fc2974"
          },
		   "Comments": {
            "description": " comments value",
			 "type": "string",
             "example":"xyz"
          },
		   "EmployeeAccess": {
            "description": " employee access value",
            "type": "boolean",
			"enum": [
		   "false",
		   "true"],
		    "example":"true"
          },
		  "ManagerAccess": {
            "description": " manager access value",
            "type": "boolean",
			"enum": [
		   "false",
		   "true"],
		    "example":"true"
          },
          "SignRequired": {
            "description": " SignRequired ",
            "type": "boolean",
			"enum": [
		      "false",
		      "true"],
		   "example":"true"
          },
		 "Category": {
            "description": "Category",
            "type": "string",
            "example":"Category"
        },
		"AddedOn": {
          "description": "Added On",
          "type":"string",
		  "example":"Tue, 18 Jul 2017"
        }}
      }
	},

	"CommentsArray":{
	     "type": "array",
	  "items" :{
	  "type":"object",
      "properties": {
        "Comments": {
          "description": "Comments",
          "type": "string",
		  "example":"Not feeling well"
        },
        "PostedBy": {
          "description": "Post by",
          "type": "integer",
		  "example":"Vaibhav Desai"
        }}
	  }
	},

	 "AddCommentsArrayForAbsence": {
      "type": "array",
	  "items" :{
	  "type":"object",
      "properties": {
        "Comment": {
          "description": "Comment value",
          "type": "string",
		  "example":"Comment goes here",
		  "maxLength":"1024"
        }}
	  }
    },

	"AddFilesArrayForAbsence": {
      "type": "array",
	  "items" :{
	  "type":"object",
	   "required":[
	     "DocumentName",
		 "File"
	    ],
      "properties": {
        "DocumentName": {
          "description": "DocumentName value",
          "type": "string",
		  "example":"bird1.png"
        },
        "File": {
          "description": "File value",
          "type": "string",
           "example":"pass base64 string"
        },
		  "Description": {
          "description": "Description value",
          "type": "string",
		  "example":"Something write here",
		  "maxLength":"1024"
        }}
	  }
    },

	"CustomColumnsForEmployeeDriving":{

	   "description": " Result Array",
	          "type": "array",
		"items":{
		"type":"object",
		"required": [
          "ColumnName"],
		"properties": {
          "ColumnName": {
            "description": "ColumnName for employee driving",
            "type": "string",
			 "maxLength": 100,
			"example":"Vehicle 1"
          },
          "ColumnValue": {
            "description": "ColumnValue for employee driving",
            "type": "string",
			"example":"ABC"
          }}
		}
	},

  "AddFilesForEmployeeDriving":{

	   "description": " Result Array",
	          "type": "array",

		"items":{
		"type":"object",
		"required": [
          "DocumentName",
          "File",
		  "DocumentCategory",
		  "SignatureRequired"
        ],
       "properties": {
          "DocumentName": {
            "description": "DocumentName for employee driving",
            "type": "string",
			"maxLength": 100,
			"example":"my.txt"
          },
          "File": {
            "description": "File for employee driving",
            "type": "string",
			"example":"Base 64 code"
          },
		  "Descriptions": {
            "description": "Descriptions for employee driving",
            "type": "string",
			"maxLength": 256,
			"example":"Descriptions goes here"
          },
		  "DocumentCategory": {
            "description": "DocumentCategory for employee driving",
            "type": "string",
			"maxLength": 100,
			"example":"Custom Catagory"
          },
		   "SignatureRequired": {
            "description": "SignatureRequired for employee driving",
            "type": "string",
			"format":"boolean",
			"enum": [
              "false",
			  "true"
             ],
			"example":"False"
          }}
		}
	},

	"CustomColumnsForEmployeeTraining":{
	   "description": " Result Array",
	          "type": "array",
			  "items":{
			  "type":"object",
        "required": [
          "ColumnName"],

        "properties": {
          "ColumnName": {
            "description": "ColumnName for employee training",
            "type": "string",
			"maxLength": 100,
			"example":"Vehicle 1"
          },
          "ColumnValue": {
            "description": "ColumnValue for employee training",
            "type": "string",
			"example":"ABC"
          }}
		}
	},

	"AddFilesForEmployeeTraining":{
	   "description": " Result Array",
	    "type": "array",
		"items":
		{
		"type":"object",
        "required": [
          "DocumentName",
          "File",
		  "DocumentCategory",
		  "SignatureRequired"
        ],

        "properties": {
          "DocumentName": {
            "description": "DocumentName for employee training",
            "type": "string",
			"maxLength": 100,
			"example":"my.txt"
          },
          "File": {
            "description": "File for employee training",
            "type": "string",
			"example":"Base 64 code"
          },
		  "Descriptions": {
            "description": "Descriptions for employee training",
            "type": "string",
			"maxLength": 256,
			"example":"Descriptions goes here"
          },
		  "DocumentCategory": {
            "description": "DocumentCategory for employee training",
            "type": "string",
			"maxLength": 100,
			"example":"Custom Catagory"
          },
		   "SignatureRequired": {
            "description": "SignatureRequired for employee training",
            "type": "string",
			"format":"boolean",
			"enum": [
						"false",
						"true"
				],
			"example":"False"
          }}
		}
	},

  "CustomColumnsForGetEmployeeQualification":{
	   "description": " CustomColumns Result Array",
	          "type": "array",
        "items":{
		"type": "object",
        "properties": {
          "ColumnName": {
            "description": "Columnname Value",
            "type": "string",
			"example":"Vehicle 1"
          },
          "ColumnValue": {
            "description": "Columnvalue value",
            "type": "string",
			"example":"ABC"
          }}
		}
	},

	"AddFilesForGetEmployeeQualification":{
	   "description": "AddFiles Result Array",
	          "type": "array",
			  "items":{
			  "type":"object",
        "properties": {
          "DocumentName": {
            "description": "Document name value",
            "type": "string",
			"example":"my.txt"
          },
          "FileUrl": {
            "description": "FileUrl value",
            "type": "string",
			"format":"Url",
			"example":"http://reportsto.localhost.net:12345/Handlers/MyDocsViewer.ashx?a7897690-633a-46df-aefd-bc4ae479c5b7"
          },
		  "Descriptions": {
            "description": "Descriptions value",
            "type": "string",
			"example":"Descriptions goes here"
          },
		  "Category": {
            "description": "Document category value",
            "type": "string",
			"example":"Custom Catagory"
          },
		   "SignatureRequired": {
            "description": "Signature required value",
            "type": "string",
			"format":"boolean",
			"enum": [
					 "false",
					 "true"
				],
			"example":false
          }}
		}
	},

	"CustomColumnsForEmployeeVehicleAddArray":{
	 "type": "array",
	  "items" :{
	  "type":"object",
	   "required":[
	     "ColumnName"
	   ],
      "properties": {
        "ColumnName":  {
          "description": "ColumnName to add employee's new vehicle detail",
          "type": "string",
		  "example":"Demo"
        },
		"ColumnValue": {
          "description": "ColumnValue to add employee's new vehicle detail",
          "type": "string",
		  "example":""
        }

      }
	  }

	},
	"CustomColumnsForEmployeeVehicleUpdateArray":{
	 "type": "array",
	  "items" :{
	  "type":"object",
	   "required":[
	     "ColumnName"
	   ],
      "properties": {
        "ColumnName":  {
          "description": "ColumnName to update employee's new vehicle detail",
          "type": "string",
		  "example":"Demo"
        },
		"ColumnValue": {
          "description": "ColumnValue to update employee's new vehicle detail",
          "type": "string",
		  "example":""
        }

      }
	  }

	},


	"AddFilesForEmployeeVehicleAddArray":{

	  "type": "array",
      "items" :{
	  "type":"object",
	  "required":[
	     "DocumentName",
		 "File",
		 "DocumentCategory",
		 "SignatureRequired"

	   ],
      "properties": {
	  "DocumentName": {
          "description": "DocumentName to add employee's new vehicle detail",
          "type": "string",
		  "example":"my.txt"

        },
        "File": {
          "description": "File to add employee's new vehicle detail",
          "type": "string",
		  "example":"Pass base64 string"
		},
		"Description": {
          "description": "Description to add employee's new vehicle detail",
          "type": "string",
		  "example":"XYZ"
		},
		"DocumentCategory": {
          "description": "DocumentCategory to add employee's new vehicle detail",
		  "type": "string",
		  "example":"XYZ"

		},
		"SignatureRequired": {
          "description": "SignatureRequired to add employee's new vehicle detail",
		  "type": "boolean",
		   "enum": [
		   "false",
		       "true"
          ]

		}
	  }
	  }

	},
	"AddFilesForEmployeeVehicleUpdateArray":{

	  "type": "array",
      "items" :{
	  "type":"object",
	  "required":[
	     "DocumentName",
		 "File",
		 "DocumentCategory",
		 "SignatureRequired"

	   ],
      "properties": {
	  "DocumentName": {
          "description": "DocumentName to update employee's new vehicle detail",
          "type": "string",
		  "example":"my.txt"

        },
        "File": {
          "description": "File to add employee's new vehicle detail",
          "type": "string",
		  "example":"Pass base64 string"
		},
		"Description": {
          "description": "Description to updtae employee's new vehicle detail",
          "type": "string",
		  "example":"XYZ"
		},
		"DocumentCategory": {
          "description": "DocumentCategory to update employee's new vehicle detail",
		  "type": "string",
		  "example":"XYZ"

		},
		"SignatureRequired": {
          "description": "SignatureRequired to update employee's new vehicle detail",
		  "type": "boolean",
		   "enum": [
		   "false",
		       "true"
          ]

		}
	  }
	  }

	},

    "RedirectUrls": {
      "type": "object",
      "description": "The redirect URIs",
      "required": [
        "error",
        "success",
        "decline",
        "cancel"
      ],
      "properties": {
        "error": {
          "type": "string",
          "format": "url"

        },
        "success": {
          "type": "string",
          "format": "url"
        },
        "decline": {
          "type": "string",
          "format": "url"
        },
        "cancel": {
          "type": "string",
          "format": "url"
        }
      }
    },

    "UserPermissions": {
      "type": "array",
      "minItems": 1,
      "items": {
        "type": "object",
        "properties": {
          "resourceName": {
            "type": "string",
            "enum": [
              "UpdateEmployeeId",
			  "CheckAuthentication",
              "api-keys",
              "api-tracking",
              "authentication-tokens",
              "bank-accounts",
              "blacklists",
              "checkout-pages",
              "contacts",
              "coupons",
              "coupons-redemptions",
              "credentials",
              "custom-events",
              "custom-fields",
              "customers",
              "disputes",
              "events",
              "gateway-accounts",
              "invoices",
              "layouts",
              "lead-sources",
              "lists",
              "matched-rules",
              "notes",
              "oct-batch",
              "organizations",
              "password-tokens",
              "payments",
              "payment-cards",
              "payment-cards-migrations",
              "paypal-accounts",
              "plans",
              "reports",
              "reset-sandbox",
              "rulesets",
              "sessions",
              "subscriptions",
              "subscription-tracking",
              "tokens",
              "transactions",
              "users",
              "webhook",
              "webhook-tracking",
              "websites"
            ]
          },
          "methods": {
            "type": "array",
            "minItems": 1,
            "items": {
              "type": "string",
              "enum": [
                "HEAD",
                "GET",
                "POST",
                "PUT",
                "DELETE",
                "PATCH"
              ]
            }
          },
          "resourceIds": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/ResourceId"
            }
          }
        }
      },
      "example": [
        {
          "resourceName": "plans",
          "methods": [
            "GET",
            "POST",
            "PUT",
            "HEAD",
            "DELETE"
          ]
        },
        {
          "resourceName": "invoices",
          "methods": [
            "GET",
            "HEAD"
          ],
          "resourceIds": [
            "4f6cf35x-2c4y-483z-a0a9-158621f77a21",
            "1586f35x-4f6c-483z-a0a9-2c4y21f77a21"
          ]
        },
        {
          "resourceName": null,
          "methods": null,
          "resourceIds": null
        }
      ]
    },

   "GenericRestriction": {
      "description": "All restriction",
      "type": "object",
      "discriminator": "type",
      "properties": {
        "type": {
          "description": "Restriction type",
          "type": "string"
        }
      }
    },

   "ServerTimestamp": {
      "type": "string",
      "description": "Read-only timestamp, automatically assigned on back-end.",
      "format": "date-time",
      "readOnly": true
    },

	"UpdateEmployeeId2": {
      "type": "object",
      "required": [
        "APIKey",
        "Action",
        "ReasonForChange",
        "OldEmployeeId",
        "NewEmployeeId"

      ],
      "properties": {
	  "APIKey": {
          "description": "APIKey for employee api to updateEmployeeId",
          "type": "string",
		  "allOf": [
            {
              "$ref": "#/definitions/APIKey"
            }
          ]
        },
        "Action": {
          "description": "Action name = UpdateEmployeeId",
          "allOf": [
            {
              "$ref": "#/definitions/Action"
            }
          ],
		   "example": "UpdateEmployeeId"
        },
        "ReasonForChange": {
          "description": "Reason for change employee id",
          "allOf": [
            {
             "$ref": "#/definitions/ReasonForChange"
            }
          ]
        },
        "OldEmployeeId": {
          "description": "Old employee id for update employee data",
          "allOf": [
            {
             "$ref": "#/definitions/OldEmployeeId"
            }
          ]
        },
        "NewEmployeeId": {
          "description": "New employee id for update employee data",
          "allOf": [
            {
             "$ref": "#/definitions/NewEmployeeId"
            }
          ]
        }


      }
    },

	"GetAllEmployeeDetailParameter": {
      "type": "object",
      "required": [
        "APIKey",
        "Action",
        "IncludeLeavers"
      ],
      "properties": {
	  "APIKey": {
          "description": "APIKey for GetAllEmployeeDetail",
          "type": "string",
		  "allOf": [
            {
              "$ref": "#/definitions/APIKey"
            }
          ]
        },
        "Action": {
          "description": "Action name = GetAllEmployeeDetail",
          "allOf": [
            {
              "$ref": "#/definitions/Action"
            }
          ],
		  "example": "GetAllEmployeeDetail"
        },
        "IncludeLeavers": {
          "description": "Include leavers for get all employee detail",
          "allOf": [
            {
             "$ref": "#/definitions/IncludeLeavers"
            }
          ]
        }
      }
    },

    "GetEmployeeDetailByIdParameter": {
      "type": "object",
      "required": [
        "APIKey",
        "Action",
        "EmployeeId"
      ],
      "properties": {
	  "APIKey": {
          "description": "APIKey for employee api to GetEmployeeDetailById",
          "type": "string",
		  "allOf": [
            {
              "$ref": "#/definitions/APIKey"
            }
          ]
        },
        "Action": {
          "description": "Action name = GetEmployeeDetailById",
          "allOf": [
            {
              "$ref": "#/definitions/Action"
            }
          ],
		   "example": "GetEmployeeDetailById"
        },
        "EmployeeId": {
          "description": "Employee id to get employee detail",
          "allOf": [
            {
             "$ref": "#/definitions/EmployeeId"
            }
          ]
        }
      }
    },

	"CreateEmployeeDetailParameter": {
      "type": "object",
      "required": [
        "APIKey",
        "Action",
        "EmployeeId",
		"FirstName",
		"LastName",
		"StartDate",
		"JobRole",
		"JobRoleEffectiveDate",
		"Location",
		"Department"
      ],
      "properties": {
	  "APIKey": {
          "description": "APIKey for employee api to createNewEmployee",
          "type": "string",
		  "allOf": [
            {
              "$ref": "#/definitions/APIKey"
            }
          ]
        },
        "Action": {
          "description": "Action name = CreateNewEmployee",
          "allOf": [
            {
              "$ref": "#/definitions/Action"
            }
          ],
		   "example": "CreateNewEmployee"
        },
        "EmployeeId": {
          "description": "Employee id for create new employee",
          "allOf": [
            {
             "$ref": "#/definitions/EmployeeId"
            }
          ]
        },
        "Title": {
          "description": "Title for create new employee",
          "allOf": [
            {
             "$ref": "#/definitions/Title"
            }
          ]
        },
		"FirstName": {
          "description": "FirstName for create new employee",
          "allOf": [
            {
             "$ref": "#/definitions/FirstName"
            }
          ]
        },
		"LastName": {
          "description": "LastName for create new employee",
          "allOf": [
            {
             "$ref": "#/definitions/LastName"
            }
          ]
        },
		"Email": {
          "description": "Email for create new employee",
          "allOf": [
            {
             "$ref": "#/definitions/Email"
            }
          ]
        },
		"Gender": {
          "description": "Gender value for create new employee",
          "allOf": [
            {
             "$ref": "#/definitions/Gender"
            }
          ],
		   "enum": [
		   "Female",
		   "Male"
          ]
        },
		"StartDate": {
          "description": "Start date for create new employee",
          "allOf": [
            {
             "$ref": "#/definitions/StartDate"
            }
          ]
        },
		"DateOfBirth": {
          "description": "Date of birth for create new employee",
          "allOf": [
            {
             "$ref": "#/definitions/DateOfBirth"
            }
          ]
        },

		"ReportsTo": {
          "description": "Reports To for create new employee",
          "allOf": [
            {
             "$ref": "#/definitions/ReportsTo"
            }
          ]
        },
		"JobRole": {
          "description": "Job role for create new employee",
          "allOf": [
            {
             "$ref": "#/definitions/JobRole"
            }
          ]
        },
		"JobRoleEffectiveDate": {
          "description": "Job role effective date for create new employee",
          "allOf": [
            {
             "$ref": "#/definitions/JobRoleEffectiveDate"
            }
          ]
        },
		"Company": {
          "description": "Company name for create new employee",
          "allOf": [
            {
             "$ref": "#/definitions/Company"
            }
          ]
        },

	   "Location": {
          "description": "Location for create new employee",
          "allOf": [
            {
             "$ref": "#/definitions/Location"
            }
          ]
        },
		"Department": {
          "description": "Department for create new employee",
          "allOf": [
            {
             "$ref": "#/definitions/Department"
            }
          ]
        },
		"NationalInsuranceNumber": {
          "description": "National insurance number for create new employee",
          "allOf": [
            {
             "$ref": "#/definitions/NationalInsuranceNumber"
            }
          ]
        },
		"Nationality": {
          "description": "Nationality for create new employee",
          "allOf": [
            {
             "$ref": "#/definitions/Nationality"
            }
          ]
        },
		"EmploymentType": {
          "description": "Employment type for create new employee",
          "allOf": [
            {
             "$ref": "#/definitions/EmploymentType"
            }
          ]
        },
		"EntitlementThisYear": {
          "description": "Entitlement This Year for create new employee",
          "allOf": [
            {
             "$ref": "#/definitions/EntitlementThisYear"
            }
          ]
        },
		"EntitlementNextYear": {
          "description": "Entitlement Next Year for create new employee",
          "allOf": [
            {
             "$ref": "#/definitions/EntitlementNextYear"
            }
          ]
        },
		"Address": {
          "description": "Address for create new employee",
          "allOf": [
            {
             "$ref": "#/definitions/Address"
            }
          ]
        },
		"PersonalPhoneNumber": {
          "description": "PersonalPhoneNumber for create new employee",
          "allOf": [
            {
             "$ref": "#/definitions/PersonalPhoneNumber"
            }
          ]
        },
		"Payroll Company": {
          "description": "Payroll company for create new employee",
          "allOf": [
            {
             "$ref": "#/definitions/PayrollCompany"
            }
          ]
        },
		"Payroll ID": {
          "description": "Payroll id for create new employee",
          "allOf": [
            {
             "$ref": "#/definitions/PayrollID"
            }
          ]
        },
		"Time & Attendance ID": {
          "description": "Time & attendance id for create new employee",
          "allOf": [
            {
             "$ref": "#/definitions/Time&AttendanceID"
            }
          ]
        },
		"Rota ID": {
          "description": "Rota id for create new employee",
          "allOf": [
            {
             "$ref": "#/definitions/RotaID"
            }
          ]
        },
		"CRM ID": {
          "description": "CRM id for create new employee",
          "allOf": [
            {
             "$ref": "#/definitions/CRMID"
            }
          ]
        },
		"ATS ID": {
          "description": "ATS id for create new employee",
          "allOf": [
            {
             "$ref": "#/definitions/ATSID"
            }
          ]
        },
		"Performance ID": {
          "description": "Performance id for create new employee",
          "allOf": [
            {
             "$ref": "#/definitions/PerformanceID"
            }
          ]
        },
		"Benefits ID": {
          "description": "Benefits id for create new employee",
          "allOf": [
            {
             "$ref": "#/definitions/BenefitsID"
            }
          ]
        },
		"System1 ID": {
          "description": "System1 id for create new employee",
          "allOf": [
            {
             "$ref": "#/definitions/System1ID"
            }
          ]
        },
		"System2 ID": {
          "description": "System2 id for create new employee",
          "allOf": [
            {
             "$ref": "#/definitions/System2ID"
            }
          ]
        },
		"System3 ID": {
          "description": "System3 id for create new employee",
          "allOf": [
            {
             "$ref": "#/definitions/System3ID"
            }
          ]
        },
		"APIColumn1": {
          "description": "API column 1 for create new employee",
          "allOf": [
            {
             "$ref": "#/definitions/APIColumn1"
            }
          ],
		  "maxLength": "1000"},
		"APIColumn2": {
          "description": "API column 2 for create new employee",
          "allOf": [
            {
             "$ref": "#/definitions/APIColumn2"
            }
          ],
		   "maxLength": "1000"},
		"APIColumn3": {
          "description": "API column 3 for create new employee",
          "allOf": [
            {
             "$ref": "#/definitions/APIColumn3"
            }
          ],
		   "maxLength": "1000"},
		"APIColumn4": {
          "description": "API column 4 for create new employee",
          "allOf": [
            {
             "$ref": "#/definitions/APIColumn4"
            }
          ],
		   "maxLength": "1000"},
		"APIColumn5": {
          "description": "API column 5 for create new employee",
          "allOf": [
            {
             "$ref": "#/definitions/APIColumn5"
            }
          ],
		   "maxLength": "1000"},
		"PersonalEmail": {
          "description": "Personal email for create new employee",
          "allOf": [
            {
             "$ref": "#/definitions/PersonalEmail"
            }
          ]
        },
		"MethodOfRecruitment": {
          "description": "Method of recruitment for create new employee",
          "allOf": [
            {
             "$ref": "#/definitions/MethodOfRecruitment"
            }
          ]
        }

      }
    },

	"UpdateEmployeeDetail3": {
      "type": "object",
      "required": [
        "APIKey",
        "Action",
        "ReasonForChange",
        "EmployeeId",
		"FirstName",
		"LastName",
		"Gender",
		"StartDate",
		"ReportsToEffectiveDate",
		"CompanyEffectiveDate",
		"JobRole",
		"JobRoleEffectiveDate",
		"Location",
		"LocationEffectiveDate",
		"Department",
		"DepartmentEffectiveDate",
		"EmploymentTypeEffectiveDate"

      ],
      "properties": {
	  "APIKey": {
          "description": "APIKey for employee api to updateEmployeeId",
          "type": "string",
		  "allOf": [
            {
              "$ref": "#/definitions/APIKey"
            }
          ]
        },
        "Action": {
          "description": "Action name = UpdateEmployeeDetail",
          "allOf": [
            {
              "$ref": "#/definitions/Action"
            }
          ],
		   "example": "UpdateEmployeeDetail"
        },
        "ReasonForChange": {
          "description": "Reason for change employee id",
          "allOf": [
            {
             "$ref": "#/definitions/ReasonForChange"
            }
          ]
        },
        "EmployeeId": {
          "description": "Employee id for update employee data",
          "allOf": [
            {
             "$ref": "#/definitions/EmployeeId"
            }
          ]
        },
        "Title": {
          "description": "Title for update employee data",
          "allOf": [
            {
             "$ref": "#/definitions/Title"
            }
          ]
        },
		"FirstName": {
          "description": "FirstName for update employee data",
          "allOf": [
            {
             "$ref": "#/definitions/FirstName"
            }
          ]
        },
		"LastName": {
          "description": "LastName for update employee data",
          "allOf": [
            {
             "$ref": "#/definitions/LastName"
            }
          ]
        },
		"Email": {
          "description": "Email for update employee data",
          "allOf": [
            {
             "$ref": "#/definitions/Email"
            }
          ]
        },
		"Gender": {
          "description": "Gender value for update employee data",
          "allOf": [
            {
             "$ref": "#/definitions/Gender"
            }
          ],
		   "enum": [
		   "Female",
		   "Male"
          ]
        },
		"DateOfBirth": {
          "description": "Date of birth for update employee data",
          "allOf": [
            {
             "$ref": "#/definitions/DateOfBirth"
            }
          ]
        },
		"StartDate": {
          "description": "Start date for update employee data",
          "allOf": [
            {
             "$ref": "#/definitions/StartDate"
            }
          ]
        },
		"ReportsTo": {
          "description": "Reports To for update employee data",
          "allOf": [
            {
             "$ref": "#/definitions/ReportsTo"
            }
          ]
        },
		"ReportsToEffectiveDate": {
          "description": "Reports to effective date for update employee data",
          "allOf": [
            {
             "$ref": "#/definitions/ReportsToEffectiveDate"
            }
          ]
        },
		"Company": {
          "description": "Company name for update employee data",
          "allOf": [
            {
             "$ref": "#/definitions/Company"
            }
          ]
        },
		"CompanyEffectiveDate": {
          "description": "Company effective date for update employee data",
          "allOf": [
            {
             "$ref": "#/definitions/CompanyEffectiveDate"
            }
          ]
        },
		"JobRole": {
          "description": "Job role for update employee data",
          "allOf": [
            {
             "$ref": "#/definitions/JobRole"
            }
          ]
        },
		"JobRoleEffectiveDate": {
          "description": "Job role effective date for update employee data",
          "allOf": [
            {
             "$ref": "#/definitions/JobRoleEffectiveDate"
            }
          ]
        },
	   "Location": {
          "description": "Location for update employee data",
          "allOf": [
            {
             "$ref": "#/definitions/Location"
            }
          ]
        },
		"LocationEffectiveDate": {
          "description": "Location effective date for update employee data",
          "allOf": [
            {
             "$ref": "#/definitions/LocationEffectiveDate"
            }
          ]
        },
		"Department": {
          "description": "Department for update employee data",
          "allOf": [
            {
             "$ref": "#/definitions/Department"
            }
          ]
        },
		"DepartmentEffectiveDate": {
          "description": "Department effective date for update employee data",
          "allOf": [
            {
             "$ref": "#/definitions/DepartmentEffectiveDate"
            }
          ]
        },
		"NationalInsuranceNumber": {
          "description": "National insurance number for update employee data",
          "allOf": [
            {
             "$ref": "#/definitions/NationalInsuranceNumber"
            }
          ]
        },
		"Nationality": {
          "description": "Nationality for update employee data",
          "allOf": [
            {
             "$ref": "#/definitions/Nationality"
            }
          ]
        },
		"EmploymentType": {
          "description": "Employment type for update employee data",
          "allOf": [
            {
             "$ref": "#/definitions/EmploymentType"
            }
          ]
        },
		"EmploymentTypeEffectiveDate": {
          "description": "Employment type effective date for update employee data",
          "allOf": [
            {
             "$ref": "#/definitions/EmploymentTypeEffectiveDate"
            }
          ]
        },
		"Address": {
          "description": "Address for update employee data",
          "allOf": [
            {
             "$ref": "#/definitions/Address"
            }
          ]
        },
		"PersonalPhoneNumber": {
          "description": "PersonalPhoneNumber for update employee data",
          "allOf": [
            {
             "$ref": "#/definitions/PersonalPhoneNumber"
            }
          ]
        },
		"Payroll Company": {
          "description": "Payroll company for update employee data",
          "allOf": [
            {
             "$ref": "#/definitions/PayrollCompany"
            }
          ]
        },
		"Payroll ID": {
          "description": "Payroll id for update employee data",
          "allOf": [
            {
             "$ref": "#/definitions/PayrollID"
            }
          ]
        },
		"Time & Attendance ID": {
          "description": "Time & attendance id for update employee data",
          "allOf": [
            {
             "$ref": "#/definitions/Time&AttendanceID"
            }
          ]
        },
		"Rota ID": {
          "description": "Rota id for update employee data",
          "allOf": [
            {
             "$ref": "#/definitions/RotaID"
            }
          ]
        },
		"CRM ID": {
          "description": "CRM id for update employee data",
          "allOf": [
            {
             "$ref": "#/definitions/CRMID"
            }
          ]
        },
		"ATS ID": {
          "description": "ATS id for update employee data",
          "allOf": [
            {
             "$ref": "#/definitions/ATSID"
            }
          ]
        },
		"Performance ID": {
          "description": "Performance id for update employee data",
          "allOf": [
            {
             "$ref": "#/definitions/PerformanceID"
            }
          ]
        },
		"Benefits ID": {
          "description": "Benefits id for update employee data",
          "allOf": [
            {
             "$ref": "#/definitions/BenefitsID"
            }
          ]
        },
		"System1 ID": {
          "description": "System1 id for update employee data",
          "allOf": [
            {
             "$ref": "#/definitions/System1ID"
            }
          ]
        },
		"System2 ID": {
          "description": "System2 id for update employee data",
          "allOf": [
            {
             "$ref": "#/definitions/System2ID"
            }
          ]
        },
		"System3 ID": {
          "description": "System3 id for update employee data",
          "allOf": [
            {
             "$ref": "#/definitions/System3ID"
            }
          ]
        },
		"APIColumn1": {
          "description": "API column 1 for update employee data",
          "allOf": [
            {
             "$ref": "#/definitions/APIColumn1"
            }
          ],
		  "maxLength": "1000"},
		"APIColumn2": {
          "description": "API column 2 for update employee data",
          "allOf": [
            {
             "$ref": "#/definitions/APIColumn2"
            }
          ],
		   "maxLength": "1000"},
		"APIColumn3": {
          "description": "API column 3 for update employee data",
          "allOf": [
            {
             "$ref": "#/definitions/APIColumn3"
            }
          ],
		   "maxLength": "1000"},
		"APIColumn4": {
          "description": "API column 4 for update employee data",
          "allOf": [
            {
             "$ref": "#/definitions/APIColumn4"
            }
          ],
		   "maxLength": "1000"},
		"APIColumn5": {
          "description": "API column 5 for update employee data",
          "allOf": [
            {
             "$ref": "#/definitions/APIColumn5"
            }
          ],
		   "maxLength": "1000"},
		"PersonalEmail": {
          "description": "Personal email for update employee data",
          "allOf": [
            {
             "$ref": "#/definitions/PersonalEmail"
            }
          ]
        },
		"MethodOfRecruitment": {
          "description": "Method of recruitment for update employee data",
          "allOf": [
            {
             "$ref": "#/definitions/MethodOfRecruitment"
            }
          ]
        }

      }
    },

	"CheckAuthentication2": {
      "type": "object",
      "required": [
        "APIKey",
        "Action",
        "EmailAddress",
        "Password"

      ],
      "properties": {
	  "APIKey": {
          "description": "APIKey for employee api to checkAuthentication",
          "type": "string",
		  "allOf": [
            {
              "$ref": "#/definitions/APIKey"
            }
          ]
        },
        "Action": {
          "description": "Action name = CheckAuthentication",
          "allOf": [
            {
              "$ref": "#/definitions/Action"
            }
          ],
		  "example": "CheckAuthentication"
        },
        "EmailAddress": {
          "description": "Email address of user",
          "allOf": [
            {
             "$ref": "#/definitions/EmailAddress"
            }
          ]
        },
        "Password": {
          "description": "Password of user",
          "allOf": [
            {
             "$ref": "#/definitions/Password"
            }
          ]
        }


      }
    },


	"MarkAsLeaverById2": {
      "type": "object",
      "required": [
        "APIKey",
        "Action",
		"EmployeeId",
        "ReasonforLeaving",
        "FinalEmploymentDate"
      ],
      "properties": {
	  "APIKey": {
          "description": "APIKey for employee api to markAsLeaverById",
          "type": "string",
		  "allOf": [
            {
              "$ref": "#/definitions/APIKey"
            }
          ]
        },
        "Action": {
          "description": "Action name = MarkAsLeaverById",
          "allOf": [
            {
              "$ref": "#/definitions/Action"
            }
          ],
		    "example": "MarkAsLeaverById"
        },
		 "EmployeeId": {
          "description": "Employee id for mark as leaver by id",
          "allOf": [
            {
              "$ref": "#/definitions/EmployeeId"
            }
          ]
        },
        "ReasonforLeaving": {
          "description": "Reason for leaving employee",
          "allOf": [
            {
             "$ref": "#/definitions/ReasonforLeaving"
            }
          ],
		  "maxLength":"100"
        },
        "AdditionalComments": {
          "description": "Additional comments for mark as leaver by id",
          "allOf": [
            {
             "$ref": "#/definitions/AdditionalComments"
            }
          ]
        },

		"FinalEmploymentDate": {
          "description": "Final employment date for mark as leaver by id",
          "allOf": [
            {
             "$ref": "#/definitions/FinalEmploymentDate"
            }
          ]
        },
		"FinalWorkingDate": {
          "description": "Final working date for mark as leaver by id",
          "allOf": [
            {
             "$ref": "#/definitions/FinalWorkingDate"
            }
          ]
        },
		"MarkasLeaverImmediately": {
          "description": "Mark as leaver immediately for mark as leaver by id",
          "allOf": [
            {
             "$ref": "#/definitions/MarkasLeaverImmediately"
            }
          ]
        },
		"ReportsTo": {
          "description": "Reports to for mark as leaver by id",
          "allOf": [
            {
             "$ref": "#/definitions/ReportsTo"
            }
          ]
        },

		"ReEmployable": {
          "description": "Re employable for mark as leaver by id",
          "allOf": [
            {
             "$ref": "#/definitions/ReEmployable"
            }
          ]
        },
        "SupportingComments": {
          "description": "Supporting comments for mark as leaver by id",
          "allOf": [
            {
             "$ref": "#/definitions/SupportingComments"
            }
          ]
        }


      }
    },

	"AddEmployeeImageById2": {
      "type": "object",
      "required": [
        "APIKey",
        "Action",
		"EmployeeId",
        "EmployeeImageName",
        "EmployeeImage"
      ],
      "properties": {
	  "APIKey": {
          "description": "APIKey for employee api to AddEmployeeImage",
          "type": "string",
		  "allOf": [
            {
              "$ref": "#/definitions/APIKey"
            }
          ]
        },
        "Action": {
          "description": "Action name = AddEmployeeImage",
          "allOf": [
            {
              "$ref": "#/definitions/Action"
            }
          ],
		   "example": "AddEmployeeImage"
        },
		 "EmployeeId": {
          "description": "Employee id for add employee image ",
          "allOf": [
            {
              "$ref": "#/definitions/EmployeeId"
            }
          ]
        },
        "EmployeeImageName": {
          "description": "Employee image name for add employee image",
          "allOf": [
            {
             "$ref": "#/definitions/EmployeeImageName"
            }
          ],
		   "enum": [
		   ".jpeg",
		   ".jpg",
            ".png"
          ]
        },
        "EmployeeImage": {
          "description": "Employee image for add employee image",
          "allOf": [
            {
             "$ref": "#/definitions/EmployeeImage"
            }
          ]
        }


      }
    },


	 "AddNewHolidayParameter": {
      "type": "object",
      "required": [
        "APIKey",
        "Action",
        "EmployeeId",
		"DurationType",
		"StartDate",
		"EndDate",
		"DurationInDays",
		"DurationInMinutes"
      ],
      "properties": {
	  "APIKey": {
          "description": "APIKey for employee holiday to AddNewHoliday",
          "type": "string",
		  "allOf": [
            {
              "$ref": "#/definitions/APIKey"
            }
          ]
        },
        "Action": {
          "description": "Action name = AddNewHoliday",
          "allOf": [
            {
              "$ref": "#/definitions/Action"
            }
          ],
		   "example": "AddNewHoliday"
        },
        "EmployeeId": {
          "description": "Employee id for add new holiday",
          "allOf": [
            {
             "$ref": "#/definitions/EmployeeId"
            }
          ]
        },
        "DurationType": {
          "description": "Duration type for add new holiday",
          "allOf": [
            {
             "$ref": "#/definitions/DurationType"
            }
          ]
        },
		"StartDate": {
          "description": "StartDate for add new holiday",
          "allOf": [
            {
             "$ref": "#/definitions/StartDate"
            }
          ]
        },
		"EndDate": {
          "description": "End date for add new holiday",
          "allOf": [
            {
             "$ref": "#/definitions/EndDate"
            }
          ]
        },
		"DurationInDays": {
          "description": "Duration in days for add new holiday",
          "allOf": [
            {
             "$ref": "#/definitions/DurationInDays"
            }
          ]
        },
		"DurationInMinutes": {
          "description": "Duration in minutes for add new holiday",
          "allOf": [
            {
             "$ref": "#/definitions/DurationInMinutes"
            }
          ]
        },
		"PartOfDay": {
          "description": "Part of day for add new holiday",
          "allOf": [
            {
             "$ref": "#/definitions/PartOfDay"
            }
          ]

        },
		"Comments": {
          "description": "Comments for add new holiday",
          "allOf": [
            {
             "$ref": "#/definitions/Comments"
            }
          ],
		  "maxLength":"256"
        }}
    },

	"UpdateHolidayParameter": {
      "type": "object",
      "required": [
        "APIKey",
        "Action",
        "EmployeeId",
		"OldStartDate",
		"OldEndDate",
		"DurationType",
		"StartDate",
		"EndDate",
		"DurationInDays",
		"DurationInMinutes"
      ],
      "properties": {
	  "APIKey": {
          "description": "APIKey for UpdateHoliday",
          "type": "string",
		  "allOf": [
            {
              "$ref": "#/definitions/APIKey"
            }
          ]
        },
        "Action": {
          "description": "Action name = UpdateHoliday",
          "allOf": [
            {
              "$ref": "#/definitions/Action"
            }
          ],
		   "example": "UpdateHoliday"
        },
        "EmployeeId": {
          "description": "Employee id for update holiday",
          "allOf": [
            {
             "$ref": "#/definitions/EmployeeId"
            }
          ]
        },
		"OldStartDate": {
          "description": "OldStartDate for update holiday",
          "allOf": [
            {
             "$ref": "#/definitions/OldStartDate"
            }
          ]
        },
		"OldEndDate": {
          "description": "OldEndDate for update holiday",
          "allOf": [
            {
             "$ref": "#/definitions/OldEndDate"
            }
          ]
        },
        "DurationType": {
          "description": "Duration type for update holiday",
          "allOf": [
            {
             "$ref": "#/definitions/DurationType"
            }
          ]
        },
		"StartDate": {
          "description": "StartDate for update holiday",
          "allOf": [
            {
             "$ref": "#/definitions/StartDate"
            }
          ]
        },
		"EndDate": {
          "description": "End date for update holiday",
          "allOf": [
            {
             "$ref": "#/definitions/EndDate"
            }
          ]
        },
		"DurationInDays": {
          "description": "Duration in days for update holiday",
          "allOf": [
            {
             "$ref": "#/definitions/DurationInDays"
            }
          ]
        },
		"DurationInMinutes": {
          "description": "Duration in minutes for update holiday",
          "allOf": [
            {
             "$ref": "#/definitions/DurationInMinutes"
            }
          ]
        },
		"PartOfDay": {
          "description": "Part of day for update holiday",
          "allOf": [
            {
             "$ref": "#/definitions/PartOfDay"
            }
          ]
        },
		"Comments": {
          "description": "Comments for update holiday",
          "allOf": [
            {
             "$ref": "#/definitions/Comments"
            }
          ],
		   "maxLength":"256"
        }}
    },

	"GetHolidayDetailParameter": {
      "type": "object",
      "required": [
        "APIKey",
        "Action",
        "EmployeeId"
      ],
      "properties": {
	  "APIKey": {
          "description": "APIKey for GetHolidayDetail",
          "type": "string",
		  "allOf": [
            {
              "$ref": "#/definitions/APIKey"
            }
          ]
        },
        "Action": {
          "description": "Action name = GetHolidayDetail",
          "allOf": [
            {
              "$ref": "#/definitions/Action"
            }
          ],
		   "example": "GetHolidayDetail"
        },
        "EmployeeId": {
          "description": "Employee id for get holiday detail",
          "allOf": [
            {
             "$ref": "#/definitions/EmployeeId"
            }
          ]
        },
		"StartDate": {
          "description": "StartDate for get holiday detail",
          "allOf": [
            {
             "$ref": "#/definitions/StartDate"
            }
          ]
        },
		"EndDate": {
          "description": "End date for get holiday detail",
          "allOf": [
            {
             "$ref": "#/definitions/EndDate"
            }
          ]
        }


      }
    },

	 "DeleteHolidayParameter": {
      "type": "object",
      "required": [
        "APIKey",
        "Action",
		"EmployeeId",
		"StartDate",
		"EndDate"
  		      ],
      "properties": {
	    "APIKey": {
          "description": "APIKey for DeleteHoliday",
          "type": "string",
		  "allOf": [
            {
              "$ref": "#/definitions/APIKey"
            }
          ]
        },
        "Action": {
          "description": "Action name = DeleteHoliday",
          "allOf": [
            {
              "$ref": "#/definitions/Action"
            }
          ],
		   "example": "DeleteHoliday"
        },
        "EmployeeId": {
          "description": "Employee Id for delete holiday",
          "allOf": [
            {
             "$ref": "#/definitions/EmployeeId"
            }
          ]
        },
	    "StartDate": {
          "description": "Start date for delete holiday",
          "allOf": [
            {
             "$ref": "#/definitions/StartDate"
            }
          ]
        },
		"EndDate": {
          "description": "End date for delete holiday",
          "allOf": [
            {
             "$ref": "#/definitions/EndDate"
            }
          ]
        }}
    },


  "GetAbsenceDetailParameter": {

      "type": "object",
      "required": [
        "APIKey",
        "Action",
        "EmployeeId",
        "StartDate",
		"EndDate"],
      "properties": {
	  "APIKey": {
          "description": "APIKey for employee api to GetAbsenceDetail",
          "type": "string",
		  "allOf": [
            {
              "$ref": "#/definitions/APIKey"
            }
          ]
        },
        "Action": {
          "description": "Action name = GetAbsenceDetail",
          "allOf": [
            {
              "$ref": "#/definitions/Action"
            }
          ],
		    "example": "GetAbsenceDetail"
        },
        "EmployeeId": {
          "description": " Employee id for get absence detail",
          "allOf": [
            {
             "$ref": "#/definitions/EmployeeId"
            }
          ]
        },
        "StartDate": {
          "description": "Start date for get absence detail",
          "allOf": [
            {
             "$ref": "#/definitions/StartDate"
            }
          ]
        },
       "EndDate": {
          "description": "End Date for get absence detail ",
          "allOf": [
            {
             "$ref": "#/definitions/EndDate"
            }
          ]
        }
      }
    },

  "DeleteAbsenceOfEmployeeParameter": {
      "type": "object",
      "required": [
        "APIKey",
        "Action",
        "EmployeeId",
		"StartDate",
		"EndDate"],
      "properties": {
	  "APIKey": {
          "description": "APIKey for employee api to delete absence",
          "type": "string",
		  "allOf": [
            {
              "$ref": "#/definitions/APIKey"
            }
          ]
        },
        "Action": {
          "description": "Action name = DeleteAbsence",
          "allOf": [
            {
              "$ref": "#/definitions/Action"
            }
          ],
		    "example": "DeleteAbsence"
        },
        "EmployeeId": {
          "description": "Employee Id for delete absence",
          "allOf": [
            {
             "$ref": "#/definitions/EmployeeId"
            }
          ]
        },
		 "StartDate": {
          "description": "StartDate for delete absence",
          "allOf": [
            {
             "$ref": "#/definitions/StartDate"
            }
          ]
        },
		 "EndDate": {
          "description": "EndDate for delete absence",
          "allOf": [
            {
             "$ref": "#/definitions/EndDate"
            }
          ]
        }}
    },

   "UpdateAbsenceDetailParameter":{
	   "type": "object",
        "required": [
        "APIKey",
        "Action",
        "EmployeeId",
		"OldStartDate",
		"OldEndDate",
		"DurationType",
		"Reason",
		"StartDate",
		"EndDate",
		"Duration",
		"AbsencePaidStatus",
		"EmergencyLeave"
      ],
	"properties": {
	  "APIKey": {
          "description": "APIKey for employee api to UpdateAbsence",
          "type": "string",
		  "allOf": [
            {
              "$ref": "#/definitions/APIKey"
            }
          ]
        },
        "Action": {
          "description": "Action name = UpdateAbsence",
          "allOf": [
            {
              "$ref": "#/definitions/Action"
            }
          ],
		   "example": "UpdateAbsence"
        },
        "EmployeeId": {
          "description": "Employee Id for update absence",
          "allOf": [
            {
             "$ref": "#/definitions/EmployeeId"
            }
          ]
        },
		 "OldStartDate": {
          "description": "OldStartDate for update absence",
          "allOf": [
            {
             "$ref": "#/definitions/OldStartDate"
            }
          ]
        },
		 "OldEndDate": {
          "description": "Old End Date for update absence",
          "allOf": [
            {
             "$ref": "#/definitions/OldEndDate"
            }
          ]
        },

		 "DurationType": {
          "description": "DurationType for update absence",
          "allOf": [
            {
             "$ref": "#/definitions/DurationType"
            }
          ]
        },
		 "Reason": {
          "description": "Reason For update absence of user",
          "allOf": [
            {
             "$ref": "#/definitions/Reason"
            }
          ]
        },
		 "StartDate": {
          "description": "Start Date for update absence",
          "allOf": [
            {
             "$ref": "#/definitions/StartDate"
            }
          ]
        },
		 "EndDate": {
          "description": "End Date for update absence",
          "allOf": [
            {
             "$ref": "#/definitions/EndDate"
            }
          ]
        },
		"PartOfDay": {
          "description": "PartOfDay for update absence",
          "allOf": [
            {
             "$ref": "#/definitions/PartOfDayForUpdateAbsence"
            }
          ]
        },
		"Duration": {
          "description": "Duration for update absence",
          "allOf": [
            {
             "$ref": "#/definitions/Duration"
            }
          ]
        },
		"AbsencePaidStatus": {
          "description": "AbsencePaidStatus for update absence",
          "allOf": [
            {
             "$ref": "#/definitions/AbsencePaidStatus"
            }
          ]
        },
		"EmergencyLeave": {
          "description": "EmergencyLeave for update absence",
          "allOf": [
            {
             "$ref": "#/definitions/EmergencyLeave"
            }
          ]
        },
		"AddComments": {
           "description": "AddComments array list",
          "allOf": [
            {
              "$ref": "#/definitions/AddCommentsArrayForAbsence"
            }
          ]
        },
      		"AddFiles": {
           "description": "AddFiles array list",
          "allOf": [
            {
              "$ref": "#/definitions/AddFilesArrayForAbsence"
            }
          ]
        }}

	},

	 "AddAbsenceOfEmployeeParameter":{
	 "type": "object",
      "required": [
        "APIKey",
        "Action",
        "EmployeeId",
		"DurationType",
		"Reason",
		"StartDate",
		"EndDate",
        "PartOfDay",
		"Duration",
		"AbsencePaidStatus",
		"EmergencyLeave"
      ],
	"properties": {
	  "APIKey": {
          "description": "APIKey for employee api to checkAuthentication",
          "type": "string",
		  "allOf": [
            {
              "$ref": "#/definitions/APIKey"
            }
          ]
        },
        "Action": {
          "description": "Action name = AddNewAbsence",
          "allOf": [
            {
              "$ref": "#/definitions/Action"
            }
          ],
		   "example": "AddNewAbsence"
        },
        "EmployeeId": {
          "description": "Employee Id for add new absence",
          "allOf": [
            {
             "$ref": "#/definitions/EmployeeId"
            }
          ]
        },
		 "DurationType": {
          "description": "DurationType of user",
          "allOf": [
            {
             "$ref": "#/definitions/DurationType"
            }
          ]
        },
		 "Reason": {
          "description": "Reason for add new absence",
          "allOf": [
            {
             "$ref": "#/definitions/Reason"
            }
          ]
        },
		 "StartDate": {
          "description": "Start date for add new absence",
          "allOf": [
            {
             "$ref": "#/definitions/StartDate"
            }
          ]
        },
		 "EndDate": {
          "description": "EndDate for add new absence",
          "allOf": [
            {
             "$ref": "#/definitions/EndDate"
            }
          ]
        },
		"PartOfDay": {
          "description": "PartOfDay for add new absence",
          "allOf": [
            {
             "$ref": "#/definitions/PartOfDay"
            }
          ]
        },
		"Duration": {
          "description": "Duration for add new absence",
          "allOf": [
            {
             "$ref": "#/definitions/Duration"
            }
          ]
        },
		"AbsencePaidStatus": {
          "description": "AbsencePaidStatus for add new absence",
          "allOf": [
            {
             "$ref": "#/definitions/AbsencePaidStatus"
            }
          ]
        },
		"EmergencyLeave": {
          "description": "EmergencyLeave for add new absence",
          "allOf": [
            {
             "$ref": "#/definitions/EmergencyLeave"
            }
          ]
        },
		"AddComments": {
           "description": "AddComments array list",
          "allOf": [
            {
              "$ref": "#/definitions/AddCommentsArrayForAbsence"
            }
          ]
        },
      		"AddFiles":
			{
              "description": "AddFiles array list",
             "allOf": [
               {
                "$ref": "#/definitions/AddFilesArrayForAbsence"
              }
            ]
          }}
	},

	"GetSalaryDetail2": {
      "type": "object",
      "required": [
        "APIKey",
        "Action",
        "EmployeeId",
        "IsIncludeHistory"],
      "properties": {
	  "APIKey": {
          "description": "APIKey for GetSalaryDetail of employee",
          "type": "string",
		  "allOf": [
            {
              "$ref": "#/definitions/APIKey"
            }
          ]
        },
        "Action": {
          "description": "Action name = GetSalaryDetail",
          "allOf": [
            {
              "$ref": "#/definitions/Action"
            }
          ],
		    "example": "GetSalaryDetail"
        },
        "EmployeeId": {
          "description": "Employee id for get salary detail",
          "allOf": [
            {
             "$ref": "#/definitions/EmployeeId"
            }
          ]
        },
        "IsIncludeHistory": {
          "description": "Include hostory for get salary detail",
          "allOf": [
            {
             "$ref": "#/definitions/IsIncludeHistory"
            }
          ],
		   "enum": [
		    "false",
		       "true"
          ]
        }
      }
    },

  "CreateNewSalaryParameter": {
      "type": "object",
      "required": [
        "APIKey",
        "Action",
        "EmployeeId",
        "EffectiveFrom",
		"SalaryType",
		"PaymentFrequency",
		"SalaryAmount",
		"CurrencyCode",
		"ChangeReason",
		"Deductions",
		"DisplayAsAmountOrPercentage",
		"Amount",
		"Percentage",
		"IncludeInTotalSalary",
		"Deduction",
		"Entitlements"],
      "properties": {
	  "APIKey": {
          "description": "APIKey for Create New Salary of employee ",
          "type": "string",
		  "allOf": [
            {
              "$ref": "#/definitions/APIKey"
            }
          ]
        },
        "Action": {
          "description": "Action name = CreateNewSalary",
          "allOf": [
            {
              "$ref": "#/definitions/Action"
            }
          ],
		   "example": "CreateNewSalary"
        },
        "EmployeeId": {
          "description": "Employee Id for create new salary",
          "allOf": [
            {
             "$ref": "#/definitions/EmployeeId"
            }
          ]
        },

        "EffectiveFrom": {
          "description": "EffectiveFrom for create new salary",
          "allOf": [
            {
             "$ref": "#/definitions/EffectiveFrom"
            }
          ]
        },
		"SalaryType": {
          "description": "SalaryType for create new salary",
          "allOf": [
            {
             "$ref": "#/definitions/SalaryType"
            }
          ]
        },
		"PaymentFrequency": {
          "description": "PaymentFrequency for create new salary",
          "allOf": [
            {
             "$ref": "#/definitions/PaymentFrequency"
            }
          ]
        },
		"SalaryAmount": {
          "description": "SalaryAmount for create new salary",
          "allOf": [
            {
             "$ref": "#/definitions/SalaryAmount"
            }
          ]
        },
		"CurrencyCode": {
          "description": "CurrencyCode for create new salary",
          "allOf": [
            {
             "$ref": "#/definitions/CurrencyCode"
            }
          ]
        },
		"ChangeReason": {
          "description": "ChangeReason for create new salary",
          "allOf": [
            {
             "$ref": "#/definitions/ChangeReason"
            }
          ]
        },
		"Comments": {
          "description": "Comments for create new salary",
          "allOf": [
            {
             "$ref": "#/definitions/Comments"
            }
          ],
		"maxLength":"1024"
		},
		"Deductions": {
          "description": "Deductions of user Array",
          "allOf": [
            {
             "$ref": "#/definitions/DeductionsArray"
            }
          ]
		},

		 "Entitlements": {
          "description": "Entitlements of user",
          "allOf": [
            {
             "$ref": "#/definitions/EntitlementsArray"
            }
          ]

		}}
    },

	"DeleteSalaryParameter":{
	  "type": "object",
      "required": [
	  "APIKey",
        "Action",
        "EmployeeId",
        "EffectiveFrom"],
		 "properties": {
			  "APIKey": {
				  "description": "APIKey for delete Salary of employee",
				  "type": "string",
				  "allOf": [
					{
					  "$ref": "#/definitions/APIKey"
					}
				  ]
				},
				"Action": {
				  "description": "Action name = DeleteSalary",
				  "allOf": [
					{
					  "$ref": "#/definitions/Action"
					}
				  ],
				  "example": "DeleteSalary"
				},
				"EmployeeId": {
				  "description": "Employee Id for delete salary",
				  "allOf": [
					{
					 "$ref": "#/definitions/EmployeeId"
					}
				  ]
				},
				"EffectiveFrom": {
				  "description": "EffectiveFrom for delete salary",
				  "allOf": [
					{
					 "$ref": "#/definitions/EffectiveFrom"
					}
				  ]
				}}
	},

	"UploadEmployeeDocumentParameter": {
      "type": "object",
      "required": [
        "APIKey",
        "Action",
        "EmployeeId",
        "Category",
		"EmployeeAccess",
		"ManagerAccess",
		"SignatureRequired",
		"DocumentName",
		"Description",
		"File"],
      "properties": {
	  "APIKey": {
          "description": "APIKey for employee api to Upload Employee Document",
          "type": "string",
		  "allOf": [
            {
              "$ref": "#/definitions/APIKey"
            }
          ]
        },
        "Action": {
          "description": "Action name = UploadEmployeeDocument",
          "allOf": [
            {
              "$ref": "#/definitions/Action"
            }
          ],
		   "example":"UploadEmployeeDocument"
        },
        "EmployeeId": {
          "description": " Employee id for upload employee document",
          "allOf": [
            {
             "$ref": "#/definitions/EmployeeId"
            }
          ]
        },
        "Category": {
          "description": "Category for upload employee document",
          "allOf": [
            {
             "$ref": "#/definitions/Category"
            }
          ]
        },
       "EmployeeAccess": {
          "description": "EmployeeAccess for upload employee document ",
          "allOf": [
            {
             "$ref": "#/definitions/EmployeeAccess"
            }
          ]
        }  ,
      "ManagerAccess": {
          "description": "ManagerAccess for upload employee document ",
           "allOf": [
            {
             "$ref": "#/definitions/ManagerAccess"
            }
          ]
        } ,
      "SignatureRequired": {
          "description": "SignatureRequired for upload employee document",
          "allOf": [
            {
             "$ref": "#/definitions/SignatureRequired"
            }
          ]
        } ,
		"DocumentName": {
           "description": "DocumentName for upload employee document",
           "allOf": [
            {
             "$ref": "#/definitions/DocumentName"
            }
          ]
        } ,
		"Description": {
          "description": "Description for upload employee document",
          "allOf": [
            {
             "$ref": "#/definitions/Description"
            }
          ]
        } ,
       "File": {
          "description": "File for upload employee document",
          "allOf": [
            {
             "$ref": "#/definitions/File"
            }
          ]
        } }
    },

	"GetAllDocumentParameter": {
      "type": "object",
      "required": [
        "APIKey",
        "Action",
        "EmployeeId"],
      "properties": {
	      "APIKey": {
          "description": "APIKey for get all document",
          "type": "string",
		  "allOf": [
            {
              "$ref": "#/definitions/APIKey"
            }
          ]
        },
        "Action": {
           "description": "Action name = GetAllDocument",
           "allOf": [
            {
              "$ref": "#/definitions/Action"
            }
          ],
		   "example": "GetAllDocument"
        },
        "EmployeeId": {
          "description": "Employee Id for get all document ",
          "allOf": [
            {
              "$ref": "#/definitions/EmployeeId"
            }
          ]
        }}
    },

  "GetDocumentByIDParameter":{
	 "type": "object",
      "required": [
        "APIKey",
        "Action",
        "EmployeeId",
		"DocumentId"],
	"properties": {
	  "APIKey": {
           "description": "APIKey for GetDocumentByID",
           "type": "string",
		   "allOf": [
            {
              "$ref": "#/definitions/APIKey"
            }
          ]
        },
        "Action": {
          "description": "Action name = GetDocumentById",
           "allOf": [
            {
              "$ref": "#/definitions/Action"
            }
          ],
		   "example": "GetDocumentById"
        },
        "EmployeeId": {
          "description": "Employee id for get document by id",
           "allOf": [
            {
             "$ref": "#/definitions/EmployeeId"
            }
          ]
        },
		 "DocumentId": {
          "description": "DocumentId of user",
          "allOf": [
            {
             "$ref": "#/definitions/DocumentId"
            }
          ]
        }
	}
 },

   "CreateNewTimesheetDefinition": {
      "type": "object",
      "required": [
        "APIKey",
        "Action",
        "EmployeeId",
		"TimesheetDate"
      ],
      "properties": {
	  "APIKey": {
          "description": "APIKey for employee timesheet api to create employee's new timesheet",
          "type": "string",
		  "allOf": [
            {
              "$ref": "#/definitions/APIKey"
            }
          ]
        },
        "Action": {
          "description": "Action name = CreateNewTimesheet",
          "allOf": [
            {
              "$ref": "#/definitions/Action"
            }
          ],
		  "example": "CreateNewTimesheet"
        },
        "EmployeeId": {
          "description": "Employee id to create new employee timesheet",
          "allOf": [
            {
             "$ref": "#/definitions/EmployeeId"
            }
          ]
        },
        "TimesheetDate": {
          "description": "Employee Timesheet created date ",
          "allOf": [
            {
             "$ref": "#/definitions/TimesheetDate"
            }
          ]
        },
		"TimeIn1": {
          "description": "TimeIn1 value for create new timesheet",
          "allOf": [
            {
             "$ref": "#/definitions/TimeIn1"
            }
          ]
        },
		"TimeOut1": {
          "description": "TimeOut1 value for create new timesheet",
          "allOf": [
            {
             "$ref": "#/definitions/TimeOut1"
            }
          ]
        },
		"TimeIn2": {
          "description": "TimeIn2 value for create new timesheet",
          "allOf": [
            {
             "$ref": "#/definitions/TimeIn2"
            }
          ]
        },
		"TimeOut2": {
          "description": "TimeOut2 value for create new timesheet",
          "allOf": [
            {
             "$ref": "#/definitions/TimeOut2"
            }
          ]
        },
		"TimeIn3": {
          "description": "TimeIn3 value for create new timesheet",
          "allOf": [
            {
             "$ref": "#/definitions/TimeIn3"
            }
          ]
        },
		"TimeOut3": {
          "description": "TimeOut3 value for create new timesheet",
          "allOf": [
            {
             "$ref": "#/definitions/TimeOut3"
            }
          ]
        },

		"TimeIn4": {
          "description": "TimeIn4 value for create new timesheet",
          "allOf": [
            {
             "$ref": "#/definitions/TimeIn4"
            }
          ]
        },
		"TimeOut4": {
          "description": "TimeOut4 value for create new timesheet",
          "allOf": [
            {
             "$ref": "#/definitions/TimeOut4"
            }
          ]
        },
		"TimeIn5": {
          "description": "TimeIn5 value for create new timesheet",
          "allOf": [
            {
             "$ref": "#/definitions/TimeIn5"
            }
          ]
        },
		"TimeOut5": {
          "description": "TimeOut5 value for create new timesheet",
          "allOf": [
            {
             "$ref": "#/definitions/TimeOut5"
            }
          ]
        },
		"TimeIn6": {
          "description": "TimeIn6 value for create new timesheet",
          "allOf": [
            {
             "$ref": "#/definitions/TimeIn6"
            }
          ]
        },
		"TimeOut6": {
          "description": "TimeOut6 value for create new timesheet",
          "allOf": [
            {
             "$ref": "#/definitions/TimeOut6"
            }
          ]
        },
		"TimeIn7": {
          "description": "TimeIn7 value for create new timesheet",
          "allOf": [
            {
             "$ref": "#/definitions/TimeIn7"
            }
          ]
        },
		"TimeOut7": {
          "description": "TimeOut7 value for create new timesheet",
          "allOf": [
            {
             "$ref": "#/definitions/TimeOut7"
            }
          ]
        },
		"TimeIn8": {
          "description": "TimeIn8 value for create new timesheet",
          "allOf": [
            {
             "$ref": "#/definitions/TimeIn8"
            }
          ]
        },
		"TimeOut8": {
          "description": "TimeOut8 value for create new timesheet",
          "allOf": [
            {
             "$ref": "#/definitions/TimeOut8"
            }
          ]
        },
		"TimeIn9": {
          "description": "TimeIn9 value for create new timesheet",
          "allOf": [
            {
             "$ref": "#/definitions/TimeIn9"
            }
          ]
        },
		"TimeOut9": {
          "description": "TimeOut9 value for create new timesheet",
          "allOf": [
            {
             "$ref": "#/definitions/TimeOut9"
            }
          ]
        },
		"TimeIn10": {
          "description": "TimeIn10 value for create new timesheet",
          "allOf": [
            {
             "$ref": "#/definitions/TimeIn10"
            }
          ]
        },
		"TimeOut10": {
          "description": "TimeOut10 value for create new timesheet",
          "allOf": [
            {
             "$ref": "#/definitions/TimeOut10"
            }
          ]
        },
		"TimeIn11": {
          "description": "TimeIn11 value for create new timesheet",
          "allOf": [
            {
             "$ref": "#/definitions/TimeIn11"
            }
          ]
        },
		"TimeOut11": {
          "description": "TimeOut11 value for create new timesheet",
          "allOf": [
            {
             "$ref": "#/definitions/TimeOut11"
            }
          ]
        },
		"TimeIn12": {
          "description": "TimeIn12 value for create new timesheet",
          "allOf": [
            {
             "$ref": "#/definitions/TimeIn12"
            }
          ]
        },
		"TimeOut12": {
          "description": "TimeOut12 value for create new timesheet",
          "allOf": [
            {
             "$ref": "#/definitions/TimeOut12"
            }
          ]
        },
		"TimeIn13": {
          "description": "TimeIn13 value for create new timesheet",
          "allOf": [
            {
             "$ref": "#/definitions/TimeIn13"
            }
          ]
        },
		"TimeOut13": {
          "description": "TimeOut13 value for create new timesheet",
          "allOf": [
            {
             "$ref": "#/definitions/TimeOut13"
            }
          ]
        },
		"TimeIn14": {
          "description": "TimeIn14 value for create new timesheet",
          "allOf": [
            {
             "$ref": "#/definitions/TimeIn14"
            }
          ]
        },
		"TimeOut14": {
          "description": "TimeOut14 value for create new timesheet",
          "allOf": [
            {
             "$ref": "#/definitions/TimeOut14"
            }
          ]
        },
		"TimeIn15": {
          "description": "TimeIn15 value for create new timesheet",
          "allOf": [
            {
             "$ref": "#/definitions/TimeIn15"
            }
          ]
        },
		"TimeOut15": {
          "description": "TimeOut15 value for create new timesheet",
          "allOf": [
            {
             "$ref": "#/definitions/TimeOut15"
            }
          ]
        },
		"Comments":{
		  "description": "Comments value for create new timesheet",
          "allOf": [
            {
             "$ref": "#/definitions/Comments"
            }
          ],
		   "maxLength":"1024"

        }

      }
    },

	"UpdateTimesheetDefinition": {
      "type": "object",
      "required": [
        "APIKey",
        "Action",
        "EmployeeId",
		"TimesheetDate"
      ],
      "properties": {
	  "APIKey": {
          "description": "APIKey to update employee Timesheet",
          "type": "string",
		  "allOf": [
            {
              "$ref": "#/definitions/APIKey"
            }
          ]
        },
        "Action": {
          "description": "Action name = UpdateTimesheet",
          "allOf": [
            {
              "$ref": "#/definitions/Action"
            }
          ],
		   "example": "UpdateTimesheet"
        },
        "EmployeeId": {
          "description": "Employee id for update employee timesheet",
          "allOf": [
            {
             "$ref": "#/definitions/EmployeeId"
            }
          ]
        },
        "TimesheetDate": {
          "description": "Employee timesheet date to update ",
          "allOf": [
            {
             "$ref": "#/definitions/TimesheetDate"
            }
          ]
        },
		"TimeIn1": {
          "description": "TimeIn1",
          "allOf": [
            {
             "$ref": "#/definitions/TimeIn1"
            }
          ]
        },
		"TimeOut1": {
          "description": "TimeOut1 value for for update employee timesheet",
          "allOf": [
            {
             "$ref": "#/definitions/TimeOut1"
            }
          ]
        },
		"TimeIn2": {
          "description": "TimeIn2 value for update employee timesheet",
          "allOf": [
            {
             "$ref": "#/definitions/TimeIn2"
            }
          ]
        },
		"TimeOut2": {
          "description": "TimeOut2 value for update employee timesheet",
          "allOf": [
            {
             "$ref": "#/definitions/TimeOut2"
            }
          ]
        },
		"TimeIn3": {
          "description": "TimeIn3 value for update employee timesheet",
          "allOf": [
            {
             "$ref": "#/definitions/TimeIn3"
            }
          ]
        },
		"TimeOut3": {
          "description": "TimeOut3 value for update employee timesheet",
          "allOf": [
            {
             "$ref": "#/definitions/TimeOut3"
            }
          ]
        },

		"TimeIn4": {
          "description": "TimeIn4 value for update employee timesheet",
          "allOf": [
            {
             "$ref": "#/definitions/TimeIn4"
            }
          ]
        },
		"TimeOut4": {
          "description": "TimeOut4 value for update employee timesheet",
          "allOf": [
            {
             "$ref": "#/definitions/TimeOut4"
            }
          ]
        },
		"TimeIn5": {
          "description": "TimeIn5 value for update employee timesheet",
          "allOf": [
            {
             "$ref": "#/definitions/TimeIn5"
            }
          ]
        },
		"TimeOut5": {
          "description": "TimeOut5 value for update employee timesheet",
          "allOf": [
            {
             "$ref": "#/definitions/TimeOut5"
            }
          ]
        },
		"TimeIn6": {
          "description": "TimeIn6 value for update employee timesheet",
          "allOf": [
            {
             "$ref": "#/definitions/TimeIn6"
            }
          ]
        },
		"TimeOut6": {
          "description": "TimeOut6 value for update employee timesheet",
          "allOf": [
            {
             "$ref": "#/definitions/TimeOut6"
            }
          ]
        },
		"TimeIn7": {
          "description": "TimeIn7 value for update employee timesheet",
          "allOf": [
            {
             "$ref": "#/definitions/TimeIn7"
            }
          ]
        },
		"TimeOut7": {
          "description": "TimeOut7 value for update employee timesheet",
          "allOf": [
            {
             "$ref": "#/definitions/TimeOut7"
            }
          ]
        },
		"TimeIn8": {
          "description": "TimeIn8 value for update employee timesheet",
          "allOf": [
            {
             "$ref": "#/definitions/TimeIn8"
            }
          ]
        },
		"TimeOut8": {
          "description": "TimeOut8 value for update employee timesheet",
          "allOf": [
            {
             "$ref": "#/definitions/TimeOut8"
            }
          ]
        },
		"TimeIn9": {
          "description": "TimeIn9 value for update employee timesheet",
          "allOf": [
            {
             "$ref": "#/definitions/TimeIn9"
            }
          ]
        },
		"TimeOut9": {
          "description": "TimeOut9 value for update employee timesheet",
          "allOf": [
            {
             "$ref": "#/definitions/TimeOut9"
            }
          ]
        },
		"TimeIn10": {
          "description": "TimeIn10 value for update employee timesheet",
          "allOf": [
            {
             "$ref": "#/definitions/TimeIn10"
            }
          ]
        },
		"TimeOut10": {
          "description": "TimeOut10 value for update employee timesheet",
          "allOf": [
            {
             "$ref": "#/definitions/TimeOut10"
            }
          ]
        },
		"TimeIn11": {
          "description": "TimeIn11 value for update employee timesheet",
          "allOf": [
            {
             "$ref": "#/definitions/TimeIn11"
            }
          ]
        },
		"TimeOut11": {
          "description": "TimeOut11 value for update employee timesheet",
          "allOf": [
            {
             "$ref": "#/definitions/TimeOut11"
            }
          ]
        },
		"TimeIn12": {
          "description": "TimeIn12 value for update employee timesheet",
          "allOf": [
            {
             "$ref": "#/definitions/TimeIn12"
            }
          ]
        },
		"TimeOut12": {
          "description": "TimeOut12 value for update employee timesheet",
          "allOf": [
            {
             "$ref": "#/definitions/TimeOut12"
            }
          ]
        },
		"TimeIn13": {
          "description": "TimeIn13 for update employee timesheet",
          "allOf": [
            {
             "$ref": "#/definitions/TimeIn13"
            }
          ]
        },
		"TimeOut13": {
          "description": "TimeOut13 value for update employee timesheet",
          "allOf": [
            {
             "$ref": "#/definitions/TimeOut13"
            }
          ]
        },
		"TimeIn14": {
          "description": "TimeIn14 value for update employee timesheet",
          "allOf": [
            {
             "$ref": "#/definitions/TimeIn14"
            }
          ]
        },
		"TimeOut14": {
          "description": "TimeOut14 value for update employee timesheet",
          "allOf": [
            {
             "$ref": "#/definitions/TimeOut14"
            }
          ]
        },
		"TimeIn15": {
          "description": "TimeIn15 value for update employee timesheet",
          "allOf": [
            {
             "$ref": "#/definitions/TimeIn15"
            }
          ]
        },
		"TimeOut15": {
          "description": "TimeOut15 value for update employee timesheet",
          "allOf": [
            {
             "$ref": "#/definitions/TimeOut15"
            }
          ]
        },
		"Comments":{
		  "description": "Comments value for update employee timesheet",
          "allOf": [
            {
             "$ref": "#/definitions/Comments"
            }
          ],
		   "maxLength":"1024"

        }

      }
    },

	"DeleteTimesheetdefinition": {
      "type": "object",
      "required": [
        "APIKey",
        "Action",
        "EmployeeId",
		"TimesheetDate"

      ],
      "properties": {
	  "APIKey": {
          "description": "APIKey for delete employee timesheet",
          "type": "string",
		  "allOf": [
            {
              "$ref": "#/definitions/APIKey"
            }
          ]
        },
        "Action": {
          "description": "Action name = DeleteTimesheet",
          "allOf": [
            {
              "$ref": "#/definitions/Action"
            }
          ],
		   "example": "DeleteTimesheet"
        },
         "EmployeeId": {
          "description": "Employee id for delete employee timesheet",
          "allOf": [
            {
             "$ref": "#/definitions/EmployeeId"
            }
          ]
        },
        "TimesheetDate": {
          "description": "Employee Timesheet Date to delete ",
          "allOf": [
            {
             "$ref": "#/definitions/TimesheetDate"
            }
          ]
        }


      }
    },

	"GetTimesheetdefinition": {
      "type": "object",
      "required": [
        "APIKey",
        "Action",
        "EmployeeId"

      ],
      "properties": {
	  "APIKey": {
          "description": "APIKey for get employee timesheet detail",
          "type": "string",
		  "allOf": [
            {
              "$ref": "#/definitions/APIKey"
            }
          ]
        },
        "Action": {
          "description": "Action name = GetTimesheetDetail",
          "allOf": [
            {
              "$ref": "#/definitions/Action"
            }
          ],
		   "example": "GetTimesheetDetail"
        },
         "EmployeeId": {
          "description": "Employee id for get employee timesheet detail",
          "allOf": [
            {
             "$ref": "#/definitions/EmployeeId"
            }
          ]
        },
        "StartDate": {
          "description": "Start Date to get employee timesheet detail",
          "allOf": [
            {
             "$ref": "#/definitions/StartDate"
            }
          ]
        },
		 "EndDate": {
          "description": "End Date to get employee timesheet detail",
          "allOf": [
            {
             "$ref": "#/definitions/EndDate"
            }
          ]
        }


      }
    },

	"GetProjectTimesheetDetail": {
      "type": "object",
      "required": [
        "APIKey",
        "Action",
		"EmployeeId"
       ],
      "properties": {
	  "APIKey": {
          "description": "APIKey for employee api to get project time sheet detail",
          "type": "string",
		  "allOf": [
            {
              "$ref": "#/definitions/APIKey"
            }
          ]
        },
        "Action": {
          "description": "Action name = GetProjectTimesheetDetail",
          "allOf": [
            {
              "$ref": "#/definitions/Action"
            }
          ],
		   "example": "GetProjectTimesheetDetail"
        },
		 "EmployeeId": {
          "description": "Employee id",
          "allOf": [
            {
              "$ref": "#/definitions/EmployeeId"
            }
          ]
        },
        "StartDate": {
          "description": "Employee project timesheet start date",
          "allOf": [
            {
             "$ref": "#/definitions/StartDate"
            }
          ]},
        "EndDate": {
          "description": "Employee project timesheet end date",
          "allOf": [
            {
             "$ref": "#/definitions/EndDate"
            }
          ]
        }


      }
    },

	"CreateVacancyDetailParameter": {
      "type": "object",
      "required": [
        "APIKey",
        "Action",
		"VacancyName",
  		"VacancyDescription",
		"Reference",
		"IsHideSalary",
		"VacancyType",
		"IsCoverLetterMandatory",
		"IsResumeMandatory"
      ],
      "properties": {
	    "APIKey": {
          "description": "APIKey for vacancy api to create new vacancy",
          "type": "string",
		  "allOf": [
            {
              "$ref": "#/definitions/APIKey"
            }
          ]
        },

        "Action": {
          "description": "Action name = CreateNewVacancy",
          "allOf": [
            {
              "$ref": "#/definitions/Action"
            }
          ],
		   "example": "CreateNewVacancy"
        },
        "VacancyName": {
          "description": "Vacancy name for create new vacancy",
          "allOf": [
            {
             "$ref": "#/definitions/VacancyName"
            }
          ]
        },
        "VacancyDescription": {
          "description": "Vacancy description for create new vacancy",
          "allOf": [
            {
             "$ref": "#/definitions/VacancyDescription"
            }
          ]
        },

		"Company": {
          "description": "Company name for create new vacancy",
          "allOf": [
            {
             "$ref": "#/definitions/Company"
            }
          ]
        },

		"Location": {
          "description": "Location for create new vacancy",
          "allOf": [
            {
             "$ref": "#/definitions/Location"
            }
          ],
		  "maxLength":"100"
        },

		"Department": {
          "description": "Department for create new vacancy",
          "allOf": [
            {
             "$ref": "#/definitions/Department"
            }
          ],
		  "maxLength":"100"
        },

		"ClosingDate": {
          "description": "Closing date for create new vacancy",
          "allOf": [
            {
             "$ref": "#/definitions/ClosingDate"
            }
          ]
       },

		"Reference": {
          "description": "Reference for create new vacancy",
          "allOf": [
            {
             "$ref": "#/definitions/Reference"
            }
          ],
		   "maxLength": "100"
        },

		"Comment": {
          "description": "Comment for create new vacancy",
          "allOf": [
            {
             "$ref": "#/definitions/Comment"
            }
          ]
        },

		"SalaryRange": {
          "description": "Salary range for create new vacancy",
          "allOf": [
            {
             "$ref": "#/definitions/SalaryRange"
            }
          ]
        },

		"JobDescription": {
          "description": "Job description for create new vacancy",
          "allOf": [
            {
             "$ref": "#/definitions/JobDescription"
            }
          ]
        },

		"IsCoverLetterMandatory": {
          "description": "Is cover letter mandatory for create new vacancy",
          "allOf": [
            {
             "$ref": "#/definitions/IsCoverLetterMandatory"
            }
          ]
        },

		"IsResumeMandatory": {
          "description": "Is resume mandatory for create new vacancy",
          "allOf": [
            {
             "$ref": "#/definitions/IsResumeMandatory"
            }
          ]
        },

	   "IsHideSalary": {
          "description": "Is hide salary for create new vacancy",
          "allOf": [
            {
             "$ref": "#/definitions/IsHideSalary"
            }
          ]
        },

		"VacancyType": {
          "description": "Vacancy type for create new vacancy",
          "allOf": [
            {
             "$ref": "#/definitions/VacancyType"
            }
          ]
        },

		"JobTitle": {
          "description": "Job title for create new vacancy",
          "allOf": [
            {
             "$ref": "#/definitions/JobTitle"
            }
          ]
        },

		"City": {
          "description": "City for create new vacancy",
          "allOf": [
            {
             "$ref": "#/definitions/City"
            }
          ]
        },

		"Country": {
          "description": "Country value",
          "allOf": [
            {
             "$ref": "#/definitions/Country"
            }
          ]
        },

		"Experience": {
          "description": "Experience ",
          "allOf": [
            {
             "$ref": "#/definitions/Experience"
            }
          ]
        }

      }
    },

	"GetVacancyParameters": {
      "type": "object",
      "required": [
        "APIKey",
        "Action",
        "EmployeeId",
		"Reference"
      ],
      "properties": {
	  "APIKey": {
          "description": "APIKey for vacancy api to get vacancy",
          "type": "string",
		  "allOf": [
            {
              "$ref": "#/definitions/APIKey"
            }
          ]
        },
        "Action": {
          "description": "Action name = GetVacancy",
          "allOf": [
            {
              "$ref": "#/definitions/Action"
            }
          ],
		   "example": "GetVacancy"
        },
        "VacancyReference": {
          "description": "Vacancy reference for get vacancy",
          "allOf": [
            {
             "$ref": "#/definitions/VacancyReference"
            }
          ]
        }
      }
    },

	"GetAllVacancyParameters": {
      "type": "object",
      "required": [
        "APIKey",
        "Action",
        "EmployeeId"
      ],
      "properties": {
	  "APIKey": {
          "description": "APIKey for vacancy api to get all vacancy",
          "type": "string",
		  "allOf": [
            {
              "$ref": "#/definitions/APIKey"
            }
          ]
        },
        "Action": {
          "description": "Action name = GetAllVacancies",
          "allOf": [
            {
              "$ref": "#/definitions/Action"
            }
          ],
		  "example": "GetAllVacancies"
        }
      }
    },

	"CreateApplicantDetailParameter": {
      "type": "object",
      "required": [
        "APIKey",
        "Action",
		"FirstName",
		"LastName",
		"QuestionId",
		"Documents",
		"Skills"
  		      ],
      "properties": {
	    "APIKey": {
          "description": "APIKey for applicant api to Create new applicant",
          "type": "string",
		  "allOf": [
            {
              "$ref": "#/definitions/APIKey"
            }
          ]
        },

        "Action": {
          "description": "Action name = CreateNewApplicant",
          "allOf": [
            {
              "$ref": "#/definitions/Action"
            }
          ],
		   "example": "CreateNewApplicant"
        },

        "VacancyReference": {
          "description": "Vacancy reference for create new applicant",
          "allOf": [
            {
             "$ref": "#/definitions/VacancyReference"
            }
          ]
        },

	    "FirstName": {
          "description": "First name for create new applicant",
          "allOf": [
            {
             "$ref": "#/definitions/FirstName"
            }
          ]
        },

	    "LastName": {
          "description": "Last name for create new applicant",
          "allOf": [
            {
             "$ref": "#/definitions/LastName"
            }
          ]
        },

		"Email": {
          "description": "Email for create new applicant",
          "allOf": [
            {
             "$ref": "#/definitions/Email"
            }
          ]
        },

		"Gender": {
          "description": "Gender for create new applicant",
          "allOf": [
            {
             "$ref": "#/definitions/Gender"
            }
          ]
        },

		"DateOfBirth": {
          "description": "Date of birth for create new applicant",
          "allOf": [
            {
             "$ref": "#/definitions/DateOfBirth"
            }
          ]
        },

		"PostCode": {
          "description": "Post code for create new applicant",
          "allOf": [
            {
             "$ref": "#/definitions/PostCode"
            }
          ]
        },

		"Address": {
          "description": "Address for create new applicant",
          "allOf": [
            {
             "$ref": "#/definitions/Address"
            }
          ]
        },

		"PhoneNumber": {
          "description": "PhoneNumber for create new applicant",
          "allOf": [
            {
             "$ref": "#/definitions/PhoneNumber"
            }
          ]
        },

		"OtherContactDetails": {
          "description": "Other contact details for create new applicant",
          "allOf": [
            {
             "$ref": "#/definitions/OtherContactDetails"
            }
          ]
        },

		"Source": {
          "description": "Source for create new applicant",
          "allOf": [
            {
             "$ref": "#/definitions/Source"
            }
          ]
        },

		"AdditionalQuestions": {
          "description": "Source for create new applicant",
          "allOf": [
            {
             "$ref": "#/definitions/AdditionalQuestionsForCreatenewApplicantArray"
            }
          ]
        },

		"InternalQuestions": {
          "description": "Internal questions for create new applicant",
          "allOf": [
            {
             "$ref": "#/definitions/InternalQuestionsForCreateNewApplicantArray"
            }
          ]
        },

		"Documents": {
          "description": "Documents for create new applicant",
          "allOf": [
            {
             "$ref": "#/definitions/DocumentsForCreateNewApplicantArray"
            }
          ]
        },

		"Skills": {
          "description": "Skills for create new applicant",
          "allOf": [
            {
             "$ref": "#/definitions/Skills"
            }
          ]
        },

		"RecruitmentCost": {
          "description": "Recruitment cost for create new applicant",
          "allOf": [
            {
             "$ref": "#/definitions/RecruitmentCost"
            }
          ]
        },

		"DateLastContacted": {
          "description": "Date last contacted for create new applicant",
          "allOf": [
            {
             "$ref": "#/definitions/DateLastContacted"
            }
          ]
        }}
    },

  "uploadapplicantdocumentParameter": {
      "type": "object",
      "required": [
        "APIKey",
        "Action",
		"ApplicantId",
		"DocumentName",
		"File"
  		 ],

      "properties": {
	    "APIKey": {
          "description": "APIKey for Employee late api to upload applicant document",
          "type": "string",
		  "allOf": [
            {
              "$ref": "#/definitions/APIKey"
            }
          ]
        },

        "Action": {
          "description": "Action name = uploadapplicantdocument",
          "allOf": [
            {
              "$ref": "#/definitions/Action"
            }
          ],
		   "example": "uploadapplicantdocument"
        },

        "ApplicantId": {
          "description": "ApplicantId for upload applicant document",
          "allOf": [
            {
             "$ref": "#/definitions/ApplicantId"
            }
          ]
        },

	    "DocumentName": {
          "description": "Document name for upload applicant document",
          "allOf": [
            {
             "$ref": "#/definitions/DocumentName"
            }
          ]
        },

	    "Description": {
          "description": "Description for upload applicant document",
          "allOf": [
            {
             "$ref": "#/definitions/Description"
            }
          ]
        },

		"File": {
          "description": "File for upload applicant document",
          "allOf": [
            {
             "$ref": "#/definitions/File"
            }
          ]
        }
      }
    },
   "GetLateByEmployeeIdParameter": {
      "type": "object",
      "required": [
        "APIKey",
        "Action",
		"EmployeeId"
  		      ],
      "properties": {
		   "APIKey": {
			  "description": "APIKey for Employee late api for Get late by employee",
			  "type": "string",
			  "allOf": [
				{
				  "$ref": "#/definitions/APIKey"
				}
			  ]
			},

		 "Action": {
			  "description": "Action name = GetLateByEmployeeId",
			  "allOf": [
				{
				  "$ref": "#/definitions/Action"
				}
			  ],
			    "example": "GetLateByEmployeeId"
			},

		 "EmployeeId": {
			  "description": "Employee id for Get late by employee",
			  "allOf": [
				{
				 "$ref": "#/definitions/EmployeeId"
				}
			  ]
			},

		"StartDate": {
			  "description": "Start date for Get late by employee",
			  "allOf": [
				{
				 "$ref": "#/definitions/StartDate"
				}
			  ]
			},
		"EndDate": {
			  "description": "End date for Get late by employee",
			  "allOf": [
				{
				 "$ref": "#/definitions/EndDate"
				}
			  ]
			}}
    },

	"AddNewLateParameters": {
      "type": "object",
      "required": [
        "APIKey",
        "Action",
		"EmployeeId",
		"LateDate",
		"HowLate",
		"Comments"
  		      ],
      "properties": {
		   "APIKey": {
			  "description": "APIKey for Employee late to add new late",
			  "type": "string",
			  "allOf": [
				{
				  "$ref": "#/definitions/APIKey"
				}
			  ]
			},

		 "Action": {
			  "description": "Action name = AddNewLate",
			  "allOf": [
				{
				  "$ref": "#/definitions/Action"
				}
			  ],
			  "example": "AddNewLate"
			},

		 "EmployeeId": {
			  "description": "Employee id for add new late",
			  "allOf": [
				{
				 "$ref": "#/definitions/EmployeeId"
				}
			  ]
			},

		"LateDate": {
			  "description": "Late date for add new late",
			  "allOf": [
				{
				 "$ref": "#/definitions/LateDate"
				}
			  ]
			},

		"HowLate": {
			  "description": "How late for add new late",
			  "allOf": [
				{
				 "$ref": "#/definitions/HowLate"
				}
			  ]
			},
		"Comments": {
			  "description": "Comments for add new late",
			  "allOf": [
				{
				 "$ref": "#/definitions/Comments"
				}
			  ],
			   "maxLength":"256"
			}}
    },
	"UpdateLateParameters": {
      "type": "object",
      "required": [
        "APIKey",
        "Action",
		"EmployeeId",
		"LateDate",
		"HowLate"],
      "properties": {
		   "APIKey": {
			  "description": "APIKey for Employee late to update late",
			  "type": "string",
			  "allOf": [
				{
				  "$ref": "#/definitions/APIKey"
				}
			  ]
			},

		 "Action": {
			  "description": "Action name = UpdateLate",
			  "allOf": [
				{
				  "$ref": "#/definitions/Action"
				}
			  ],
			    "example": "UpdateLate"
			},

		 "EmployeeId": {
			  "description": "Employee id for update late",
			  "allOf": [
				{
				 "$ref": "#/definitions/EmployeeId"
				}
			  ]
			},

		"LateDate": {
			  "description": "Late date for update late",
			  "allOf": [
				{
				 "$ref": "#/definitions/LateDate"
				}
			  ]
			},

		"HowLate": {
			  "description": "How late for update late",
			  "allOf": [
				{
				 "$ref": "#/definitions/HowLate"
				}
			  ]
			},
		"Comments": {
			  "description": "Comments for update late",
			  "allOf": [
				{
				 "$ref": "#/definitions/Comments"
				}
			  ],
			   "maxLength":"256"
			}}
    },
	"EmployeedeletelateParameter": {
      "type": "object",
      "required": [
        "APIKey",
        "Action",
		"EmployeeId",
		"LateDate"
  		      ],
      "properties": {
		   "APIKey": {
			  "description": "APIKey for Employee late api to delete late record",
			  "type": "string",
			  "allOf": [
				{
				  "$ref": "#/definitions/APIKey"
				}
			  ]
			},

		 "Action": {
			  "description": "Action name = DeleteLate",
			  "allOf": [
				{
				  "$ref": "#/definitions/Action"
				}
			  ],
			   "example": "DeleteLate"
			},

		 "EmployeeId": {
			  "description": "Employee id for delete late record",
			  "allOf": [
				{
				 "$ref": "#/definitions/EmployeeId"
				}
			  ]
			},

		"LateDate": {
			  "description": "Late date for delete late record",
			  "allOf": [
				{
				 "$ref": "#/definitions/LateDate"
				}
			  ]
			}}
    },

   "CheckDuplicateApplicantParameter": {
      "type": "object",
      "required": [
        "APIKey",
        "Action",
		"FirstName",
		"LastName"],
      "properties": {
	    "APIKey": {
          "description": "APIKey for applicant api to check duplicate applicant",
          "type": "string",
		  "allOf": [
            {
              "$ref": "#/definitions/APIKey"
            }
          ]
        },

        "Action": {
          "description": "Action name = CheckDuplicateApplicant",
          "allOf": [
            {
              "$ref": "#/definitions/Action"
            }
          ],
		   "example": "CheckDuplicateApplicant"
        },

        "VacancyReference": {
          "description": "Vacancy reference for check duplicate applicant",
          "allOf": [
            {
             "$ref": "#/definitions/VacancyReference"
            }
          ]
        },

	    "FirstName": {
          "description": "First name for check duplicate applicant",
          "allOf": [
            {
             "$ref": "#/definitions/FirstName"
            }
          ]
        },

	    "LastName": {
          "description": "Last name for check duplicate applicant",
          "allOf": [
            {
             "$ref": "#/definitions/LastName"
            }
          ]
        },

		"Email": {
          "description": "Email for check duplicate applicant",
          "allOf": [
            {
             "$ref": "#/definitions/Email"
            }
          ]
        }}
    },
	"WorkPatternParameter": {
      "type": "object",
      "required": [
        "APIKey",
        "Action",
		"WorkPatternId"
  		      ],
      "properties": {
	    "APIKey": {
          "description": "APIKey for applicant api to get Work pattern parameter detail",
          "type": "string",
		  "allOf": [
            {
              "$ref": "#/definitions/APIKey"
            }
          ]
        },

        "Action": {
          "description": "Action name = GetWorkPatternDetail",
          "allOf": [
            {
              "$ref": "#/definitions/Action"
            }
          ],
		    "example": "GetWorkPatternDetail"
        },

        "WorkPatternId": {
          "description": "Work patternId for get work pattern",
          "allOf": [
            {
             "$ref": "#/definitions/WorkPatternId"
            }
          ]
        },

	    "WorkPatternName": {
          "description": "Work pattern name for get work pattern",
          "allOf": [
            {
             "$ref": "#/definitions/WorkPatternName"
            }
          ]
        }}
    },

	"AdditionalQuestionsForCreatenewApplicantArray": {
      "type": "array",
	  "items" :{
	  "type":"object",
      "properties": {
        "QuestionId": {
          "type": "string",
		  "description": "Question id default value ",
		  "example": "2"
        },

		"Value": {
          "type": "string",
		  "description": "Value  default value ",
		  "example": "1"
        }}
	  }
    },
   "InternalQuestionsForCreateNewApplicantArray": {
      "type": "array",
	  "items" :{
	  "type":"object",
      "properties": {
        "QuestionId": {
          "type": "string",
		  "description": "Question id default value ",
		  "example": "2"
        },

		"Value": {
          "type": "string",
		  "description": "Value  default value ",
		  "example": "1"
        }}
	  }
    },

	"DocumentsForCreateNewApplicantArray": {
      "type": "array",
	  "items" :{
	  "type":"object",
      "properties": {
        "DocumentName": {
          "type": "string",
		  "maxLength":"100 ",
		  "description": "Document name id default value ",
		  "example": "xyz.png"
        },

		"Url": {
          "type": "string",
		  "format":"url",
		  "maxLength":"256",
		  "description": "Doc2",
		  "example": "www.google.com/doc2.docx"
        }}
	  }
    },

     "GetByEmployeeIdForEmployeeAppraisal": {
      "type": "object",
      "required": [
        "APIKey",
        "Action",
        "EmployeeId",
	    "StartDate",
		"EndDate"],
        "properties": {
	     "APIKey": {
          "description": "APIKey for employee api to GetByEmployeeId",
          "type": "string",
		  "allOf": [
            {
              "$ref": "#/definitions/APIKey"
            }
          ]
        },
        "Action": {
          "description": "Action name = GetByEmployeeId",
          "allOf": [
            {
              "$ref": "#/definitions/Action"
            }
          ],
		 "example": "GetByEmployeeId"
        },
        "EmployeeId": {
          "description": " Employee id for get by employee id",
          "allOf": [
            {
             "$ref": "#/definitions/EmployeeId"
            }
          ]
        },
        "StartDate": {
          "description": "Start date for get by employee id ",
          "allOf": [
            {
             "$ref": "#/definitions/StartDate"
            }
          ]
        },
       "EndDate": {
          "description": "End Date for get by employee id",
          "allOf": [
            {
              "$ref": "#/definitions/EndDate"
            }
          ]
        }
      }
    },

    "GetByAppraisalIdForEmployeeAppraisal":{
	  "type":"object",
	  "required": [
        "APIKey",
        "Action",
        "EmployeeId",
		"AppraisalId"],
	      "properties": {
	  "APIKey": {
          "description": "APIKey for employee api to GetByAppraisalId",
          "type": "string",
		  "allOf": [
            {
              "$ref": "#/definitions/APIKey"
            }
          ]
        },
        "Action": {
          "description": "Action name = GetByAppraisalId",
          "allOf": [
            {
              "$ref": "#/definitions/Action"
            }
          ],
		  "example": "GetByAppraisalId"
        },
        "EmployeeId": {
          "description": " Employee id for get by appraisal id",
          "allOf": [
            {
             "$ref": "#/definitions/EmployeeId"
            }
          ]
        },
        "AppraisalId": {
          "description": "Appraisal id for get by appraisal id",
          "allOf": [
            {
             "$ref": "#/definitions/AppraisalId"
            }
          ]
        }}
	},

	 "AddNewAppraisalParameter": {
      "type": "object",
      "required": [
        "APIKey",
        "Action",
        "EmployeeId",
		"AppraisalReviewDate",
		"Reviewer",
		"Notes",
		"ActionPlan",
		"Objectives",
		"CustomColumns",
		"AddFiles"],
      "properties": {
	  "APIKey": {
          "description": "APIKey for employee api to AddNewAppraisal",
          "type": "string",
		  "allOf": [
            {
              "$ref": "#/definitions/APIKey"
            }
          ]
        },
        "Action": {
          "description": "Action name = AddNewAppraisal",
          "allOf": [
            {
              "$ref": "#/definitions/Action"
            }
          ],
		    "example": "AddNewAppraisal"
        },
        "EmployeeId": {
          "description": "Employee id for add new appraisal",
          "allOf": [
            {
             "$ref": "#/definitions/EmployeeId"
            }
          ]
        },
		 "AppraisalReviewDate": {
          "description": "Appraisal review date for add new appraisal",
          "allOf": [
            {
             "$ref": "#/definitions/AppraisalReviewDate"
            }
          ]
        },
		 "Reviewer": {
          "description": "Reviewer for add new appraisal",
          "allOf": [
            {
             "$ref": "#/definitions/Reviewer"
            }
          ]
        },
        "Notes": {
          "description": "Notes for add new appraisal",
		   "allOf": [
            {
             "$ref": "#/definitions/Notes"
            }
          ]

        },
		"ActionPlan":{
		  "description": "Action Plan for add new appraisal",
		  "allOf": [
            {
             "$ref": "#/definitions/ActionPlan"
            }
          ]

		},
		"Objectives":{
		 "description": "Objectives for add new appraisal ",
		 "allOf": [
            {
             "$ref": "#/definitions/Objectives"
            }
          ]

		},
		"CustomColumns":{
		   "description": "Custom columns",
           "allOf": [
            {
             "$ref": "#/definitions/CustomColumnsArrayForAddNewAppraisal"
            }
          ]
		},
		"AddFiles":{
		   "description": "Add Files info.",
           "allOf": [
            {
             "$ref": "#/definitions/AddFilesArrayForAddNewAppraisal"
            }
          ]
		}}
    },

	 "UpdateAppraisalParameter":{
	 "type": "object",
      "required": [
        "APIKey",
        "Action",
        "EmployeeId",
		"AppraisalId",
		"AppraisalReviewDate",
		"Reviewer",
		"Notes",
        "ActionPlan",
		"Objectives",
		"CustomColumns",
		"AddFiles"],
	      "properties": {
	     "APIKey": {
          "description": "APIKey for employee api to UpdateAppraisal",
          "type": "string",
		  "allOf": [
            {
              "$ref": "#/definitions/APIKey"
            }
          ]
        },
        "Action": {
          "description": "Action name = UpdateAppraisal",
          "allOf": [
            {
              "$ref": "#/definitions/Action"
            }
          ],
		   "example": "UpdateAppraisal"
        },
        "EmployeeId": {
          "description": "Employee Id for update appraisal",
          "allOf": [
            {
             "$ref": "#/definitions/EmployeeId"
            }
          ]
        },
		 "AppraisalReviewDate": {
          "description": "Appraisal review date  for update appraisal",
          "allOf": [
            {
             "$ref": "#/definitions/AppraisalReviewDate"
            }
          ]
        },
		 "Reviewer": {
          "description": "Reviewer for update appraisal",
          "allOf": [
            {
             "$ref": "#/definitions/Reviewer"
            }
          ]
        },
        "Notes": {
          "description": "Notes for update appraisal",
           "allOf": [
            {
             "$ref": "#/definitions/Notes"
            }
          ]
        },
		"ActionPlan":{
		  "description": "Action Plan for update appraisal",
          "allOf": [
            {
             "$ref": "#/definitions/ActionPlan"
            }
          ]
		},
		"Objectives":{
		 "description": "Objectives for update appraisal",
         "allOf": [
            {
             "$ref": "#/definitions/Objectives"
            }
          ]
		},
		"CustomColumns":{
		   "description": "Custom Columns of user",
           "allOf": [
            {
             "$ref": "#/definitions/CustomColumnsArrayForUpdateAppraisal"
            }
          ]
		},
		"AddFiles":{
		   "description": "Add Files Info.",
           "allOf": [
            {
              "$ref": "#/definitions/AddFilesArrayForUpdateAppraisal"
            }
          ]
		}
      }
	},
	"DeleteAppraisalParameter":{
	    "type": "object",
        "required": [
        "APIKey",
        "Action",
        "EmployeeId",
		"AppraisalId"],
	"properties": {
	  "APIKey": {
          "description": "APIKey for employee api to DeleteAppraisal",
          "type": "string",
		  "allOf": [
            {
              "$ref": "#/definitions/APIKey"
            }
          ]
        },
        "Action": {
          "description": "Action name = DeleteAppraisal",
          "allOf": [
            {
              "$ref": "#/definitions/Action"
            }
          ],
		    "example": "DeleteAppraisal"
        },
        "EmployeeId": {
          "description": "Employee Id for delete appraisal",
          "allOf": [
            {
             "$ref": "#/definitions/EmployeeId"
            }
          ]
        },
		 "AppraisalId": {
          "description": "Appraisal Id for delete appraisal",
          "allOf": [
            {
             "$ref": "#/definitions/AppraisalId"
            }
          ]
        }}
	},

	"GetByMaternityPaternityParameter": {
      "type": "object",
      "required": [
        "APIKey",
        "Action",
		"EmployeeId",
		"MaternityPaternityTxnId"
       ],
      "properties": {
		"APIKey": {
          "description": "APIKey for get by maternity paternity",
          "type": "string",
		  "allOf": [
            {
              "$ref": "#/definitions/APIKey"
            }
          ]
        },
        "Action": {
          "description": "Action name = GetByMaternityPaternityId",
          "allOf": [
            {
              "$ref": "#/definitions/Action"
            }
          ],
		  "example": "GetByMaternityPaternityId"
        },
		"EmployeeId": {
          "description": "Employeeid for get by maternity paternity",
          "allOf": [
            {
              "$ref": "#/definitions/EmployeeId"
            }
          ]
        },
		 "MaternityPaternityTxnId": {
          "description": "CPID for get by maternity paternity",
          "allOf": [
            {
              "$ref": "#/definitions/MaternityPaternityTxnId"
            }
          ]
        }
	  }
    },

	"GetMaternityPaternityByEmployeeIdParameter": {
      "type": "object",
      "required": [
        "APIKey",
        "Action",
		"EmployeeId"
	 ],
      "properties": {
		"APIKey": {
          "description": "APIKey for get by maternity paternity by employeeid",
          "type": "string",
		  "allOf": [
            {
              "$ref": "#/definitions/APIKey"
            }
          ]
        },
        "Action": {
          "description": "Action name = GetMaternityPaternityByEmployeeId",
          "allOf": [
            {
              "$ref": "#/definitions/Action"
            }
          ],
		   "example": "GetMaternityPaternityByEmployeeId"
        },
		"EmployeeId": {
          "description": "Employeeid for get by maternity paternity by employeeid",
          "allOf": [
            {
              "$ref": "#/definitions/EmployeeId"
            }
          ]
        },
		 "ActualStartDate": {
          "description": "CPID for get by maternity paternity by employee id",
          "allOf": [
            {
              "$ref": "#/definitions/ActualStartDate"
            }
          ]
        },
		 "ActualEndDate": {
          "description": "CPID for get by maternity paternity by employee id",
          "allOf": [
            {
              "$ref": "#/definitions/ActualEndDate"
            }
          ]
        }
	  }
    },

	"AddNewMaternityPaternityParameter":{
	 "type": "object",
      "required": [
        "APIKey",
        "Action",
        "EmployeeId",
		"DueDate",
		"ActualStartDate",
		"ActualEndDate",
		"AddComments",
        "AddFiles"],
	"properties": {
	  "APIKey": {
          "description": "APIKey for employee api to AddNewMaternityPaternity",
          "type": "string",
		  "allOf": [
            {
              "$ref": "#/definitions/APIKey"
            }
          ]
        },
        "Action": {
          "description": "Action name = AddNewMaternityPaternity",
          "allOf": [
            {
              "$ref": "#/definitions/Action"
            }
          ],
		   "example": "AddNewMaternityPaternity"
        },
        "EmployeeId": {
          "description": "Employee Id for add new maternity paternity",
          "allOf": [
            {
             "$ref": "#/definitions/EmployeeId"
            }
          ]
        },
		 "DueDate": {
          "description": "DueDate for add new maternity paternity",
          "allOf": [
            {
             "$ref": "#/definitions/DueDate"
            }
          ]
        },
		 "ActualStartDate": {
          "description": "Actual Start Date for add new maternity paternity",
          "allOf": [
            {
             "$ref": "#/definitions/ActualStartDate"
            }
          ]
        },
		 "ActualEndDate": {
          "description": "Actual End Date for add new maternity paternity",
          "allOf": [
            {
             "$ref": "#/definitions/ActualEndDate"
            }
          ]
        },
		"AddComments": {
          "description": "AddComments value",
          "allOf": [
            {
             "$ref": "#/definitions/AddCommentsArrayForMaternityPaternity"
            }
          ]
        },
      "AddFiles": {
          "description": "AddFiles info.",
          "allOf": [
            {
              "$ref": "#/definitions/AddFilesArrayForAddNewMaternityPaternity"
            }
          ]
        }}
	},
	"AddCommentsArrayForMaternityPaternity":{
	  "type": "array",
	  "items" :{
	  "required":[
	  "Comment"],
	  "type":"object",
      "properties": {
        "Comment": {
          "description": "Comments goes here",
          "type": "string",
		  "example":"Comments goes here",
		  "maxLength":"1024"
        }
      }
	  }
	},
 "AddFilesArrayForAddNewMaternityPaternity":{
    "type": "array",
	  "items" :{
	 "required":[
	  "DocumentName",
	  "File"],
	  "type":"object",
      "properties": {
        "DocumentName": {
          "description": "DocumentName value",
          "type": "string",
		  "example":"123.png",
		  "maxLength":"100"
        },
		"File": {
          "description": "File",
          "type": "string",
		  "example":"pass base64 string"
        },
		"Description": {
          "description": "Description value",
          "type": "string",
		  "example":"dsadsadasdasd",
		   "maxLength":"256"
        }
      }
	  }
 },

	 "UpdateMaternityPaternityParameter":{
	 "type": "object",
      "required": [
        "APIKey",
        "Action",
        "EmployeeId",
		"MaternityPaternityTxnId",
		"DueDate",
		"ActualStartDate",
		"ActualEndDate",
		"AddComments",
        "AddFiles"
      ],
	"properties": {
	  "APIKey": {
          "description": "APIKey for employee api to UpdateMaternityPaternity",
          "type": "string",
		  "allOf": [
            {
              "$ref": "#/definitions/APIKey"
            }
          ]
        },
        "Action": {
          "description": "Action name = UpdateMaternityPaternity",
          "allOf": [
            {
              "$ref": "#/definitions/Action"
            }
          ],
		    "example": "UpdateMaternityPaternity"
        },
        "EmployeeId": {
          "description": "Employee Id for update maternity paternity",
          "allOf": [
            {
             "$ref": "#/definitions/EmployeeId"
            }
          ]
        },
		 "MaternityPaternityTxnId": {
          "description": "MaternityPaternityTxnId for update maternity paternity",
          "allOf": [
            {
             "$ref": "#/definitions/MaternityPaternityTxnId"
            }
          ]
        },
		 "DueDate": {
          "description": "DueDate for update maternity paternity",
          "allOf": [
            {
             "$ref": "#/definitions/DueDate"
            }
          ]
        },
		 "ActualStartDate": {
          "description": "ActualStartDate for update maternity paternity",
          "allOf": [
            {
             "$ref": "#/definitions/ActualStartDate"
            }
          ]
        },
		 "ActualEndDate": {
          "description": "ActualEndDate for update maternity paternity",
          "allOf": [
            {
             "$ref": "#/definitions/ActualEndDate"
            }
          ]
        },
		 "AddComments": {
          "description": "AddComments",
          "allOf": [
            {
             "$ref": "#/definitions/AddCommentsArrayForMaternityPaternity"
            }
          ]
        },
		"AddFiles": {
          "description": "AddFiles info.",
          "allOf": [
            {
             "$ref": "#/definitions/AddFilesArrayForAddNewMaternityPaternity"
            }
          ]
        }
      }
	},
	"DeleteMaternityPaternityParameter":{
	   "type": "object",
        "required": [
        "APIKey",
        "Action",
        "EmployeeId",
		"MaternityPaternityTxnId"
      ],
	"properties": {
	  "APIKey": {
          "description": "APIKey for employee api to DeleteMaternityPaternity",
          "type": "string",
		  "allOf": [
            {
              "$ref": "#/definitions/APIKey"
            }
          ]
        },
        "Action": {
          "description": "Action name = DeleteMaternityPaternity",
          "allOf": [
            {
              "$ref": "#/definitions/Action"
            }
          ],
		   "example": "DeleteMaternityPaternity"
        },
        "EmployeeId": {
          "description": "Employee Id value",
          "allOf": [
            {
             "$ref": "#/definitions/EmployeeId"
            }
          ]
        },
		 "MaternityPaternityTxnId": {
          "description": "MaternityPaternityTxnId Value",
          "allOf": [
            {
             "$ref": "#/definitions/MaternityPaternityTxnId"
            }
          ]
        }}
	}}


}